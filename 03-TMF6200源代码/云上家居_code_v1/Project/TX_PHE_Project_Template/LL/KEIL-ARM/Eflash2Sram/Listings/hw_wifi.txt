; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\hw_wifi.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\hw_wifi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\hw_wifi.crf ..\..\..\..\User\Hardware\hw_wifi.c]
                          THUMB

                          AREA ||i.HW_WIFI_Clear||, CODE, READONLY, ALIGN=2

                  HW_WIFI_Clear PROC
;;;56     
;;;57     void HW_WIFI_Clear(void) {
000000  b510              PUSH     {r4,lr}
;;;58         usart2_buf_idx = 0;
000002  2000              MOVS     r0,#0
000004  4903              LDR      r1,|L1.20|
000006  8008              STRH     r0,[r1,#0]
;;;59         memset((void *)&usart2_buf, 0, sizeof(usart2_buf));
000008  f44f7180          MOV      r1,#0x100
00000c  4802              LDR      r0,|L1.24|
00000e  f7fffffe          BL       __aeabi_memclr
;;;60     }
000012  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  |L1.20|
                          DCD      usart2_buf_idx
                  |L1.24|
                          DCD      usart2_buf

                          AREA ||i.HW_WIFI_GetRxDataPtr||, CODE, READONLY, ALIGN=2

                  HW_WIFI_GetRxDataPtr PROC
;;;65     
;;;66     uint8_t *HW_WIFI_GetRxDataPtr(void) {
000000  4800              LDR      r0,|L2.4|
;;;67         return (uint8_t *)usart2_buf;
;;;68     }
000002  4770              BX       lr
;;;69     
                          ENDP

                  |L2.4|
                          DCD      usart2_buf

                          AREA ||i.HW_WIFI_GetRxLen||, CODE, READONLY, ALIGN=2

                  HW_WIFI_GetRxLen PROC
;;;61     
;;;62     uint16_t HW_WIFI_GetRxLen(void) {
000000  4801              LDR      r0,|L3.8|
;;;63         return usart2_buf_idx;
000002  8800              LDRH     r0,[r0,#0]  ; usart2_buf_idx
;;;64     }
000004  4770              BX       lr
;;;65     
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      usart2_buf_idx

                          AREA ||i.HW_WIFI_Init||, CODE, READONLY, ALIGN=2

                  HW_WIFI_Init PROC
;;;6      
;;;7      void HW_WIFI_Init(void) {
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
;;;8          /* USART initialization structure variable */
;;;9          TYPE_LL_USART_INIT init;
;;;10         TYPE_LL_USART_CFG  usart_cfg;
;;;11         TYPE_LL_USART_IRQ_CFG usart_irq_cfg;
;;;12         
;;;13         memset((void *)&usart2_buf, 0, sizeof(usart2_buf));
000004  f44f7180          MOV      r1,#0x100
000008  482e              LDR      r0,|L4.196|
00000a  f7fffffe          BL       __aeabi_memclr
;;;14     
;;;15         /* Initialize the relevant variables of the USART */
;;;16         memset(&usart_cfg, 0x0, sizeof(usart_cfg));
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
000012  9003              STR      r0,[sp,#0xc]
000014  9004              STR      r0,[sp,#0x10]
;;;17         memset(&init, 0x0, sizeof(TYPE_LL_USART_INIT)); 
000016  9005              STR      r0,[sp,#0x14]
;;;18         
;;;19         /* Configuring system interrupts for the USART */
;;;20         NVIC_SetPriority(WIFI_COMM_UART_IRQn, 0);
000018  2005              MOVS     r0,#5
00001a  2100              MOVS     r1,#0
00001c  2800              CMP      r0,#0
00001e  db04              BLT      |L4.42|
000020  074a              LSLS     r2,r1,#29
000022  0e13              LSRS     r3,r2,#24
000024  4a28              LDR      r2,|L4.200|
000026  5413              STRB     r3,[r2,r0]
000028  e006              B        |L4.56|
                  |L4.42|
00002a  074a              LSLS     r2,r1,#29
00002c  0e14              LSRS     r4,r2,#24
00002e  4a27              LDR      r2,|L4.204|
000030  f000030f          AND      r3,r0,#0xf
000034  1f1b              SUBS     r3,r3,#4
000036  54d4              STRB     r4,[r2,r3]
                  |L4.56|
000038  bf00              NOP      
;;;21         NVIC_EnableIRQ(WIFI_COMM_UART_IRQn);
00003a  2005              MOVS     r0,#5
00003c  2800              CMP      r0,#0
00003e  db09              BLT      |L4.84|
000040  f000021f          AND      r2,r0,#0x1f
000044  2101              MOVS     r1,#1
000046  4091              LSLS     r1,r1,r2
000048  0942              LSRS     r2,r0,#5
00004a  0092              LSLS     r2,r2,#2
00004c  f10222e0          ADD      r2,r2,#0xe000e000
000050  f8c21100          STR      r1,[r2,#0x100]
                  |L4.84|
000054  bf00              NOP      
;;;22         
;;;23         /* Reset the USART module to enable the clock. */
;;;24         ll_usart_init(WIFI_COMM_UART, &init);
000056  a905              ADD      r1,sp,#0x14
000058  481d              LDR      r0,|L4.208|
00005a  f7fffffe          BL       ll_usart_init
;;;25         
;;;26         memset(&usart_irq_cfg, 0x0, sizeof(usart_irq_cfg));
00005e  2000              MOVS     r0,#0
000060  9000              STR      r0,[sp,#0]
000062  9001              STR      r0,[sp,#4]
;;;27         usart_irq_cfg.program_thre_intr_en = false;
000064  f88d0004          STRB     r0,[sp,#4]
;;;28         usart_irq_cfg.rx_ready_intr_en     = true;
000068  2001              MOVS     r0,#1
00006a  f88d0000          STRB     r0,[sp,#0]
;;;29         usart_irq_cfg.tx_empty_intr_en     = false;
00006e  2000              MOVS     r0,#0
000070  f88d0001          STRB     r0,[sp,#1]
;;;30         /* Configure USART interrupt */
;;;31         ll_usart_irq_config(WIFI_COMM_UART, &usart_irq_cfg);
000074  4669              MOV      r1,sp
000076  4816              LDR      r0,|L4.208|
000078  f7fffffe          BL       ll_usart_irq_config
;;;32         
;;;33         /* Configure information about the USART */
;;;34         /* Configure USART baud rate to 115200 */
;;;35         usart_cfg.baudrate       = SYS_CLK/16/WIFI_COMM_UART_BAUD;
00007c  4815              LDR      r0,|L4.212|
00007e  6800              LDR      r0,[r0,#0]  ; SYS_CLK
000080  0900              LSRS     r0,r0,#4
000082  f44f31e1          MOV      r1,#0x1c200
000086  fbb0f0f1          UDIV     r0,r0,r1
00008a  b280              UXTH     r0,r0
00008c  f8ad000e          STRH     r0,[sp,#0xe]
;;;36         usart_cfg.bit_width_sel  = LL_USART_WORD_LENGTH_8B;
000090  2003              MOVS     r0,#3
000092  f88d0009          STRB     r0,[sp,#9]
;;;37         usart_cfg.parity         = LL_USART_PARITY_NO;
000096  2000              MOVS     r0,#0
000098  f88d000a          STRB     r0,[sp,#0xa]
;;;38         usart_cfg.stop_bit_sel   = LL_USART_STOP_1B;
00009c  f88d0008          STRB     r0,[sp,#8]
;;;39         usart_cfg.rxfifo_trigger = LL_USART_RXFIFO_TRIG_1CHAR;
0000a0  f88d000c          STRB     r0,[sp,#0xc]
;;;40         usart_cfg.txfifo_trigger = LL_USART_TXFIFO_TRIG_EMPTY;
0000a4  f88d000d          STRB     r0,[sp,#0xd]
;;;41         usart_cfg.io_map         = LL_USART_IO_MAP0;
0000a8  2001              MOVS     r0,#1
0000aa  f88d0010          STRB     r0,[sp,#0x10]
;;;42         
;;;43         /* Call the USART driver configuration function */
;;;44         ll_usart232_config(WIFI_COMM_UART, &usart_cfg);
0000ae  a902              ADD      r1,sp,#8
0000b0  4807              LDR      r0,|L4.208|
0000b2  f7fffffe          BL       ll_usart232_config
;;;45         
;;;46         /* Reset Pin */
;;;47         ll_gpio_dir(WIFI_CTL_PORT, WIFI_CTL_RST, LL_GPIO_PIN_OUTPUT);
0000b6  2201              MOVS     r2,#1
0000b8  2110              MOVS     r1,#0x10
0000ba  4807              LDR      r0,|L4.216|
0000bc  f7fffffe          BL       ll_gpio_dir
;;;48     }
0000c0  b006              ADD      sp,sp,#0x18
0000c2  bd10              POP      {r4,pc}
;;;49     
                          ENDP

                  |L4.196|
                          DCD      usart2_buf
                  |L4.200|
                          DCD      0xe000e400
                  |L4.204|
                          DCD      0xe000ed18
                  |L4.208|
                          DCD      0x40005000
                  |L4.212|
                          DCD      SYS_CLK
                  |L4.216|
                          DCD      0x40027000

                          AREA ||i.HW_WIFI_Reset||, CODE, READONLY, ALIGN=2

                  HW_WIFI_Reset PROC
;;;49     
;;;50     void HW_WIFI_Reset(void) {
000000  b510              PUSH     {r4,lr}
;;;51         ll_gpio_bit_reset(WIFI_CTL_PORT, WIFI_CTL_RST);
000002  2010              MOVS     r0,#0x10
000004  4907              LDR      r1,|L5.36|
000006  6388              STR      r0,[r1,#0x38]
000008  bf00              NOP      
;;;52         delay_ms(250);
00000a  20fa              MOVS     r0,#0xfa
00000c  f7fffffe          BL       delay_ms
;;;53         ll_gpio_bit_set(WIFI_CTL_PORT, WIFI_CTL_RST);
000010  2010              MOVS     r0,#0x10
000012  0401              LSLS     r1,r0,#16
000014  4a03              LDR      r2,|L5.36|
000016  6391              STR      r1,[r2,#0x38]
000018  bf00              NOP      
;;;54         delay_ms(500);
00001a  f44f70fa          MOV      r0,#0x1f4
00001e  f7fffffe          BL       delay_ms
;;;55     }
000022  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  |L5.36|
                          DCD      0x40027000

                          AREA ||i.HW_WIFI_SendData||, CODE, READONLY, ALIGN=2

                  HW_WIFI_SendData PROC
;;;69     
;;;70     void HW_WIFI_SendData(uint8_t *tx_ptr, uint16_t len) {
000000  e00a              B        |L6.24|
                  |L6.2|
;;;71         while(len--) {
;;;72             /* Wait Usart to be no full */
;;;73             while(LL_USART_TXFIFO_NOT_FULL(WIFI_COMM_UART) == 0); 
000002  bf00              NOP      
                  |L6.4|
000004  4a07              LDR      r2,|L6.36|
000006  6fd2              LDR      r2,[r2,#0x7c]
000008  f0020202          AND      r2,r2,#2
00000c  2a00              CMP      r2,#0
00000e  d0f9              BEQ      |L6.4|
;;;74             /* Send data to Usart */    
;;;75             LL_USART_WRITE_DATA(WIFI_COMM_UART, *tx_ptr++);
000010  f8102b01          LDRB     r2,[r0],#1
000014  4b03              LDR      r3,|L6.36|
000016  601a              STR      r2,[r3,#0]
                  |L6.24|
000018  1e0a              SUBS     r2,r1,#0              ;71
00001a  f1a10301          SUB      r3,r1,#1              ;71
00001e  b299              UXTH     r1,r3                 ;71
000020  d1ef              BNE      |L6.2|
;;;76         }
;;;77     }
000022  4770              BX       lr
;;;78     //void HW_WIFI_SendData(u8 *tx_ptr, uint16_t len) {
                          ENDP

                  |L6.36|
                          DCD      0x40005000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  usart2_buf
                          %        256

                          AREA ||.data||, DATA, ALIGN=1

                  usart2_buf_idx
000000  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\Hardware\\hw_wifi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_hw_wifi_c_0400a889____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___9_hw_wifi_c_0400a889____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_hw_wifi_c_0400a889____REVSH|
#line 474
|__asm___9_hw_wifi_c_0400a889____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_hw_wifi_c_0400a889____RRX|
#line 661
|__asm___9_hw_wifi_c_0400a889____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
