; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\mb.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\mb.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\mb.crf ..\..\..\..\Libraries\Protocol\Modbus\mb.c]
                          THUMB

                          AREA ||i.eMBClose||, CODE, READONLY, ALIGN=2

                  eMBClose PROC
;;;272    eMBErrorCode
;;;273    eMBClose( void )
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275        eMBErrorCode    eStatus = MB_ENOERR;
000002  2400              MOVS     r4,#0
;;;276    
;;;277        if( eMBState == STATE_DISABLED )
000004  4806              LDR      r0,|L1.32|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  2801              CMP      r0,#1
00000a  d106              BNE      |L1.26|
;;;278        {
;;;279            if( pvMBFrameCloseCur != NULL )
00000c  4805              LDR      r0,|L1.36|
00000e  6800              LDR      r0,[r0,#0]  ; pvMBFrameCloseCur
000010  b120              CBZ      r0,|L1.28|
;;;280            {
;;;281                pvMBFrameCloseCur(  );
000012  4804              LDR      r0,|L1.36|
000014  6800              LDR      r0,[r0,#0]  ; pvMBFrameCloseCur
000016  4780              BLX      r0
000018  e000              B        |L1.28|
                  |L1.26|
;;;282            }
;;;283        }
;;;284        else
;;;285        {
;;;286            eStatus = MB_EILLSTATE;
00001a  2406              MOVS     r4,#6
                  |L1.28|
;;;287        }
;;;288        return eStatus;
00001c  4620              MOV      r0,r4
;;;289    }
00001e  bd10              POP      {r4,pc}
;;;290    
                          ENDP

                  |L1.32|
                          DCD      eMBState
                  |L1.36|
                          DCD      pvMBFrameCloseCur

                          AREA ||i.eMBDisable||, CODE, READONLY, ALIGN=2

                  eMBDisable PROC
;;;309    eMBErrorCode
;;;310    eMBDisable( void )
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312        eMBErrorCode    eStatus;
;;;313    
;;;314        if( eMBState == STATE_ENABLED )
000002  480a              LDR      r0,|L2.44|
000004  7800              LDRB     r0,[r0,#0]  ; eMBState
000006  b938              CBNZ     r0,|L2.24|
;;;315        {
;;;316            pvMBFrameStopCur(  );
000008  4809              LDR      r0,|L2.48|
00000a  6800              LDR      r0,[r0,#0]  ; pvMBFrameStopCur
00000c  4780              BLX      r0
;;;317            eMBState = STATE_DISABLED;
00000e  2001              MOVS     r0,#1
000010  4906              LDR      r1,|L2.44|
000012  7008              STRB     r0,[r1,#0]
;;;318            eStatus = MB_ENOERR;
000014  2400              MOVS     r4,#0
000016  e006              B        |L2.38|
                  |L2.24|
;;;319        }
;;;320        else if( eMBState == STATE_DISABLED )
000018  4804              LDR      r0,|L2.44|
00001a  7800              LDRB     r0,[r0,#0]  ; eMBState
00001c  2801              CMP      r0,#1
00001e  d101              BNE      |L2.36|
;;;321        {
;;;322            eStatus = MB_ENOERR;
000020  2400              MOVS     r4,#0
000022  e000              B        |L2.38|
                  |L2.36|
;;;323        }
;;;324        else
;;;325        {
;;;326            eStatus = MB_EILLSTATE;
000024  2406              MOVS     r4,#6
                  |L2.38|
;;;327        }
;;;328        return eStatus;
000026  4620              MOV      r0,r4
;;;329    }
000028  bd10              POP      {r4,pc}
;;;330    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      eMBState
                  |L2.48|
                          DCD      pvMBFrameStopCur

                          AREA ||i.eMBEnable||, CODE, READONLY, ALIGN=2

                  eMBEnable PROC
;;;291    eMBErrorCode
;;;292    eMBEnable( void )
000000  b510              PUSH     {r4,lr}
;;;293    {
;;;294        eMBErrorCode    eStatus = MB_ENOERR;
000002  2400              MOVS     r4,#0
;;;295    
;;;296        if( eMBState == STATE_DISABLED )
000004  4806              LDR      r0,|L3.32|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  2801              CMP      r0,#1
00000a  d106              BNE      |L3.26|
;;;297        {
;;;298            /* Activate the protocol stack. */
;;;299            pvMBFrameStartCur(  );
00000c  4805              LDR      r0,|L3.36|
00000e  6800              LDR      r0,[r0,#0]  ; pvMBFrameStartCur
000010  4780              BLX      r0
;;;300            eMBState = STATE_ENABLED;
000012  2000              MOVS     r0,#0
000014  4902              LDR      r1,|L3.32|
000016  7008              STRB     r0,[r1,#0]
000018  e000              B        |L3.28|
                  |L3.26|
;;;301        }
;;;302        else
;;;303        {
;;;304            eStatus = MB_EILLSTATE;
00001a  2406              MOVS     r4,#6
                  |L3.28|
;;;305        }
;;;306        return eStatus;
00001c  4620              MOV      r0,r4
;;;307    }
00001e  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L3.32|
                          DCD      eMBState
                  |L3.36|
                          DCD      pvMBFrameStartCur

                          AREA ||i.eMBInit||, CODE, READONLY, ALIGN=2

                  eMBInit PROC
;;;129    eMBErrorCode
;;;130    eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;131    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;132        eMBErrorCode    eStatus = MB_ENOERR;
000010  f04f0800          MOV      r8,#0
;;;133    
;;;134        /* check preconditions */
;;;135        if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
000014  b11c              CBZ      r4,|L4.30|
;;;136            ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
000016  2c01              CMP      r4,#1
000018  db01              BLT      |L4.30|
00001a  2cf7              CMP      r4,#0xf7
00001c  dd02              BLE      |L4.36|
                  |L4.30|
;;;137        {
;;;138            eStatus = MB_EINVAL;
00001e  f04f0802          MOV      r8,#2
000022  e035              B        |L4.144|
                  |L4.36|
;;;139        }
;;;140        else
;;;141        {
;;;142            ucMBAddress = ucSlaveAddress;
000024  481c              LDR      r0,|L4.152|
000026  7004              STRB     r4,[r0,#0]
;;;143    
;;;144            switch ( eMode )
000028  bb05              CBNZ     r5,|L4.108|
;;;145            {
;;;146    #if MB_RTU_ENABLED > 0
;;;147            case MB_RTU:
;;;148                pvMBFrameStartCur = eMBRTUStart;
00002a  481c              LDR      r0,|L4.156|
00002c  491c              LDR      r1,|L4.160|
00002e  6008              STR      r0,[r1,#0]  ; pvMBFrameStartCur
;;;149                pvMBFrameStopCur = eMBRTUStop;
000030  481c              LDR      r0,|L4.164|
000032  491d              LDR      r1,|L4.168|
000034  6008              STR      r0,[r1,#0]  ; pvMBFrameStopCur
;;;150                peMBFrameSendCur = eMBRTUSend;
000036  481d              LDR      r0,|L4.172|
000038  491d              LDR      r1,|L4.176|
00003a  6008              STR      r0,[r1,#0]  ; peMBFrameSendCur
;;;151                peMBFrameReceiveCur = eMBRTUReceive;
00003c  481d              LDR      r0,|L4.180|
00003e  491e              LDR      r1,|L4.184|
000040  6008              STR      r0,[r1,#0]  ; peMBFrameReceiveCur
;;;152                pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
000042  2000              MOVS     r0,#0
000044  491d              LDR      r1,|L4.188|
000046  6008              STR      r0,[r1,#0]  ; pvMBFrameCloseCur
;;;153                pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
000048  481d              LDR      r0,|L4.192|
00004a  491e              LDR      r1,|L4.196|
00004c  6008              STR      r0,[r1,#0]  ; pxMBFrameCBByteReceived
;;;154                pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
00004e  481e              LDR      r0,|L4.200|
000050  491e              LDR      r1,|L4.204|
000052  6008              STR      r0,[r1,#0]  ; pxMBFrameCBTransmitterEmpty
;;;155                pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
000054  481e              LDR      r0,|L4.208|
000056  491f              LDR      r1,|L4.212|
000058  6008              STR      r0,[r1,#0]  ; pxMBPortCBTimerExpired
;;;156    
;;;157                eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
00005a  464b              MOV      r3,r9
00005c  463a              MOV      r2,r7
00005e  4631              MOV      r1,r6
000060  480d              LDR      r0,|L4.152|
000062  7800              LDRB     r0,[r0,#0]  ; ucMBAddress
000064  f7fffffe          BL       eMBRTUInit
000068  4680              MOV      r8,r0
;;;158                break;
00006a  e002              B        |L4.114|
                  |L4.108|
;;;159    #endif
;;;160    #if MB_ASCII_ENABLED > 0
;;;161            case MB_ASCII:
;;;162                pvMBFrameStartCur = eMBASCIIStart;
;;;163                pvMBFrameStopCur = eMBASCIIStop;
;;;164                peMBFrameSendCur = eMBASCIISend;
;;;165                peMBFrameReceiveCur = eMBASCIIReceive;
;;;166                pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
;;;167                pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
;;;168                pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
;;;169                pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
;;;170    
;;;171                eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
;;;172                break;
;;;173    #endif
;;;174            default:
;;;175                eStatus = MB_EINVAL;
00006c  f04f0802          MOV      r8,#2
000070  bf00              NOP                            ;144
                  |L4.114|
000072  bf00              NOP                            ;158
;;;176            }
;;;177    
;;;178            if( eStatus == MB_ENOERR )
000074  f1b80f00          CMP      r8,#0
000078  d10a              BNE      |L4.144|
;;;179            {
;;;180                if( !xMBPortEventInit(  ) )
00007a  f7fffffe          BL       xMBPortEventInit
00007e  b910              CBNZ     r0,|L4.134|
;;;181                {
;;;182                    /* port dependent event module initalization failed. */
;;;183                    eStatus = MB_EPORTERR;
000080  f04f0803          MOV      r8,#3
000084  e004              B        |L4.144|
                  |L4.134|
;;;184                }
;;;185                else
;;;186                {
;;;187                    eMBCurrentMode = eMode;
000086  4814              LDR      r0,|L4.216|
000088  7005              STRB     r5,[r0,#0]
;;;188                    eMBState = STATE_DISABLED;
00008a  2001              MOVS     r0,#1
00008c  4913              LDR      r1,|L4.220|
00008e  7008              STRB     r0,[r1,#0]
                  |L4.144|
;;;189                }
;;;190            }
;;;191        }
;;;192        return eStatus;
000090  4640              MOV      r0,r8
;;;193    }
000092  e8bd87f0          POP      {r4-r10,pc}
;;;194    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      ucMBAddress
                  |L4.156|
                          DCD      eMBRTUStart
                  |L4.160|
                          DCD      pvMBFrameStartCur
                  |L4.164|
                          DCD      eMBRTUStop
                  |L4.168|
                          DCD      pvMBFrameStopCur
                  |L4.172|
                          DCD      eMBRTUSend
                  |L4.176|
                          DCD      peMBFrameSendCur
                  |L4.180|
                          DCD      eMBRTUReceive
                  |L4.184|
                          DCD      peMBFrameReceiveCur
                  |L4.188|
                          DCD      pvMBFrameCloseCur
                  |L4.192|
                          DCD      xMBRTUReceiveFSM
                  |L4.196|
                          DCD      pxMBFrameCBByteReceived
                  |L4.200|
                          DCD      xMBRTUTransmitFSM
                  |L4.204|
                          DCD      pxMBFrameCBTransmitterEmpty
                  |L4.208|
                          DCD      xMBRTUTimerT35Expired
                  |L4.212|
                          DCD      pxMBPortCBTimerExpired
                  |L4.216|
                          DCD      eMBCurrentMode
                  |L4.220|
                          DCD      eMBState

                          AREA ||i.eMBPoll||, CODE, READONLY, ALIGN=2

                  eMBPoll PROC
;;;331    eMBErrorCode
;;;332    eMBPoll( void )
000000  b538              PUSH     {r3-r5,lr}
;;;333    {
;;;334        static UCHAR   *ucMBFrame;
;;;335        static UCHAR    ucRcvAddress;
;;;336        static UCHAR    ucFunctionCode;
;;;337        static USHORT   usLength;
;;;338        static eMBException eException;
;;;339    
;;;340        int             i;
;;;341        eMBErrorCode    eStatus = MB_ENOERR;
000002  2500              MOVS     r5,#0
;;;342        eMBEventType    eEvent;
;;;343    
;;;344        /* Check if the protocol stack is ready. */
;;;345        if( eMBState != STATE_ENABLED )
000004  4843              LDR      r0,|L5.276|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  b108              CBZ      r0,|L5.14|
;;;346        {
;;;347            return MB_EILLSTATE;
00000a  2006              MOVS     r0,#6
                  |L5.12|
;;;348        }
;;;349    
;;;350        /* Check if there is a event available. If not return control to caller.
;;;351         * Otherwise we will handle the event. */
;;;352        if( xMBPortEventGet( &eEvent ) == TRUE )
;;;353        {
;;;354            switch ( eEvent )
;;;355            {
;;;356            case EV_READY:
;;;357                break;
;;;358    
;;;359            case EV_FRAME_RECEIVED:
;;;360                eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
;;;361                if( eStatus == MB_ENOERR )
;;;362                {
;;;363                    /* Check if the frame is for us. If not ignore the frame. */
;;;364                    if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
;;;365                    {
;;;366                        ( void )xMBPortEventPost( EV_EXECUTE );
;;;367                    }
;;;368                }
;;;369                break;
;;;370    
;;;371            case EV_EXECUTE:
;;;372                ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
;;;373                eException = MB_EX_ILLEGAL_FUNCTION;
;;;374                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
;;;375                {
;;;376                    /* No more function handlers registered. Abort. */
;;;377                    if( xFuncHandlers[i].ucFunctionCode == 0 )
;;;378                    {
;;;379                        break;
;;;380                    }
;;;381                    else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
;;;382                    {
;;;383                        eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
;;;384                        break;
;;;385                    }
;;;386                }
;;;387    
;;;388                /* If the request was not sent to the broadcast address we
;;;389                 * return a reply. */
;;;390                if( ucRcvAddress != MB_ADDRESS_BROADCAST )
;;;391                {
;;;392                    if( eException != MB_EX_NONE )
;;;393                    {
;;;394                        /* An exception occured. Build an error frame. */
;;;395                        usLength = 0;
;;;396                        ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
;;;397                        ucMBFrame[usLength++] = eException;
;;;398                    }
;;;399                    if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
;;;400                    {
;;;401                        vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
;;;402                    }                
;;;403                    eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
;;;404                    if( eStatus == MB_ENOERR )
;;;405                    {
;;;406                        xMBRTUTransmitFSM();  
;;;407                    }
;;;408                }
;;;409                break;
;;;410    
;;;411            case EV_FRAME_SENT:
;;;412                break;
;;;413            }
;;;414        }
;;;415        return MB_ENOERR;
;;;416    }
00000c  bd38              POP      {r3-r5,pc}
                  |L5.14|
00000e  4668              MOV      r0,sp                 ;352
000010  f7fffffe          BL       xMBPortEventGet
000014  2801              CMP      r0,#1                 ;352
000016  d17a              BNE      |L5.270|
000018  f89d0000          LDRB     r0,[sp,#0]            ;354
00001c  b130              CBZ      r0,|L5.44|
00001e  2801              CMP      r0,#1                 ;354
000020  d005              BEQ      |L5.46|
000022  2802              CMP      r0,#2                 ;354
000024  d018              BEQ      |L5.88|
000026  2803              CMP      r0,#3                 ;354
000028  d170              BNE      |L5.268|
00002a  e06e              B        |L5.266|
                  |L5.44|
00002c  e06e              B        |L5.268|
                  |L5.46|
00002e  4a3a              LDR      r2,|L5.280|
000030  493a              LDR      r1,|L5.284|
000032  483b              LDR      r0,|L5.288|
000034  4b3b              LDR      r3,|L5.292|
000036  681b              LDR      r3,[r3,#0]            ;360  ; peMBFrameReceiveCur
000038  4798              BLX      r3                    ;360
00003a  4605              MOV      r5,r0                 ;360
00003c  b95d              CBNZ     r5,|L5.86|
00003e  4838              LDR      r0,|L5.288|
000040  7800              LDRB     r0,[r0,#0]            ;364  ; ucRcvAddress
000042  4939              LDR      r1,|L5.296|
000044  7809              LDRB     r1,[r1,#0]            ;364  ; ucMBAddress
000046  4288              CMP      r0,r1                 ;364
000048  d002              BEQ      |L5.80|
00004a  4835              LDR      r0,|L5.288|
00004c  7800              LDRB     r0,[r0,#0]            ;364  ; ucRcvAddress
00004e  b910              CBNZ     r0,|L5.86|
                  |L5.80|
000050  2002              MOVS     r0,#2                 ;366
000052  f7fffffe          BL       xMBPortEventPost
                  |L5.86|
000056  e059              B        |L5.268|
                  |L5.88|
000058  4830              LDR      r0,|L5.284|
00005a  6800              LDR      r0,[r0,#0]            ;372  ; ucMBFrame
00005c  7800              LDRB     r0,[r0,#0]            ;372
00005e  4933              LDR      r1,|L5.300|
000060  7008              STRB     r0,[r1,#0]            ;372
000062  2001              MOVS     r0,#1                 ;373
000064  4932              LDR      r1,|L5.304|
000066  7008              STRB     r0,[r1,#0]            ;373
000068  2400              MOVS     r4,#0                 ;374
00006a  e017              B        |L5.156|
                  |L5.108|
00006c  4831              LDR      r0,|L5.308|
00006e  f8100034          LDRB     r0,[r0,r4,LSL #3]     ;377
000072  b900              CBNZ     r0,|L5.118|
000074  e014              B        |L5.160|
                  |L5.118|
000076  482f              LDR      r0,|L5.308|
000078  f8100034          LDRB     r0,[r0,r4,LSL #3]     ;381
00007c  492b              LDR      r1,|L5.300|
00007e  7809              LDRB     r1,[r1,#0]            ;381  ; ucFunctionCode
000080  4288              CMP      r0,r1                 ;381
000082  d10a              BNE      |L5.154|
000084  482b              LDR      r0,|L5.308|
000086  eb0000c4          ADD      r0,r0,r4,LSL #3       ;383
00008a  4923              LDR      r1,|L5.280|
00008c  6842              LDR      r2,[r0,#4]            ;383
00008e  4823              LDR      r0,|L5.284|
000090  6800              LDR      r0,[r0,#0]            ;383  ; ucMBFrame
000092  4790              BLX      r2                    ;383
000094  4926              LDR      r1,|L5.304|
000096  7008              STRB     r0,[r1,#0]            ;383
000098  e002              B        |L5.160|
                  |L5.154|
00009a  1c64              ADDS     r4,r4,#1              ;374
                  |L5.156|
00009c  2c10              CMP      r4,#0x10              ;374
00009e  dbe5              BLT      |L5.108|
                  |L5.160|
0000a0  bf00              NOP                            ;379
0000a2  481f              LDR      r0,|L5.288|
0000a4  7800              LDRB     r0,[r0,#0]            ;390  ; ucRcvAddress
0000a6  b370              CBZ      r0,|L5.262|
0000a8  4821              LDR      r0,|L5.304|
0000aa  7800              LDRB     r0,[r0,#0]            ;392  ; eException
0000ac  b1c8              CBZ      r0,|L5.226|
0000ae  2000              MOVS     r0,#0                 ;395
0000b0  4919              LDR      r1,|L5.280|
0000b2  8008              STRH     r0,[r1,#0]            ;395
0000b4  481d              LDR      r0,|L5.300|
0000b6  7800              LDRB     r0,[r0,#0]            ;396  ; ucFunctionCode
0000b8  f0400180          ORR      r1,r0,#0x80           ;396
0000bc  4816              LDR      r0,|L5.280|
0000be  8802              LDRH     r2,[r0,#0]            ;396  ; usLength
0000c0  8800              LDRH     r0,[r0,#0]            ;396  ; usLength
0000c2  1c40              ADDS     r0,r0,#1              ;396
0000c4  4b14              LDR      r3,|L5.280|
0000c6  8018              STRH     r0,[r3,#0]            ;396
0000c8  4814              LDR      r0,|L5.284|
0000ca  6800              LDR      r0,[r0,#0]            ;396  ; ucMBFrame
0000cc  5481              STRB     r1,[r0,r2]            ;396
0000ce  4818              LDR      r0,|L5.304|
0000d0  7802              LDRB     r2,[r0,#0]            ;397  ; eException
0000d2  4618              MOV      r0,r3                 ;397
0000d4  8801              LDRH     r1,[r0,#0]            ;397  ; usLength
0000d6  8800              LDRH     r0,[r0,#0]            ;397  ; usLength
0000d8  1c40              ADDS     r0,r0,#1              ;397
0000da  8018              STRH     r0,[r3,#0]            ;397
0000dc  480f              LDR      r0,|L5.284|
0000de  6800              LDR      r0,[r0,#0]            ;397  ; ucMBFrame
0000e0  5442              STRB     r2,[r0,r1]            ;397
                  |L5.226|
0000e2  4815              LDR      r0,|L5.312|
0000e4  7800              LDRB     r0,[r0,#0]            ;399  ; eMBCurrentMode
0000e6  2801              CMP      r0,#1                 ;399
0000e8  d100              BNE      |L5.236|
0000ea  bf00              NOP                            ;399
                  |L5.236|
0000ec  480a              LDR      r0,|L5.280|
0000ee  8802              LDRH     r2,[r0,#0]            ;403  ; usLength
0000f0  480a              LDR      r0,|L5.284|
0000f2  6801              LDR      r1,[r0,#0]            ;403  ; ucMBFrame
0000f4  480c              LDR      r0,|L5.296|
0000f6  7800              LDRB     r0,[r0,#0]            ;403  ; ucMBAddress
0000f8  4b10              LDR      r3,|L5.316|
0000fa  681b              LDR      r3,[r3,#0]            ;403  ; peMBFrameSendCur
0000fc  4798              BLX      r3                    ;403
0000fe  4605              MOV      r5,r0                 ;403
000100  b90d              CBNZ     r5,|L5.262|
000102  f7fffffe          BL       xMBRTUTransmitFSM
                  |L5.262|
000106  e001              B        |L5.268|
000108  e001              B        |L5.270|
                  |L5.266|
00010a  bf00              NOP                            ;412
                  |L5.268|
00010c  bf00              NOP                            ;357
                  |L5.270|
00010e  2000              MOVS     r0,#0                 ;415
000110  e77c              B        |L5.12|
                          ENDP

000112  0000              DCW      0x0000
                  |L5.276|
                          DCD      eMBState
                  |L5.280|
                          DCD      usLength
                  |L5.284|
                          DCD      ucMBFrame
                  |L5.288|
                          DCD      ucRcvAddress
                  |L5.292|
                          DCD      peMBFrameReceiveCur
                  |L5.296|
                          DCD      ucMBAddress
                  |L5.300|
                          DCD      ucFunctionCode
                  |L5.304|
                          DCD      eException
                  |L5.308|
                          DCD      xFuncHandlers
                  |L5.312|
                          DCD      eMBCurrentMode
                  |L5.316|
                          DCD      peMBFrameSendCur

                          AREA ||i.eMBRegisterCB||, CODE, READONLY, ALIGN=2

                  eMBRegisterCB PROC
;;;225    eMBErrorCode
;;;226    eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
000000  b530              PUSH     {r4,r5,lr}
;;;227    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;228        int             i;
;;;229        eMBErrorCode    eStatus;
;;;230    
;;;231        if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
000006  2a00              CMP      r2,#0
000008  dd36              BLE      |L6.120|
00000a  2a7f              CMP      r2,#0x7f
00000c  dc34              BGT      |L6.120|
;;;232        {
;;;233            ENTER_CRITICAL_SECTION(  );
;;;234            if( pxHandler != NULL )
00000e  b1f3              CBZ      r3,|L6.78|
;;;235            {
;;;236                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
000010  2100              MOVS     r1,#0
000012  e012              B        |L6.58|
                  |L6.20|
;;;237                {
;;;238                    if( ( xFuncHandlers[i].pxHandler == NULL ) ||
000014  4c19              LDR      r4,|L6.124|
000016  eb0404c1          ADD      r4,r4,r1,LSL #3
00001a  6864              LDR      r4,[r4,#4]
00001c  b12c              CBZ      r4,|L6.42|
;;;239                        ( xFuncHandlers[i].pxHandler == pxHandler ) )
00001e  4c17              LDR      r4,|L6.124|
000020  eb0404c1          ADD      r4,r4,r1,LSL #3
000024  6864              LDR      r4,[r4,#4]
000026  429c              CMP      r4,r3
000028  d106              BNE      |L6.56|
                  |L6.42|
;;;240                    {
;;;241                        xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
00002a  4c14              LDR      r4,|L6.124|
00002c  f8042031          STRB     r2,[r4,r1,LSL #3]
;;;242                        xFuncHandlers[i].pxHandler = pxHandler;
000030  eb0404c1          ADD      r4,r4,r1,LSL #3
000034  6063              STR      r3,[r4,#4]
;;;243                        break;
000036  e002              B        |L6.62|
                  |L6.56|
000038  1c49              ADDS     r1,r1,#1              ;236
                  |L6.58|
00003a  2910              CMP      r1,#0x10              ;236
00003c  dbea              BLT      |L6.20|
                  |L6.62|
00003e  bf00              NOP      
;;;244                    }
;;;245                }
;;;246                eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
000040  2910              CMP      r1,#0x10
000042  d001              BEQ      |L6.72|
000044  2400              MOVS     r4,#0
000046  e000              B        |L6.74|
                  |L6.72|
000048  2404              MOVS     r4,#4
                  |L6.74|
00004a  4620              MOV      r0,r4
00004c  e015              B        |L6.122|
                  |L6.78|
;;;247            }
;;;248            else
;;;249            {
;;;250                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
00004e  2100              MOVS     r1,#0
000050  e00d              B        |L6.110|
                  |L6.82|
;;;251                {
;;;252                    if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
000052  4c0a              LDR      r4,|L6.124|
000054  f8144031          LDRB     r4,[r4,r1,LSL #3]
000058  4294              CMP      r4,r2
00005a  d107              BNE      |L6.108|
;;;253                    {
;;;254                        xFuncHandlers[i].ucFunctionCode = 0;
00005c  2400              MOVS     r4,#0
00005e  4d07              LDR      r5,|L6.124|
000060  f8054031          STRB     r4,[r5,r1,LSL #3]
;;;255                        xFuncHandlers[i].pxHandler = NULL;
000064  eb0505c1          ADD      r5,r5,r1,LSL #3
000068  606c              STR      r4,[r5,#4]
;;;256                        break;
00006a  e002              B        |L6.114|
                  |L6.108|
00006c  1c49              ADDS     r1,r1,#1              ;250
                  |L6.110|
00006e  2910              CMP      r1,#0x10              ;250
000070  dbef              BLT      |L6.82|
                  |L6.114|
000072  bf00              NOP      
;;;257                    }
;;;258                }
;;;259                /* Remove can't fail. */
;;;260                eStatus = MB_ENOERR;
000074  2000              MOVS     r0,#0
000076  e000              B        |L6.122|
                  |L6.120|
;;;261            }
;;;262            EXIT_CRITICAL_SECTION(  );
;;;263        }
;;;264        else
;;;265        {
;;;266            eStatus = MB_EINVAL;
000078  2002              MOVS     r0,#2
                  |L6.122|
;;;267        }
;;;268        return eStatus;
;;;269    }
00007a  bd30              POP      {r4,r5,pc}
;;;270    
                          ENDP

                  |L6.124|
                          DCD      xFuncHandlers

                          AREA ||.data||, DATA, ALIGN=2

                  ucMBAddress
000000  00                DCB      0x00
                  eMBCurrentMode
000001  00                DCB      0x00
                  eMBState
000002  0200              DCB      0x02,0x00
                  peMBFrameSendCur
                          DCD      0x00000000
                  pvMBFrameStartCur
                          DCD      0x00000000
                  pvMBFrameStopCur
                          DCD      0x00000000
                  peMBFrameReceiveCur
                          DCD      0x00000000
                  pvMBFrameCloseCur
                          DCD      0x00000000
                  pxMBFrameCBByteReceived
                          DCD      0x00000000
                  pxMBFrameCBTransmitterEmpty
                          DCD      0x00000000
                  pxMBPortCBTimerExpired
                          DCD      0x00000000
                  pxMBFrameCBReceiveFSMCur
                          DCD      0x00000000
                  pxMBFrameCBTransmitFSMCur
                          DCD      0x00000000
                  xFuncHandlers
00002c  11000000          DCB      0x11,0x00,0x00,0x00
                          DCD      eMBFuncReportSlaveID
                          %        120
                  ucMBFrame
                          DCD      0x00000000
                  ucRcvAddress
0000b0  00                DCB      0x00
                  ucFunctionCode
0000b1  00                DCB      0x00
                  usLength
0000b2  0000              DCB      0x00,0x00
                  eException
0000b4  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Libraries\\Protocol\\Modbus\\mb.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___4_mb_c_eMBInit____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___4_mb_c_eMBInit____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___4_mb_c_eMBInit____REVSH|
#line 474
|__asm___4_mb_c_eMBInit____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___4_mb_c_eMBInit____RRX|
#line 661
|__asm___4_mb_c_eMBInit____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
