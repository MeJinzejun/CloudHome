; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\drv_lcd.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\drv_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\drv_lcd.crf ..\..\..\..\User\ThirdDrivers\drv_lcd.c]
                          THUMB

                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=2

                  LCD_Clear PROC
;;;98     ******************************************************************************/	
;;;99     void LCD_Clear(u16 Color)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4606              MOV      r6,r0
;;;101      unsigned int i,m;  
;;;102    	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
000004  480e              LDR      r0,|L1.64|
000006  8840              LDRH     r0,[r0,#2]  ; lcddev
000008  1e40              SUBS     r0,r0,#1
00000a  b283              UXTH     r3,r0
00000c  480c              LDR      r0,|L1.64|
00000e  8800              LDRH     r0,[r0,#0]  ; lcddev
000010  1e40              SUBS     r0,r0,#1
000012  b282              UXTH     r2,r0
000014  2100              MOVS     r1,#0
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       LCD_SetWindows
;;;103    	for(i=0;i<lcddev.height;i++)
00001c  2400              MOVS     r4,#0
00001e  e00a              B        |L1.54|
                  |L1.32|
;;;104    	{
;;;105        for(m=0;m<lcddev.width;m++)
000020  2500              MOVS     r5,#0
000022  e003              B        |L1.44|
                  |L1.36|
;;;106        {	
;;;107    			Lcd_WriteData_16Bit(Color);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       Lcd_WriteData_16Bit
00002a  1c6d              ADDS     r5,r5,#1              ;105
                  |L1.44|
00002c  4804              LDR      r0,|L1.64|
00002e  8800              LDRH     r0,[r0,#0]            ;105  ; lcddev
000030  42a8              CMP      r0,r5                 ;105
000032  d8f7              BHI      |L1.36|
000034  1c64              ADDS     r4,r4,#1              ;103
                  |L1.54|
000036  4802              LDR      r0,|L1.64|
000038  8840              LDRH     r0,[r0,#2]            ;103  ; lcddev
00003a  42a0              CMP      r0,r4                 ;103
00003c  d8f0              BHI      |L1.32|
;;;108    		}
;;;109    	}
;;;110    } 
00003e  bd70              POP      {r4-r6,pc}
;;;111    
                          ENDP

                  |L1.64|
                          DCD      lcddev

                          AREA ||i.LCD_DrawPoint||, CODE, READONLY, ALIGN=2

                  LCD_DrawPoint PROC
;;;85     ******************************************************************************/	
;;;86     void LCD_DrawPoint(u16 x,u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;88     	LCD_SetCursor(x,y);//设置光标位置 
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LCD_SetCursor
;;;89     	Lcd_WriteData_16Bit(POINT_COLOR); 
00000e  4802              LDR      r0,|L2.24|
000010  8800              LDRH     r0,[r0,#0]  ; POINT_COLOR
000012  f7fffffe          BL       Lcd_WriteData_16Bit
;;;90     }
000016  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

                  |L2.24|
                          DCD      POINT_COLOR

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=1

                  LCD_Init PROC
;;;123    
;;;124    void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126        HW_LCD_Init();
000002  f7fffffe          BL       HW_LCD_Init
;;;127        
;;;128        LCD_RESET();
000006  f7fffffe          BL       LCD_RESET
;;;129        
;;;130        //*************2.8inch ILI9341初始化**********//	
;;;131    	LCD_WR_REG(0xCF);  
00000a  20cf              MOVS     r0,#0xcf
00000c  f7fffffe          BL       LCD_WR_REG
;;;132    	LCD_WR_DATA(0x00); 
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       LCD_WR_DATA
;;;133    	LCD_WR_DATA(0xC9); //C1 
000016  20c9              MOVS     r0,#0xc9
000018  f7fffffe          BL       LCD_WR_DATA
;;;134    	LCD_WR_DATA(0X30); 
00001c  2030              MOVS     r0,#0x30
00001e  f7fffffe          BL       LCD_WR_DATA
;;;135    	LCD_WR_REG(0xED);  
000022  20ed              MOVS     r0,#0xed
000024  f7fffffe          BL       LCD_WR_REG
;;;136    	LCD_WR_DATA(0x64); 
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       LCD_WR_DATA
;;;137    	LCD_WR_DATA(0x03); 
00002e  2003              MOVS     r0,#3
000030  f7fffffe          BL       LCD_WR_DATA
;;;138    	LCD_WR_DATA(0X12); 
000034  2012              MOVS     r0,#0x12
000036  f7fffffe          BL       LCD_WR_DATA
;;;139    	LCD_WR_DATA(0X81); 
00003a  2081              MOVS     r0,#0x81
00003c  f7fffffe          BL       LCD_WR_DATA
;;;140    	LCD_WR_REG(0xE8);  
000040  20e8              MOVS     r0,#0xe8
000042  f7fffffe          BL       LCD_WR_REG
;;;141    	LCD_WR_DATA(0x85); 
000046  2085              MOVS     r0,#0x85
000048  f7fffffe          BL       LCD_WR_DATA
;;;142    	LCD_WR_DATA(0x10); 
00004c  2010              MOVS     r0,#0x10
00004e  f7fffffe          BL       LCD_WR_DATA
;;;143    	LCD_WR_DATA(0x7A); 
000052  207a              MOVS     r0,#0x7a
000054  f7fffffe          BL       LCD_WR_DATA
;;;144    	LCD_WR_REG(0xCB);  
000058  20cb              MOVS     r0,#0xcb
00005a  f7fffffe          BL       LCD_WR_REG
;;;145    	LCD_WR_DATA(0x39); 
00005e  2039              MOVS     r0,#0x39
000060  f7fffffe          BL       LCD_WR_DATA
;;;146    	LCD_WR_DATA(0x2C); 
000064  202c              MOVS     r0,#0x2c
000066  f7fffffe          BL       LCD_WR_DATA
;;;147    	LCD_WR_DATA(0x00); 
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       LCD_WR_DATA
;;;148    	LCD_WR_DATA(0x34); 
000070  2034              MOVS     r0,#0x34
000072  f7fffffe          BL       LCD_WR_DATA
;;;149    	LCD_WR_DATA(0x02); 
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       LCD_WR_DATA
;;;150    	LCD_WR_REG(0xF7);  
00007c  20f7              MOVS     r0,#0xf7
00007e  f7fffffe          BL       LCD_WR_REG
;;;151    	LCD_WR_DATA(0x20); 
000082  2020              MOVS     r0,#0x20
000084  f7fffffe          BL       LCD_WR_DATA
;;;152    	LCD_WR_REG(0xEA);  
000088  20ea              MOVS     r0,#0xea
00008a  f7fffffe          BL       LCD_WR_REG
;;;153    	LCD_WR_DATA(0x00); 
00008e  2000              MOVS     r0,#0
000090  f7fffffe          BL       LCD_WR_DATA
;;;154    	LCD_WR_DATA(0x00); 
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       LCD_WR_DATA
;;;155    	LCD_WR_REG(0xC0);    //Power control 
00009a  20c0              MOVS     r0,#0xc0
00009c  f7fffffe          BL       LCD_WR_REG
;;;156    	LCD_WR_DATA(0x1B);   //VRH[5:0] 
0000a0  201b              MOVS     r0,#0x1b
0000a2  f7fffffe          BL       LCD_WR_DATA
;;;157    	LCD_WR_REG(0xC1);    //Power control 
0000a6  20c1              MOVS     r0,#0xc1
0000a8  f7fffffe          BL       LCD_WR_REG
;;;158    	LCD_WR_DATA(0x00);   //SAP[2:0];BT[3:0] 01 
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       LCD_WR_DATA
;;;159    	LCD_WR_REG(0xC5);    //VCM control 
0000b2  20c5              MOVS     r0,#0xc5
0000b4  f7fffffe          BL       LCD_WR_REG
;;;160    	LCD_WR_DATA(0x30); 	 //3F
0000b8  2030              MOVS     r0,#0x30
0000ba  f7fffffe          BL       LCD_WR_DATA
;;;161    	LCD_WR_DATA(0x30); 	 //3C
0000be  2030              MOVS     r0,#0x30
0000c0  f7fffffe          BL       LCD_WR_DATA
;;;162    	LCD_WR_REG(0xC7);    //VCM control2 
0000c4  20c7              MOVS     r0,#0xc7
0000c6  f7fffffe          BL       LCD_WR_REG
;;;163    	LCD_WR_DATA(0XB7); 
0000ca  20b7              MOVS     r0,#0xb7
0000cc  f7fffffe          BL       LCD_WR_DATA
;;;164    	LCD_WR_REG(0x36);    // Memory Access Control 
0000d0  2036              MOVS     r0,#0x36
0000d2  f7fffffe          BL       LCD_WR_REG
;;;165    	LCD_WR_DATA(0x08); 
0000d6  2008              MOVS     r0,#8
0000d8  f7fffffe          BL       LCD_WR_DATA
;;;166    	LCD_WR_REG(0x3A);   
0000dc  203a              MOVS     r0,#0x3a
0000de  f7fffffe          BL       LCD_WR_REG
;;;167    	LCD_WR_DATA(0x55); 
0000e2  2055              MOVS     r0,#0x55
0000e4  f7fffffe          BL       LCD_WR_DATA
;;;168    	LCD_WR_REG(0xB1);   
0000e8  20b1              MOVS     r0,#0xb1
0000ea  f7fffffe          BL       LCD_WR_REG
;;;169    	LCD_WR_DATA(0x00);   
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       LCD_WR_DATA
;;;170    	LCD_WR_DATA(0x1A); 
0000f4  201a              MOVS     r0,#0x1a
0000f6  f7fffffe          BL       LCD_WR_DATA
;;;171    	LCD_WR_REG(0xB6);    // Display Function Control 
0000fa  20b6              MOVS     r0,#0xb6
0000fc  f7fffffe          BL       LCD_WR_REG
;;;172    	LCD_WR_DATA(0x0A); 
000100  200a              MOVS     r0,#0xa
000102  f7fffffe          BL       LCD_WR_DATA
;;;173    	LCD_WR_DATA(0xA2); 
000106  20a2              MOVS     r0,#0xa2
000108  f7fffffe          BL       LCD_WR_DATA
;;;174    	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
00010c  20f2              MOVS     r0,#0xf2
00010e  f7fffffe          BL       LCD_WR_REG
;;;175    	LCD_WR_DATA(0x00); 
000112  2000              MOVS     r0,#0
000114  f7fffffe          BL       LCD_WR_DATA
;;;176    	LCD_WR_REG(0x26);    //Gamma curve selected 
000118  2026              MOVS     r0,#0x26
00011a  f7fffffe          BL       LCD_WR_REG
;;;177    	LCD_WR_DATA(0x01); 
00011e  2001              MOVS     r0,#1
000120  f7fffffe          BL       LCD_WR_DATA
;;;178    	LCD_WR_REG(0xE0);    //Set Gamma 
000124  20e0              MOVS     r0,#0xe0
000126  f7fffffe          BL       LCD_WR_REG
;;;179    	LCD_WR_DATA(0x0F); 
00012a  200f              MOVS     r0,#0xf
00012c  f7fffffe          BL       LCD_WR_DATA
;;;180    	LCD_WR_DATA(0x2A); 
000130  202a              MOVS     r0,#0x2a
000132  f7fffffe          BL       LCD_WR_DATA
;;;181    	LCD_WR_DATA(0x28); 
000136  2028              MOVS     r0,#0x28
000138  f7fffffe          BL       LCD_WR_DATA
;;;182    	LCD_WR_DATA(0x08); 
00013c  2008              MOVS     r0,#8
00013e  f7fffffe          BL       LCD_WR_DATA
;;;183    	LCD_WR_DATA(0x0E); 
000142  200e              MOVS     r0,#0xe
000144  f7fffffe          BL       LCD_WR_DATA
;;;184    	LCD_WR_DATA(0x08); 
000148  2008              MOVS     r0,#8
00014a  f7fffffe          BL       LCD_WR_DATA
;;;185    	LCD_WR_DATA(0x54); 
00014e  2054              MOVS     r0,#0x54
000150  f7fffffe          BL       LCD_WR_DATA
;;;186    	LCD_WR_DATA(0XA9); 
000154  20a9              MOVS     r0,#0xa9
000156  f7fffffe          BL       LCD_WR_DATA
;;;187    	LCD_WR_DATA(0x43); 
00015a  2043              MOVS     r0,#0x43
00015c  f7fffffe          BL       LCD_WR_DATA
;;;188    	LCD_WR_DATA(0x0A); 
000160  200a              MOVS     r0,#0xa
000162  f7fffffe          BL       LCD_WR_DATA
;;;189    	LCD_WR_DATA(0x0F); 
000166  200f              MOVS     r0,#0xf
000168  f7fffffe          BL       LCD_WR_DATA
;;;190    	LCD_WR_DATA(0x00); 
00016c  2000              MOVS     r0,#0
00016e  f7fffffe          BL       LCD_WR_DATA
;;;191    	LCD_WR_DATA(0x00); 
000172  2000              MOVS     r0,#0
000174  f7fffffe          BL       LCD_WR_DATA
;;;192    	LCD_WR_DATA(0x00); 
000178  2000              MOVS     r0,#0
00017a  f7fffffe          BL       LCD_WR_DATA
;;;193    	LCD_WR_DATA(0x00); 		 
00017e  2000              MOVS     r0,#0
000180  f7fffffe          BL       LCD_WR_DATA
;;;194    	LCD_WR_REG(0XE1);    //Set Gamma 
000184  20e1              MOVS     r0,#0xe1
000186  f7fffffe          BL       LCD_WR_REG
;;;195    	LCD_WR_DATA(0x00); 
00018a  2000              MOVS     r0,#0
00018c  f7fffffe          BL       LCD_WR_DATA
;;;196    	LCD_WR_DATA(0x15); 
000190  2015              MOVS     r0,#0x15
000192  f7fffffe          BL       LCD_WR_DATA
;;;197    	LCD_WR_DATA(0x17); 
000196  2017              MOVS     r0,#0x17
000198  f7fffffe          BL       LCD_WR_DATA
;;;198    	LCD_WR_DATA(0x07); 
00019c  2007              MOVS     r0,#7
00019e  f7fffffe          BL       LCD_WR_DATA
;;;199    	LCD_WR_DATA(0x11); 
0001a2  2011              MOVS     r0,#0x11
0001a4  f7fffffe          BL       LCD_WR_DATA
;;;200    	LCD_WR_DATA(0x06); 
0001a8  2006              MOVS     r0,#6
0001aa  f7fffffe          BL       LCD_WR_DATA
;;;201    	LCD_WR_DATA(0x2B); 
0001ae  202b              MOVS     r0,#0x2b
0001b0  f7fffffe          BL       LCD_WR_DATA
;;;202    	LCD_WR_DATA(0x56); 
0001b4  2056              MOVS     r0,#0x56
0001b6  f7fffffe          BL       LCD_WR_DATA
;;;203    	LCD_WR_DATA(0x3C); 
0001ba  203c              MOVS     r0,#0x3c
0001bc  f7fffffe          BL       LCD_WR_DATA
;;;204    	LCD_WR_DATA(0x05); 
0001c0  2005              MOVS     r0,#5
0001c2  f7fffffe          BL       LCD_WR_DATA
;;;205    	LCD_WR_DATA(0x10); 
0001c6  2010              MOVS     r0,#0x10
0001c8  f7fffffe          BL       LCD_WR_DATA
;;;206    	LCD_WR_DATA(0x0F); 
0001cc  200f              MOVS     r0,#0xf
0001ce  f7fffffe          BL       LCD_WR_DATA
;;;207    	LCD_WR_DATA(0x3F); 
0001d2  203f              MOVS     r0,#0x3f
0001d4  f7fffffe          BL       LCD_WR_DATA
;;;208    	LCD_WR_DATA(0x3F); 
0001d8  203f              MOVS     r0,#0x3f
0001da  f7fffffe          BL       LCD_WR_DATA
;;;209    	LCD_WR_DATA(0x0F); 
0001de  200f              MOVS     r0,#0xf
0001e0  f7fffffe          BL       LCD_WR_DATA
;;;210    	LCD_WR_REG(0x2B); 
0001e4  202b              MOVS     r0,#0x2b
0001e6  f7fffffe          BL       LCD_WR_REG
;;;211    	LCD_WR_DATA(0x00);
0001ea  2000              MOVS     r0,#0
0001ec  f7fffffe          BL       LCD_WR_DATA
;;;212    	LCD_WR_DATA(0x00);
0001f0  2000              MOVS     r0,#0
0001f2  f7fffffe          BL       LCD_WR_DATA
;;;213    	LCD_WR_DATA(0x01);
0001f6  2001              MOVS     r0,#1
0001f8  f7fffffe          BL       LCD_WR_DATA
;;;214    	LCD_WR_DATA(0x3f);
0001fc  203f              MOVS     r0,#0x3f
0001fe  f7fffffe          BL       LCD_WR_DATA
;;;215    	LCD_WR_REG(0x2A); 
000202  202a              MOVS     r0,#0x2a
000204  f7fffffe          BL       LCD_WR_REG
;;;216    	LCD_WR_DATA(0x00);
000208  2000              MOVS     r0,#0
00020a  f7fffffe          BL       LCD_WR_DATA
;;;217    	LCD_WR_DATA(0x00);
00020e  2000              MOVS     r0,#0
000210  f7fffffe          BL       LCD_WR_DATA
;;;218    	LCD_WR_DATA(0x00);
000214  2000              MOVS     r0,#0
000216  f7fffffe          BL       LCD_WR_DATA
;;;219    	LCD_WR_DATA(0xef);	 
00021a  20ef              MOVS     r0,#0xef
00021c  f7fffffe          BL       LCD_WR_DATA
;;;220    	LCD_WR_REG(0x11); //Exit Sleep
000220  2011              MOVS     r0,#0x11
000222  f7fffffe          BL       LCD_WR_REG
;;;221    	delay_ms(120);
000226  2078              MOVS     r0,#0x78
000228  f7fffffe          BL       delay_ms
;;;222    	LCD_WR_REG(0x29); //display on
00022c  2029              MOVS     r0,#0x29
00022e  f7fffffe          BL       LCD_WR_REG
;;;223    }
000232  bd10              POP      {r4,pc}
;;;224     
                          ENDP


                          AREA ||i.LCD_RESET||, CODE, READONLY, ALIGN=1

                  LCD_RESET PROC
;;;118    ******************************************************************************/	
;;;119    void LCD_RESET(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121    	HW_LCD_Reset();
000002  f7fffffe          BL       HW_LCD_Reset
;;;122    }
000006  bd10              POP      {r4,pc}
;;;123    
                          ENDP


                          AREA ||i.LCD_SetCursor||, CODE, READONLY, ALIGN=1

                  LCD_SetCursor PROC
;;;259    ******************************************************************************/ 
;;;260    void LCD_SetCursor(u16 Xpos, u16 Ypos)
000000  b570              PUSH     {r4-r6,lr}
;;;261    {	  	    			
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;262    	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
000006  462b              MOV      r3,r5
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_SetWindows
;;;263    } 
000012  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP


                          AREA ||i.LCD_SetWindows||, CODE, READONLY, ALIGN=2

                  LCD_SetWindows PROC
;;;234    ******************************************************************************/ 
;;;235    void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;236    {	
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;237    	LCD_WR_REG(lcddev.setxcmd);	
00000c  4911              LDR      r1,|L6.84|
00000e  7a88              LDRB     r0,[r1,#0xa]  ; lcddev
000010  f7fffffe          BL       LCD_WR_REG
;;;238    	LCD_WR_DATA(xStar>>8);
000014  1220              ASRS     r0,r4,#8
000016  f7fffffe          BL       LCD_WR_DATA
;;;239    	LCD_WR_DATA(0x00FF&xStar);		
00001a  b2e0              UXTB     r0,r4
00001c  f7fffffe          BL       LCD_WR_DATA
;;;240    	LCD_WR_DATA(xEnd>>8);
000020  1230              ASRS     r0,r6,#8
000022  f7fffffe          BL       LCD_WR_DATA
;;;241    	LCD_WR_DATA(0x00FF&xEnd);
000026  b2f0              UXTB     r0,r6
000028  f7fffffe          BL       LCD_WR_DATA
;;;242    
;;;243    	LCD_WR_REG(lcddev.setycmd);	
00002c  4909              LDR      r1,|L6.84|
00002e  7b08              LDRB     r0,[r1,#0xc]  ; lcddev
000030  f7fffffe          BL       LCD_WR_REG
;;;244    	LCD_WR_DATA(yStar>>8);
000034  1228              ASRS     r0,r5,#8
000036  f7fffffe          BL       LCD_WR_DATA
;;;245    	LCD_WR_DATA(0x00FF&yStar);		
00003a  b2e8              UXTB     r0,r5
00003c  f7fffffe          BL       LCD_WR_DATA
;;;246    	LCD_WR_DATA(yEnd>>8);
000040  1238              ASRS     r0,r7,#8
000042  f7fffffe          BL       LCD_WR_DATA
;;;247    	LCD_WR_DATA(0x00FF&yEnd);
000046  b2f8              UXTB     r0,r7
000048  f7fffffe          BL       LCD_WR_DATA
;;;248    
;;;249    	LCD_WriteRAM_Prepare();	//开始写入GRAM			
00004c  f7fffffe          BL       LCD_WriteRAM_Prepare
;;;250    }   
000050  e8bd81f0          POP      {r4-r8,pc}
;;;251    
                          ENDP

                  |L6.84|
                          DCD      lcddev

                          AREA ||i.LCD_WR_DATA||, CODE, READONLY, ALIGN=1

                  LCD_WR_DATA PROC
;;;34     ******************************************************************************/
;;;35     void LCD_WR_DATA(u8 data)
000000  b510              PUSH     {r4,lr}
;;;36     {
000002  4604              MOV      r4,r0
;;;37        HW_LCD_SendData(data);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HW_LCD_SendData
;;;38     }
00000a  bd10              POP      {r4,pc}
;;;39     
                          ENDP


                          AREA ||i.LCD_WR_REG||, CODE, READONLY, ALIGN=1

                  LCD_WR_REG PROC
;;;22     ******************************************************************************/
;;;23     void LCD_WR_REG(u8 data)
000000  b510              PUSH     {r4,lr}
;;;24     { 
000002  4604              MOV      r4,r0
;;;25        HW_LCD_SendReg(data);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HW_LCD_SendReg
;;;26     }
00000a  bd10              POP      {r4,pc}
;;;27     
                          ENDP


                          AREA ||i.LCD_WriteRAM_Prepare||, CODE, READONLY, ALIGN=2

                  LCD_WriteRAM_Prepare PROC
;;;60     ******************************************************************************/	 
;;;61     void LCD_WriteRAM_Prepare(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63     	LCD_WR_REG(lcddev.wramcmd);
000002  4902              LDR      r1,|L9.12|
000004  7a08              LDRB     r0,[r1,#8]  ; lcddev
000006  f7fffffe          BL       LCD_WR_REG
;;;64     }	 
00000a  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  |L9.12|
                          DCD      lcddev

                          AREA ||i.LCD_WriteReg||, CODE, READONLY, ALIGN=1

                  LCD_WriteReg PROC
;;;47     ******************************************************************************/
;;;48     void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {	
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;50     	LCD_WR_REG(LCD_Reg);  
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       LCD_WR_REG
;;;51     	LCD_WR_DATA(LCD_RegValue);	    		 
00000c  b2e0              UXTB     r0,r4
00000e  f7fffffe          BL       LCD_WR_DATA
;;;52     }	   
000012  bd70              POP      {r4-r6,pc}
;;;53     
                          ENDP


                          AREA ||i.LCD_direction||, CODE, READONLY, ALIGN=2

                  LCD_direction PROC
;;;274    ******************************************************************************/ 
;;;275    void LCD_direction(u8 direction)
000000  b510              PUSH     {r4,lr}
;;;276    { 
000002  4604              MOV      r4,r0
;;;277    			lcddev.setxcmd=0x2A;
000004  202a              MOVS     r0,#0x2a
000006  491e              LDR      r1,|L11.128|
000008  8148              STRH     r0,[r1,#0xa]
;;;278    			lcddev.setycmd=0x2B;
00000a  202b              MOVS     r0,#0x2b
00000c  8188              STRH     r0,[r1,#0xc]
;;;279    			lcddev.wramcmd=0x2C;
00000e  202c              MOVS     r0,#0x2c
000010  8108              STRH     r0,[r1,#8]
;;;280    	switch(direction){		  
000012  b134              CBZ      r4,|L11.34|
000014  2c01              CMP      r4,#1
000016  d00f              BEQ      |L11.56|
000018  2c02              CMP      r4,#2
00001a  d018              BEQ      |L11.78|
00001c  2c03              CMP      r4,#3
00001e  d12c              BNE      |L11.122|
000020  e020              B        |L11.100|
                  |L11.34|
;;;281    		case 0:						 	 		
;;;282    			lcddev.width=LCD_W;
000022  20f0              MOVS     r0,#0xf0
000024  4916              LDR      r1,|L11.128|
000026  8008              STRH     r0,[r1,#0]
;;;283    			lcddev.height=LCD_H;		
000028  f44f70a0          MOV      r0,#0x140
00002c  8048              STRH     r0,[r1,#2]
;;;284    			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
00002e  2108              MOVS     r1,#8
000030  2036              MOVS     r0,#0x36
000032  f7fffffe          BL       LCD_WriteReg
;;;285    		break;
000036  e021              B        |L11.124|
                  |L11.56|
;;;286    		case 1:
;;;287    			lcddev.width=LCD_H;
000038  f44f70a0          MOV      r0,#0x140
00003c  4910              LDR      r1,|L11.128|
00003e  8008              STRH     r0,[r1,#0]
;;;288    			lcddev.height=LCD_W;
000040  20f0              MOVS     r0,#0xf0
000042  8048              STRH     r0,[r1,#2]
;;;289    			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
000044  2168              MOVS     r1,#0x68
000046  2036              MOVS     r0,#0x36
000048  f7fffffe          BL       LCD_WriteReg
;;;290    		break;
00004c  e016              B        |L11.124|
                  |L11.78|
;;;291    		case 2:						 	 		
;;;292    			lcddev.width=LCD_W;
00004e  20f0              MOVS     r0,#0xf0
000050  490b              LDR      r1,|L11.128|
000052  8008              STRH     r0,[r1,#0]
;;;293    			lcddev.height=LCD_H;	
000054  f44f70a0          MOV      r0,#0x140
000058  8048              STRH     r0,[r1,#2]
;;;294    			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
00005a  21c8              MOVS     r1,#0xc8
00005c  2036              MOVS     r0,#0x36
00005e  f7fffffe          BL       LCD_WriteReg
;;;295    		break;
000062  e00b              B        |L11.124|
                  |L11.100|
;;;296    		case 3:
;;;297    			lcddev.width=LCD_H;
000064  f44f70a0          MOV      r0,#0x140
000068  4905              LDR      r1,|L11.128|
00006a  8008              STRH     r0,[r1,#0]
;;;298    			lcddev.height=LCD_W;
00006c  20f0              MOVS     r0,#0xf0
00006e  8048              STRH     r0,[r1,#2]
;;;299    			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
000070  21a8              MOVS     r1,#0xa8
000072  2036              MOVS     r0,#0x36
000074  f7fffffe          BL       LCD_WriteReg
;;;300    		break;	
000078  e000              B        |L11.124|
                  |L11.122|
;;;301    		default:break;
00007a  bf00              NOP      
                  |L11.124|
00007c  bf00              NOP                            ;285
;;;302    	}		
;;;303    }	 
00007e  bd10              POP      {r4,pc}
;;;304    
                          ENDP

                  |L11.128|
                          DCD      lcddev

                          AREA ||i.Lcd_WriteData_16Bit||, CODE, READONLY, ALIGN=1

                  Lcd_WriteData_16Bit PROC
;;;72     ******************************************************************************/	 
;;;73     void Lcd_WriteData_16Bit(u16 Data)
000000  b510              PUSH     {r4,lr}
;;;74     {	
000002  4604              MOV      r4,r0
;;;75        HW_LCD_SendData16Bit(Data);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       HW_LCD_SendData16Bit
;;;76     }
00000a  bd10              POP      {r4,pc}
;;;77     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  lcddev
                          %        14

                          AREA ||.data||, DATA, ALIGN=1

                  POINT_COLOR
000000  0000              DCW      0x0000
                  BACK_COLOR
000002  ffff              DCW      0xffff
                  DeviceCode
000004  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\ThirdDrivers\\drv_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_drv_lcd_c_4fcc5fa4____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___9_drv_lcd_c_4fcc5fa4____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_drv_lcd_c_4fcc5fa4____REVSH|
#line 474
|__asm___9_drv_lcd_c_4fcc5fa4____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_drv_lcd_c_4fcc5fa4____RRX|
#line 661
|__asm___9_drv_lcd_c_4fcc5fa4____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
