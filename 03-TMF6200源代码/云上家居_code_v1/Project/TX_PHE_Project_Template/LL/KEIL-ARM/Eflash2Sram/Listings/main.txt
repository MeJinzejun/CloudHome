; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\main.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\main.crf ..\..\..\..\User\LL\main.c]
                          THUMB

                          AREA ||i.Control_SG90||, CODE, READONLY, ALIGN=2

                  Control_SG90 PROC
;;;334    //舵机控制函数
;;;335    void Control_SG90(uint32_t us)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4604              MOV      r4,r0
;;;337    //500us,0度
;;;338    //1000us,45度
;;;339    //1500us,90度
;;;340    //2000us,145度
;;;341    //2500us,180度
;;;342    	int i=0;
000004  2500              MOVS     r5,#0
;;;343    	for(i=0;i<10;i++)
000006  bf00              NOP      
000008  e014              B        |L1.52|
                  |L1.10|
;;;344    	{
;;;345    		if(us<=20000)
00000a  f6446020          MOV      r0,#0x4e20
00000e  4284              CMP      r4,r0
000010  d80f              BHI      |L1.50|
;;;346    		{
;;;347    			ll_gpio_bit_set(GPIOB, BIT(6));
000012  2140              MOVS     r1,#0x40
000014  4809              LDR      r0,|L1.60|
000016  f7fffffe          BL       ll_gpio_bit_set
;;;348    			delay_us(us);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       delay_us
;;;349    			ll_gpio_bit_reset(GPIOB, BIT(6));
000020  2140              MOVS     r1,#0x40
000022  4806              LDR      r0,|L1.60|
000024  f7fffffe          BL       ll_gpio_bit_reset
;;;350    			delay_us(20000-us);
000028  f6446120          MOV      r1,#0x4e20
00002c  1b08              SUBS     r0,r1,r4
00002e  f7fffffe          BL       delay_us
                  |L1.50|
000032  1c6d              ADDS     r5,r5,#1              ;343
                  |L1.52|
000034  2d0a              CMP      r5,#0xa               ;343
000036  dbe8              BLT      |L1.10|
;;;351    		}
;;;352    	}
;;;353    }
000038  bd70              POP      {r4-r6,pc}
;;;354    int main(void) {
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x40024000

                          AREA ||i.caijishuju||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  caijishuju PROC
;;;266    //数据采集函数
;;;267    void caijishuju(void){
000000  b538              PUSH     {r3-r5,lr}
;;;268    	//温湿度
;;;269    	dht11_read(&temp,&hum);
000002  4964              LDR      r1,|L2.404|
000004  4864              LDR      r0,|L2.408|
000006  f7fffffe          BL       dht11_read
;;;270    	//人体红外
;;;271    	rentizhi=ll_gpio_read_data_bit(GPIOB, BIT(4));
00000a  2110              MOVS     r1,#0x10
00000c  4863              LDR      r0,|L2.412|
00000e  f7fffffe          BL       ll_gpio_read_data_bit
000012  4963              LDR      r1,|L2.416|
000014  6008              STR      r0,[r1,#0]  ; rentizhi
;;;272    	//紫外线
;;;273    	//fadc_handle();
;;;274    	//光敏值
;;;275    	guangmin=ll_gpio_read_data_bit(GPIOB, BIT(0));
000016  2101              MOVS     r1,#1
000018  4860              LDR      r0,|L2.412|
00001a  f7fffffe          BL       ll_gpio_read_data_bit
00001e  4961              LDR      r1,|L2.420|
000020  6008              STR      r0,[r1,#0]  ; guangmin
;;;276    	//雨滴
;;;277    	yudi=ll_gpio_read_data_bit(GPIOB, BIT(2));
000022  2104              MOVS     r1,#4
000024  485d              LDR      r0,|L2.412|
000026  f7fffffe          BL       ll_gpio_read_data_bit
00002a  495f              LDR      r1,|L2.424|
00002c  6008              STR      r0,[r1,#0]  ; yudi
;;;278    	//按钮
;;;279    	button1=ll_gpio_read_data_bit(GPIOB, BIT(1));
00002e  2102              MOVS     r1,#2
000030  485a              LDR      r0,|L2.412|
000032  f7fffffe          BL       ll_gpio_read_data_bit
000036  495d              LDR      r1,|L2.428|
000038  6008              STR      r0,[r1,#0]  ; button1
;;;280    	button2=ll_gpio_read_data_bit(GPIOB, BIT(3));
00003a  2108              MOVS     r1,#8
00003c  4857              LDR      r0,|L2.412|
00003e  f7fffffe          BL       ll_gpio_read_data_bit
000042  495b              LDR      r1,|L2.432|
000044  6008              STR      r0,[r1,#0]  ; button2
;;;281    	//触摸
;;;282    	chumo1=ll_gpio_read_data_bit(GPIOB, BIT(6));
000046  2140              MOVS     r1,#0x40
000048  4854              LDR      r0,|L2.412|
00004a  f7fffffe          BL       ll_gpio_read_data_bit
00004e  4959              LDR      r1,|L2.436|
000050  6008              STR      r0,[r1,#0]  ; chumo1
;;;283    	chumo2=ll_gpio_read_data_bit(GPIOB, BIT(12));
000052  f44f5180          MOV      r1,#0x1000
000056  4851              LDR      r0,|L2.412|
000058  f7fffffe          BL       ll_gpio_read_data_bit
00005c  4956              LDR      r1,|L2.440|
00005e  6008              STR      r0,[r1,#0]  ; chumo2
;;;284    	LCD_ShowNum(48,50, temp, 2, 16);
000060  2010              MOVS     r0,#0x10
000062  2302              MOVS     r3,#2
000064  9000              STR      r0,[sp,#0]
000066  484c              LDR      r0,|L2.408|
000068  7802              LDRB     r2,[r0,#0]  ; temp
00006a  2132              MOVS     r1,#0x32
00006c  2030              MOVS     r0,#0x30
00006e  f7fffffe          BL       LCD_ShowNum
;;;285    	LCD_ShowNum(48, 70, hum, 2, 16);
000072  2010              MOVS     r0,#0x10
000074  2302              MOVS     r3,#2
000076  9000              STR      r0,[sp,#0]
000078  4846              LDR      r0,|L2.404|
00007a  7802              LDRB     r2,[r0,#0]  ; hum
00007c  2146              MOVS     r1,#0x46
00007e  2030              MOVS     r0,#0x30
000080  f7fffffe          BL       LCD_ShowNum
;;;286    	LCD_ShowNum(64, 90, rentizhi, 1, 16);
000084  2010              MOVS     r0,#0x10
000086  2301              MOVS     r3,#1
000088  9000              STR      r0,[sp,#0]
00008a  4845              LDR      r0,|L2.416|
00008c  215a              MOVS     r1,#0x5a
00008e  6802              LDR      r2,[r0,#0]  ; rentizhi
000090  2040              MOVS     r0,#0x40
000092  f7fffffe          BL       LCD_ShowNum
;;;287    	LCD_ShowNum(64, 110, guangmin, 1, 16);
000096  2010              MOVS     r0,#0x10
000098  2301              MOVS     r3,#1
00009a  9000              STR      r0,[sp,#0]
00009c  4841              LDR      r0,|L2.420|
00009e  216e              MOVS     r1,#0x6e
0000a0  6802              LDR      r2,[r0,#0]  ; guangmin
0000a2  2040              MOVS     r0,#0x40
0000a4  f7fffffe          BL       LCD_ShowNum
;;;288    	LCD_ShowNum(64, 130, yudi, 1, 16);
0000a8  2010              MOVS     r0,#0x10
0000aa  2301              MOVS     r3,#1
0000ac  9000              STR      r0,[sp,#0]
0000ae  483e              LDR      r0,|L2.424|
0000b0  2182              MOVS     r1,#0x82
0000b2  6802              LDR      r2,[r0,#0]  ; yudi
0000b4  2040              MOVS     r0,#0x40
0000b6  f7fffffe          BL       LCD_ShowNum
;;;289    	
;;;290    	//dht11_read(&temp,&hum);
;;;291    	sprintf(temp_str, "AT+MQTTPUB=0,\"/sys/jk1zFbWTW6V/class-rack/thing/event/property/post\",\"{\\\"method\\\":\\\"thing.event.property.post\\\"\\,\\\"id\\\":\\\"1234\\\"\\,\\\"params\\\":{\\\"temp\\\":%d}\\,\\\"version\\\":\\\"1.0.0\\\"}\",1,0\r\n", temp);
0000ba  4837              LDR      r0,|L2.408|
0000bc  7802              LDRB     r2,[r0,#0]  ; temp
0000be  493f              LDR      r1,|L2.444|
0000c0  483f              LDR      r0,|L2.448|
0000c2  f7fffffe          BL       __2sprintf
;;;292    	HW_WIFI_SendData((uint8_t *)temp_str, strlen(temp_str));
0000c6  483e              LDR      r0,|L2.448|
0000c8  f7fffffe          BL       strlen
0000cc  b284              UXTH     r4,r0
0000ce  4621              MOV      r1,r4
0000d0  483b              LDR      r0,|L2.448|
0000d2  f7fffffe          BL       HW_WIFI_SendData
;;;293    	delay_ms(150);
0000d6  2096              MOVS     r0,#0x96
0000d8  f7fffffe          BL       delay_ms
;;;294    	dht11_read(&temp,&hum);
0000dc  492d              LDR      r1,|L2.404|
0000de  482e              LDR      r0,|L2.408|
0000e0  f7fffffe          BL       dht11_read
;;;295    	sprintf(hum_str, "AT+MQTTPUB=0,\"/sys/jk1zFbWTW6V/class-rack/thing/event/property/post\",\"{\\\"method\\\":\\\"thing.event.property.post\\\"\\,\\\"id\\\":\\\"1232\\\"\\,\\\"params\\\":{\\\"hum\\\":%d}\\,\\\"version\\\":\\\"1.0.0\\\"}\",1,0\r\n", hum);
0000e4  482b              LDR      r0,|L2.404|
0000e6  7802              LDRB     r2,[r0,#0]  ; hum
0000e8  4936              LDR      r1,|L2.452|
0000ea  4837              LDR      r0,|L2.456|
0000ec  f7fffffe          BL       __2sprintf
;;;296    	HW_WIFI_SendData((uint8_t *)hum_str, strlen(hum_str));
0000f0  4835              LDR      r0,|L2.456|
0000f2  f7fffffe          BL       strlen
0000f6  b284              UXTH     r4,r0
0000f8  4621              MOV      r1,r4
0000fa  4833              LDR      r0,|L2.456|
0000fc  f7fffffe          BL       HW_WIFI_SendData
;;;297    	delay_ms(200);
000100  20c8              MOVS     r0,#0xc8
000102  f7fffffe          BL       delay_ms
;;;298    	yudi=ll_gpio_read_data_bit(GPIOB, BIT(2));
000106  2104              MOVS     r1,#4
000108  4824              LDR      r0,|L2.412|
00010a  f7fffffe          BL       ll_gpio_read_data_bit
00010e  4926              LDR      r1,|L2.424|
000110  6008              STR      r0,[r1,#0]  ; yudi
;;;299    	sprintf(yudi2, "AT+MQTTPUB=0,\"/sys/jk1zFbWTW6V/class-rack/thing/event/property/post\",\"{\\\"method\\\":\\\"thing.event.property.post\\\"\\,\\\"id\\\":\\\"1231\\\"\\,\\\"params\\\":{\\\"yudi\\\":%d}\\,\\\"version\\\":\\\"1.0.0\\\"}\",1,0\r\n", yudi);
000112  4608              MOV      r0,r1
000114  492d              LDR      r1,|L2.460|
000116  6802              LDR      r2,[r0,#0]  ; yudi
000118  482d              LDR      r0,|L2.464|
00011a  f7fffffe          BL       __2sprintf
;;;300    	HW_WIFI_SendData((uint8_t *)yudi2, strlen(yudi2));
00011e  482c              LDR      r0,|L2.464|
000120  f7fffffe          BL       strlen
000124  b284              UXTH     r4,r0
000126  4621              MOV      r1,r4
000128  4829              LDR      r0,|L2.464|
00012a  f7fffffe          BL       HW_WIFI_SendData
;;;301    	delay_ms(200);
00012e  20c8              MOVS     r0,#0xc8
000130  f7fffffe          BL       delay_ms
;;;302    	rentizhi=ll_gpio_read_data_bit(GPIOB, BIT(4));
000134  2110              MOVS     r1,#0x10
000136  4819              LDR      r0,|L2.412|
000138  f7fffffe          BL       ll_gpio_read_data_bit
00013c  4918              LDR      r1,|L2.416|
00013e  6008              STR      r0,[r1,#0]  ; rentizhi
;;;303    	sprintf(rentizhi2, "AT+MQTTPUB=0,\"/sys/jk1zFbWTW6V/class-rack/thing/event/property/post\",\"{\\\"method\\\":\\\"thing.event.property.post\\\"\\,\\\"id\\\":\\\"1235\\\"\\,\\\"params\\\":{\\\"renti\\\":%d}\\,\\\"version\\\":\\\"1.0.0\\\"}\",1,0\r\n", rentizhi);
000140  4608              MOV      r0,r1
000142  4924              LDR      r1,|L2.468|
000144  6802              LDR      r2,[r0,#0]  ; rentizhi
000146  4824              LDR      r0,|L2.472|
000148  f7fffffe          BL       __2sprintf
;;;304    	HW_WIFI_SendData((uint8_t *)rentizhi2, strlen(rentizhi2));
00014c  4822              LDR      r0,|L2.472|
00014e  f7fffffe          BL       strlen
000152  b284              UXTH     r4,r0
000154  4621              MOV      r1,r4
000156  4820              LDR      r0,|L2.472|
000158  f7fffffe          BL       HW_WIFI_SendData
;;;305    	delay_ms(200);
00015c  20c8              MOVS     r0,#0xc8
00015e  f7fffffe          BL       delay_ms
;;;306    	guangmin=ll_gpio_read_data_bit(GPIOB, BIT(0));
000162  2101              MOVS     r1,#1
000164  480d              LDR      r0,|L2.412|
000166  f7fffffe          BL       ll_gpio_read_data_bit
00016a  490e              LDR      r1,|L2.420|
00016c  6008              STR      r0,[r1,#0]  ; guangmin
;;;307    	sprintf(guangmin2, "AT+MQTTPUB=0,\"/sys/jk1zFbWTW6V/class-rack/thing/event/property/post\",\"{\\\"method\\\":\\\"thing.event.property.post\\\"\\,\\\"id\\\":\\\"1230\\\"\\,\\\"params\\\":{\\\"guangmin\\\":%d}\\,\\\"version\\\":\\\"1.0.0\\\"}\",1,0\r\n", guangmin);
00016e  4608              MOV      r0,r1
000170  491a              LDR      r1,|L2.476|
000172  6802              LDR      r2,[r0,#0]  ; guangmin
000174  481a              LDR      r0,|L2.480|
000176  f7fffffe          BL       __2sprintf
;;;308    	HW_WIFI_SendData((uint8_t *)guangmin2, strlen(guangmin2));
00017a  4819              LDR      r0,|L2.480|
00017c  f7fffffe          BL       strlen
000180  b284              UXTH     r4,r0
000182  4621              MOV      r1,r4
000184  4816              LDR      r0,|L2.480|
000186  f7fffffe          BL       HW_WIFI_SendData
;;;309    	delay_ms(200);
00018a  20c8              MOVS     r0,#0xc8
00018c  f7fffffe          BL       delay_ms
;;;310    }
000190  bd38              POP      {r3-r5,pc}
;;;311    
                          ENDP

000192  0000              DCW      0x0000
                  |L2.404|
                          DCD      hum
                  |L2.408|
                          DCD      temp
                  |L2.412|
                          DCD      0x40024000
                  |L2.416|
                          DCD      rentizhi
                  |L2.420|
                          DCD      guangmin
                  |L2.424|
                          DCD      yudi
                  |L2.428|
                          DCD      button1
                  |L2.432|
                          DCD      button2
                  |L2.436|
                          DCD      chumo1
                  |L2.440|
                          DCD      chumo2
                  |L2.444|
                          DCD      ||.conststring||+0xec
                  |L2.448|
                          DCD      temp_str
                  |L2.452|
                          DCD      ||.conststring||+0x1a8
                  |L2.456|
                          DCD      hum_str
                  |L2.460|
                          DCD      ||.conststring||+0x264
                  |L2.464|
                          DCD      yudi2
                  |L2.468|
                          DCD      ||.conststring||+0x320
                  |L2.472|
                          DCD      rentizhi2
                  |L2.476|
                          DCD      ||.conststring||+0x3dc
                  |L2.480|
                          DCD      guangmin2

                          AREA ||i.clk_config||, CODE, READONLY, ALIGN=2

                  clk_config PROC
;;;444    //时钟配置
;;;445    static void clk_config(void) {
000000  b508              PUSH     {r3,lr}
;;;446        TYPE_LL_CC_DIV_CFG cfg;
;;;447        ll_cc_syspll_set(SYS_CLK_VAL, LL_CC_RST_PLLCLK_SRC_HXOSC);
000002  2100              MOVS     r1,#0
000004  480a              LDR      r0,|L3.48|
000006  f7fffffe          BL       ll_cc_syspll_set
;;;448        ll_cc_sysclk_select(LL_CC_RST_SYSCLK_SRC_SYSPLL_DIV);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       ll_cc_sysclk_select
;;;449        ll_cc_adcpll_set(__EPWM_FADC_ADPLL_VAL, LL_CC_RST_PLLCLK_SRC_HXOSC);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L3.52|
000014  f7fffffe          BL       ll_cc_adcpll_set
;;;450        cfg.sys_clk_div = 0;
000018  2000              MOVS     r0,#0
00001a  f88d0000          STRB     r0,[sp,#0]
;;;451        cfg.apb0_clk_div = 0;
00001e  f88d0001          STRB     r0,[sp,#1]
;;;452        cfg.apb1_clk_div = 0;
000022  f88d0002          STRB     r0,[sp,#2]
;;;453        ll_cc_clk_div_config(&cfg);
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       ll_cc_clk_div_config
;;;454    }
00002c  bd08              POP      {r3,pc}
;;;455    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x04e33880
                  |L3.52|
                          DCD      0x15752a00

                          AREA ||i.dianjifan||, CODE, READONLY, ALIGN=2

                  dianjifan PROC
;;;323    //电机反转控制函数
;;;324    void dianjifan(int quanshu){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;325    	for(int i=0;i<(quanshu*6400);i++){
000004  2500              MOVS     r5,#0
000006  e012              B        |L4.46|
                  |L4.8|
;;;326    		ll_gpio_bit_set(GPIOC, BIT(0)); 
000008  2101              MOVS     r1,#1
00000a  480d              LDR      r0,|L4.64|
00000c  f7fffffe          BL       ll_gpio_bit_set
;;;327    		ll_gpio_bit_reset(GPIOC, BIT(2));
000010  2104              MOVS     r1,#4
000012  480b              LDR      r0,|L4.64|
000014  f7fffffe          BL       ll_gpio_bit_reset
;;;328    		delay_us(10);
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       delay_us
;;;329    		ll_gpio_bit_reset(GPIOC, BIT(0));
00001e  2101              MOVS     r1,#1
000020  4807              LDR      r0,|L4.64|
000022  f7fffffe          BL       ll_gpio_bit_reset
;;;330    		delay_us(10);
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       delay_us
00002c  1c6d              ADDS     r5,r5,#1              ;325
                  |L4.46|
00002e  eb0400c4          ADD      r0,r4,r4,LSL #3       ;325
000032  eb001004          ADD      r0,r0,r4,LSL #4       ;325
000036  ebb52f00          CMP      r5,r0,LSL #8          ;325
00003a  dbe5              BLT      |L4.8|
;;;331    	}
;;;332    }
00003c  bd70              POP      {r4-r6,pc}
;;;333    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      0x40025000

                          AREA ||i.dianjizheng||, CODE, READONLY, ALIGN=2

                  dianjizheng PROC
;;;312    //电机正转控制函数
;;;313    void dianjizheng(int quanshu){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;314    	for(int i=0;i<(quanshu*6400);i++){
000004  2500              MOVS     r5,#0
000006  e012              B        |L5.46|
                  |L5.8|
;;;315    		ll_gpio_bit_set(GPIOC, BIT(0)); 
000008  2101              MOVS     r1,#1
00000a  480d              LDR      r0,|L5.64|
00000c  f7fffffe          BL       ll_gpio_bit_set
;;;316    		ll_gpio_bit_set(GPIOC, BIT(2));
000010  2104              MOVS     r1,#4
000012  480b              LDR      r0,|L5.64|
000014  f7fffffe          BL       ll_gpio_bit_set
;;;317    		delay_us(10);
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       delay_us
;;;318    		ll_gpio_bit_reset(GPIOC, BIT(0));
00001e  2101              MOVS     r1,#1
000020  4807              LDR      r0,|L5.64|
000022  f7fffffe          BL       ll_gpio_bit_reset
;;;319    		delay_us(10);
000026  200a              MOVS     r0,#0xa
000028  f7fffffe          BL       delay_us
00002c  1c6d              ADDS     r5,r5,#1              ;314
                  |L5.46|
00002e  eb0400c4          ADD      r0,r4,r4,LSL #3       ;314
000032  eb001004          ADD      r0,r0,r4,LSL #4       ;314
000036  ebb52f00          CMP      r5,r0,LSL #8          ;314
00003a  dbe5              BLT      |L5.8|
;;;320    	}
;;;321    }
00003c  bd70              POP      {r4-r6,pc}
;;;322    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0x40025000

                          AREA ||i.lcd_show_kaishi||, CODE, READONLY, ALIGN=1

                  lcd_show_kaishi PROC
;;;209    //开机屏幕显示函数
;;;210    void lcd_show_kaishi(void){}
000000  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.lcd_show_shuju||, CODE, READONLY, ALIGN=2

                  lcd_show_shuju PROC
;;;212    //数据屏幕显示函数
;;;213    void lcd_show_shuju(void){
000000  b50e              PUSH     {r1-r3,lr}
;;;214    	//顶部显示
;;;215    	GUI_DrawFont16(84, 0, DARKBLUE, WHITE, "云",0);
000002  2000              MOVS     r0,#0
000004  a1df              ADR      r1,|L7.900|
000006  f64f73ff          MOV      r3,#0xffff
00000a  f24012cf          MOV      r2,#0x1cf
00000e  e9cd1000          STRD     r1,r0,[sp,#0]
000012  4601              MOV      r1,r0
000014  2054              MOVS     r0,#0x54
000016  f7fffffe          BL       GUI_DrawFont16
;;;216    	GUI_DrawFont16(100, 0, DARKBLUE, WHITE, "上",0);
00001a  2000              MOVS     r0,#0
00001c  a1da              ADR      r1,|L7.904|
00001e  f64f73ff          MOV      r3,#0xffff
000022  f24012cf          MOV      r2,#0x1cf
000026  e9cd1000          STRD     r1,r0,[sp,#0]
00002a  4601              MOV      r1,r0
00002c  2064              MOVS     r0,#0x64
00002e  f7fffffe          BL       GUI_DrawFont16
;;;217    	GUI_DrawFont16(116, 0, DARKBLUE, WHITE, "家",0);
000032  2000              MOVS     r0,#0
000034  a1d5              ADR      r1,|L7.908|
000036  f64f73ff          MOV      r3,#0xffff
00003a  f24012cf          MOV      r2,#0x1cf
00003e  e9cd1000          STRD     r1,r0,[sp,#0]
000042  4601              MOV      r1,r0
000044  2074              MOVS     r0,#0x74
000046  f7fffffe          BL       GUI_DrawFont16
;;;218    	GUI_DrawFont16(132, 0, DARKBLUE, WHITE, "居",0);
00004a  2000              MOVS     r0,#0
00004c  a1d0              ADR      r1,|L7.912|
00004e  f64f73ff          MOV      r3,#0xffff
000052  f24012cf          MOV      r2,#0x1cf
000056  e9cd1000          STRD     r1,r0,[sp,#0]
00005a  4601              MOV      r1,r0
00005c  2084              MOVS     r0,#0x84
00005e  f7fffffe          BL       GUI_DrawFont16
;;;219    	//底部显示
;;;220    	GUI_DrawFont16(84, 280, DARKBLUE, WHITE, "金",0);
000062  2000              MOVS     r0,#0
000064  a1cb              ADR      r1,|L7.916|
000066  f64f73ff          MOV      r3,#0xffff
00006a  f24012cf          MOV      r2,#0x1cf
00006e  e9cd1000          STRD     r1,r0,[sp,#0]
000072  f44f718c          MOV      r1,#0x118
000076  2054              MOVS     r0,#0x54
000078  f7fffffe          BL       GUI_DrawFont16
;;;221    	GUI_DrawFont16(100, 280, DARKBLUE, WHITE, "鹏",0);
00007c  2000              MOVS     r0,#0
00007e  a1c6              ADR      r1,|L7.920|
000080  f64f73ff          MOV      r3,#0xffff
000084  f24012cf          MOV      r2,#0x1cf
000088  e9cd1000          STRD     r1,r0,[sp,#0]
00008c  f44f718c          MOV      r1,#0x118
000090  2064              MOVS     r0,#0x64
000092  f7fffffe          BL       GUI_DrawFont16
;;;222    	GUI_DrawFont16(116, 280, DARKBLUE, WHITE, "公",0);
000096  2000              MOVS     r0,#0
000098  a1c0              ADR      r1,|L7.924|
00009a  f64f73ff          MOV      r3,#0xffff
00009e  f24012cf          MOV      r2,#0x1cf
0000a2  e9cd1000          STRD     r1,r0,[sp,#0]
0000a6  f44f718c          MOV      r1,#0x118
0000aa  2074              MOVS     r0,#0x74
0000ac  f7fffffe          BL       GUI_DrawFont16
;;;223    	GUI_DrawFont16(132, 280, DARKBLUE, WHITE, "司",0);
0000b0  2000              MOVS     r0,#0
0000b2  a1bb              ADR      r1,|L7.928|
0000b4  f64f73ff          MOV      r3,#0xffff
0000b8  f24012cf          MOV      r2,#0x1cf
0000bc  e9cd1000          STRD     r1,r0,[sp,#0]
0000c0  f44f718c          MOV      r1,#0x118
0000c4  2084              MOVS     r0,#0x84
0000c6  f7fffffe          BL       GUI_DrawFont16
;;;224    	//数据显示区域
;;;225    	GUI_DrawFont16(00, 30, BLUE, WHITE, "数",0);
0000ca  2000              MOVS     r0,#0
0000cc  a1b5              ADR      r1,|L7.932|
0000ce  f64f73ff          MOV      r3,#0xffff
0000d2  221f              MOVS     r2,#0x1f
0000d4  e9cd1000          STRD     r1,r0,[sp,#0]
0000d8  211e              MOVS     r1,#0x1e
0000da  f7fffffe          BL       GUI_DrawFont16
;;;226    	GUI_DrawFont16(16, 30, BLUE, WHITE, "据",0);
0000de  2000              MOVS     r0,#0
0000e0  a1b1              ADR      r1,|L7.936|
0000e2  f64f73ff          MOV      r3,#0xffff
0000e6  221f              MOVS     r2,#0x1f
0000e8  e9cd1000          STRD     r1,r0,[sp,#0]
0000ec  211e              MOVS     r1,#0x1e
0000ee  2010              MOVS     r0,#0x10
0000f0  f7fffffe          BL       GUI_DrawFont16
;;;227    	GUI_DrawFont16(32, 30, BLUE, WHITE, "显",0);
0000f4  2000              MOVS     r0,#0
0000f6  a1ad              ADR      r1,|L7.940|
0000f8  f64f73ff          MOV      r3,#0xffff
0000fc  221f              MOVS     r2,#0x1f
0000fe  e9cd1000          STRD     r1,r0,[sp,#0]
000102  211e              MOVS     r1,#0x1e
000104  2020              MOVS     r0,#0x20
000106  f7fffffe          BL       GUI_DrawFont16
;;;228    	GUI_DrawFont16(48, 30, BLUE, WHITE, "示",0);
00010a  2000              MOVS     r0,#0
00010c  a1a8              ADR      r1,|L7.944|
00010e  f64f73ff          MOV      r3,#0xffff
000112  221f              MOVS     r2,#0x1f
000114  e9cd1000          STRD     r1,r0,[sp,#0]
000118  211e              MOVS     r1,#0x1e
00011a  2030              MOVS     r0,#0x30
00011c  f7fffffe          BL       GUI_DrawFont16
;;;229    	GUI_DrawFont16(64, 30, BLUE, WHITE, "区",0);
000120  2000              MOVS     r0,#0
000122  a1a4              ADR      r1,|L7.948|
000124  f64f73ff          MOV      r3,#0xffff
000128  221f              MOVS     r2,#0x1f
00012a  e9cd1000          STRD     r1,r0,[sp,#0]
00012e  211e              MOVS     r1,#0x1e
000130  2040              MOVS     r0,#0x40
000132  f7fffffe          BL       GUI_DrawFont16
;;;230    	GUI_DrawFont16(80, 30, BLUE, WHITE, "域",0);
000136  2000              MOVS     r0,#0
000138  a19f              ADR      r1,|L7.952|
00013a  f64f73ff          MOV      r3,#0xffff
00013e  221f              MOVS     r2,#0x1f
000140  e9cd1000          STRD     r1,r0,[sp,#0]
000144  211e              MOVS     r1,#0x1e
000146  2050              MOVS     r0,#0x50
000148  f7fffffe          BL       GUI_DrawFont16
;;;231    	//数据显示
;;;232    	GUI_DrawFont16(0, 50, BRRED, WHITE, "温",0);
00014c  2000              MOVS     r0,#0
00014e  a19b              ADR      r1,|L7.956|
000150  f64f73ff          MOV      r3,#0xffff
000154  f64f4207          MOV      r2,#0xfc07
000158  e9cd1000          STRD     r1,r0,[sp,#0]
00015c  2132              MOVS     r1,#0x32
00015e  f7fffffe          BL       GUI_DrawFont16
;;;233    	GUI_DrawFont16(16, 50, BRRED, WHITE, "度",0);
000162  2000              MOVS     r0,#0
000164  a196              ADR      r1,|L7.960|
000166  f64f73ff          MOV      r3,#0xffff
00016a  f64f4207          MOV      r2,#0xfc07
00016e  e9cd1000          STRD     r1,r0,[sp,#0]
000172  2132              MOVS     r1,#0x32
000174  2010              MOVS     r0,#0x10
000176  f7fffffe          BL       GUI_DrawFont16
;;;234    	LCD_ShowString(32, 50, 12, ":", 0);
00017a  2000              MOVS     r0,#0
00017c  a391              ADR      r3,|L7.964|
00017e  220c              MOVS     r2,#0xc
000180  2132              MOVS     r1,#0x32
000182  9000              STR      r0,[sp,#0]
000184  2020              MOVS     r0,#0x20
000186  f7fffffe          BL       LCD_ShowString
;;;235    	GUI_DrawFont16(80, 50, BRRED, WHITE, "℃",0);
00018a  2000              MOVS     r0,#0
00018c  a18e              ADR      r1,|L7.968|
00018e  f64f73ff          MOV      r3,#0xffff
000192  f64f4207          MOV      r2,#0xfc07
000196  e9cd1000          STRD     r1,r0,[sp,#0]
00019a  2132              MOVS     r1,#0x32
00019c  2050              MOVS     r0,#0x50
00019e  f7fffffe          BL       GUI_DrawFont16
;;;236    	
;;;237    	GUI_DrawFont16(0, 70, BRRED, WHITE, "湿",0);
0001a2  2000              MOVS     r0,#0
0001a4  a189              ADR      r1,|L7.972|
0001a6  f64f73ff          MOV      r3,#0xffff
0001aa  f64f4207          MOV      r2,#0xfc07
0001ae  e9cd1000          STRD     r1,r0,[sp,#0]
0001b2  2146              MOVS     r1,#0x46
0001b4  f7fffffe          BL       GUI_DrawFont16
;;;238    	GUI_DrawFont16(16, 70, BRRED, WHITE, "度",0);
0001b8  2000              MOVS     r0,#0
0001ba  a181              ADR      r1,|L7.960|
0001bc  f64f73ff          MOV      r3,#0xffff
0001c0  f64f4207          MOV      r2,#0xfc07
0001c4  e9cd1000          STRD     r1,r0,[sp,#0]
0001c8  2146              MOVS     r1,#0x46
0001ca  2010              MOVS     r0,#0x10
0001cc  f7fffffe          BL       GUI_DrawFont16
;;;239    	LCD_ShowString(32, 70, 12, ":", 0);
0001d0  2000              MOVS     r0,#0
0001d2  a37c              ADR      r3,|L7.964|
0001d4  220c              MOVS     r2,#0xc
0001d6  2146              MOVS     r1,#0x46
0001d8  9000              STR      r0,[sp,#0]
0001da  2020              MOVS     r0,#0x20
0001dc  f7fffffe          BL       LCD_ShowString
;;;240    	LCD_ShowChar(80,70,POINT_COLOR,WHITE,'%',16,0);
0001e0  2000              MOVS     r0,#0
0001e2  2110              MOVS     r1,#0x10
0001e4  2225              MOVS     r2,#0x25
0001e6  f64f73ff          MOV      r3,#0xffff
0001ea  e9cd2100          STRD     r2,r1,[sp,#0]
0001ee  9002              STR      r0,[sp,#8]
0001f0  4877              LDR      r0,|L7.976|
0001f2  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0001f4  2146              MOVS     r1,#0x46
0001f6  2050              MOVS     r0,#0x50
0001f8  f7fffffe          BL       LCD_ShowChar
;;;241    	
;;;242    	GUI_DrawFont16(0, 90, BRRED, WHITE, "人",0);
0001fc  2000              MOVS     r0,#0
0001fe  a175              ADR      r1,|L7.980|
000200  f64f73ff          MOV      r3,#0xffff
000204  f64f4207          MOV      r2,#0xfc07
000208  e9cd1000          STRD     r1,r0,[sp,#0]
00020c  215a              MOVS     r1,#0x5a
00020e  f7fffffe          BL       GUI_DrawFont16
;;;243    	GUI_DrawFont16(16, 90, BRRED, WHITE, "体",0);
000212  2000              MOVS     r0,#0
000214  a170              ADR      r1,|L7.984|
000216  f64f73ff          MOV      r3,#0xffff
00021a  f64f4207          MOV      r2,#0xfc07
00021e  e9cd1000          STRD     r1,r0,[sp,#0]
000222  215a              MOVS     r1,#0x5a
000224  2010              MOVS     r0,#0x10
000226  f7fffffe          BL       GUI_DrawFont16
;;;244    	GUI_DrawFont16(32, 90, BRRED, WHITE, "值",0);
00022a  2000              MOVS     r0,#0
00022c  a16b              ADR      r1,|L7.988|
00022e  f64f73ff          MOV      r3,#0xffff
000232  f64f4207          MOV      r2,#0xfc07
000236  e9cd1000          STRD     r1,r0,[sp,#0]
00023a  215a              MOVS     r1,#0x5a
00023c  2020              MOVS     r0,#0x20
00023e  f7fffffe          BL       GUI_DrawFont16
;;;245    	LCD_ShowString(48, 90, 12, ":", 0);
000242  2000              MOVS     r0,#0
000244  a35f              ADR      r3,|L7.964|
000246  220c              MOVS     r2,#0xc
000248  215a              MOVS     r1,#0x5a
00024a  9000              STR      r0,[sp,#0]
00024c  2030              MOVS     r0,#0x30
00024e  f7fffffe          BL       LCD_ShowString
;;;246    	
;;;247    	GUI_DrawFont16(0, 110, BRRED, WHITE, "光",0);
000252  2000              MOVS     r0,#0
000254  a162              ADR      r1,|L7.992|
000256  f64f73ff          MOV      r3,#0xffff
00025a  f64f4207          MOV      r2,#0xfc07
00025e  e9cd1000          STRD     r1,r0,[sp,#0]
000262  216e              MOVS     r1,#0x6e
000264  f7fffffe          BL       GUI_DrawFont16
;;;248    	GUI_DrawFont16(16, 110, BRRED, WHITE, "敏",0);
000268  2000              MOVS     r0,#0
00026a  a15e              ADR      r1,|L7.996|
00026c  f64f73ff          MOV      r3,#0xffff
000270  f64f4207          MOV      r2,#0xfc07
000274  e9cd1000          STRD     r1,r0,[sp,#0]
000278  216e              MOVS     r1,#0x6e
00027a  2010              MOVS     r0,#0x10
00027c  f7fffffe          BL       GUI_DrawFont16
;;;249    	GUI_DrawFont16(32, 110, BRRED, WHITE, "值",0);
000280  2000              MOVS     r0,#0
000282  a156              ADR      r1,|L7.988|
000284  f64f73ff          MOV      r3,#0xffff
000288  f64f4207          MOV      r2,#0xfc07
00028c  e9cd1000          STRD     r1,r0,[sp,#0]
000290  216e              MOVS     r1,#0x6e
000292  2020              MOVS     r0,#0x20
000294  f7fffffe          BL       GUI_DrawFont16
;;;250    	LCD_ShowString(48, 110, 12, ":", 0);
000298  2000              MOVS     r0,#0
00029a  a34a              ADR      r3,|L7.964|
00029c  220c              MOVS     r2,#0xc
00029e  216e              MOVS     r1,#0x6e
0002a0  9000              STR      r0,[sp,#0]
0002a2  2030              MOVS     r0,#0x30
0002a4  f7fffffe          BL       LCD_ShowString
;;;251    	
;;;252    	GUI_DrawFont16(0, 130, BRRED, WHITE, "雨",0);
0002a8  2000              MOVS     r0,#0
0002aa  a14f              ADR      r1,|L7.1000|
0002ac  f64f73ff          MOV      r3,#0xffff
0002b0  f64f4207          MOV      r2,#0xfc07
0002b4  e9cd1000          STRD     r1,r0,[sp,#0]
0002b8  2182              MOVS     r1,#0x82
0002ba  f7fffffe          BL       GUI_DrawFont16
;;;253    	GUI_DrawFont16(16, 130, BRRED, WHITE, "滴",0);
0002be  2000              MOVS     r0,#0
0002c0  a14a              ADR      r1,|L7.1004|
0002c2  f64f73ff          MOV      r3,#0xffff
0002c6  f64f4207          MOV      r2,#0xfc07
0002ca  e9cd1000          STRD     r1,r0,[sp,#0]
0002ce  2182              MOVS     r1,#0x82
0002d0  2010              MOVS     r0,#0x10
0002d2  f7fffffe          BL       GUI_DrawFont16
;;;254    	GUI_DrawFont16(32, 130, BRRED, WHITE, "值",0);
0002d6  2000              MOVS     r0,#0
0002d8  a140              ADR      r1,|L7.988|
0002da  f64f73ff          MOV      r3,#0xffff
0002de  f64f4207          MOV      r2,#0xfc07
0002e2  e9cd1000          STRD     r1,r0,[sp,#0]
0002e6  2182              MOVS     r1,#0x82
0002e8  2020              MOVS     r0,#0x20
0002ea  f7fffffe          BL       GUI_DrawFont16
;;;255    	LCD_ShowString(48, 130, 12, ":", 0);
0002ee  2000              MOVS     r0,#0
0002f0  a334              ADR      r3,|L7.964|
0002f2  220c              MOVS     r2,#0xc
0002f4  2182              MOVS     r1,#0x82
0002f6  9000              STR      r0,[sp,#0]
0002f8  2030              MOVS     r0,#0x30
0002fa  f7fffffe          BL       LCD_ShowString
;;;256    	//控制命令显示
;;;257    	//LCD_ShowString(54, 160, 12, "控制命令区域", 0);
;;;258    	GUI_DrawFont16(0, 160, BLUE, WHITE, "控",0);
0002fe  2000              MOVS     r0,#0
000300  a13b              ADR      r1,|L7.1008|
000302  f64f73ff          MOV      r3,#0xffff
000306  221f              MOVS     r2,#0x1f
000308  e9cd1000          STRD     r1,r0,[sp,#0]
00030c  21a0              MOVS     r1,#0xa0
00030e  f7fffffe          BL       GUI_DrawFont16
;;;259    	GUI_DrawFont16(16, 160, BLUE, WHITE, "制",0);
000312  2000              MOVS     r0,#0
000314  a137              ADR      r1,|L7.1012|
000316  f64f73ff          MOV      r3,#0xffff
00031a  221f              MOVS     r2,#0x1f
00031c  e9cd1000          STRD     r1,r0,[sp,#0]
000320  21a0              MOVS     r1,#0xa0
000322  2010              MOVS     r0,#0x10
000324  f7fffffe          BL       GUI_DrawFont16
;;;260    	GUI_DrawFont16(32, 160, BLUE, WHITE, "命",0);
000328  2000              MOVS     r0,#0
00032a  a133              ADR      r1,|L7.1016|
00032c  f64f73ff          MOV      r3,#0xffff
000330  221f              MOVS     r2,#0x1f
000332  e9cd1000          STRD     r1,r0,[sp,#0]
000336  21a0              MOVS     r1,#0xa0
000338  2020              MOVS     r0,#0x20
00033a  f7fffffe          BL       GUI_DrawFont16
;;;261    	GUI_DrawFont16(48, 160, BLUE, WHITE, "令",0);
00033e  2000              MOVS     r0,#0
000340  a12e              ADR      r1,|L7.1020|
000342  f64f73ff          MOV      r3,#0xffff
000346  221f              MOVS     r2,#0x1f
000348  e9cd1000          STRD     r1,r0,[sp,#0]
00034c  21a0              MOVS     r1,#0xa0
00034e  2030              MOVS     r0,#0x30
000350  f7fffffe          BL       GUI_DrawFont16
;;;262    	GUI_DrawFont16(64, 160, BLUE, WHITE, "区",0);
000354  2000              MOVS     r0,#0
000356  a117              ADR      r1,|L7.948|
000358  f64f73ff          MOV      r3,#0xffff
00035c  221f              MOVS     r2,#0x1f
00035e  e9cd1000          STRD     r1,r0,[sp,#0]
000362  21a0              MOVS     r1,#0xa0
000364  2040              MOVS     r0,#0x40
000366  f7fffffe          BL       GUI_DrawFont16
;;;263    	GUI_DrawFont16(80, 160, BLUE, WHITE, "域",0);
00036a  2000              MOVS     r0,#0
00036c  a112              ADR      r1,|L7.952|
00036e  f64f73ff          MOV      r3,#0xffff
000372  221f              MOVS     r2,#0x1f
000374  e9cd1000          STRD     r1,r0,[sp,#0]
000378  21a0              MOVS     r1,#0xa0
00037a  2050              MOVS     r0,#0x50
00037c  f7fffffe          BL       GUI_DrawFont16
;;;264    }
000380  bd0e              POP      {r1-r3,pc}
;;;265    
                          ENDP

000382  0000              DCW      0x0000
                  |L7.900|
000384  d4c600            DCB      212,198,0
000387  00                DCB      0
                  |L7.904|
000388  c9cf00            DCB      201,207,0
00038b  00                DCB      0
                  |L7.908|
00038c  bcd200            DCB      188,210,0
00038f  00                DCB      0
                  |L7.912|
000390  bed300            DCB      190,211,0
000393  00                DCB      0
                  |L7.916|
000394  bdf000            DCB      189,240,0
000397  00                DCB      0
                  |L7.920|
000398  c5f400            DCB      197,244,0
00039b  00                DCB      0
                  |L7.924|
00039c  b9ab00            DCB      185,171,0
00039f  00                DCB      0
                  |L7.928|
0003a0  cbbe00            DCB      203,190,0
0003a3  00                DCB      0
                  |L7.932|
0003a4  cafd00            DCB      202,253,0
0003a7  00                DCB      0
                  |L7.936|
0003a8  bedd00            DCB      190,221,0
0003ab  00                DCB      0
                  |L7.940|
0003ac  cfd400            DCB      207,212,0
0003af  00                DCB      0
                  |L7.944|
0003b0  cabe00            DCB      202,190,0
0003b3  00                DCB      0
                  |L7.948|
0003b4  c7f800            DCB      199,248,0
0003b7  00                DCB      0
                  |L7.952|
0003b8  d3f200            DCB      211,242,0
0003bb  00                DCB      0
                  |L7.956|
0003bc  cec200            DCB      206,194,0
0003bf  00                DCB      0
                  |L7.960|
0003c0  b6c800            DCB      182,200,0
0003c3  00                DCB      0
                  |L7.964|
0003c4  3a00              DCB      ":",0
0003c6  00                DCB      0
0003c7  00                DCB      0
                  |L7.968|
0003c8  a1e600            DCB      161,230,0
0003cb  00                DCB      0
                  |L7.972|
0003cc  caaa00            DCB      202,170,0
0003cf  00                DCB      0
                  |L7.976|
                          DCD      POINT_COLOR
                  |L7.980|
0003d4  c8cb00            DCB      200,203,0
0003d7  00                DCB      0
                  |L7.984|
0003d8  cce500            DCB      204,229,0
0003db  00                DCB      0
                  |L7.988|
0003dc  d6b500            DCB      214,181,0
0003df  00                DCB      0
                  |L7.992|
0003e0  b9e200            DCB      185,226,0
0003e3  00                DCB      0
                  |L7.996|
0003e4  c3f400            DCB      195,244,0
0003e7  00                DCB      0
                  |L7.1000|
0003e8  d3ea00            DCB      211,234,0
0003eb  00                DCB      0
                  |L7.1004|
0003ec  b5ce00            DCB      181,206,0
0003ef  00                DCB      0
                  |L7.1008|
0003f0  bfd800            DCB      191,216,0
0003f3  00                DCB      0
                  |L7.1012|
0003f4  d6c600            DCB      214,198,0
0003f7  00                DCB      0
                  |L7.1016|
0003f8  c3fc00            DCB      195,252,0
0003fb  00                DCB      0
                  |L7.1020|
0003fc  c1ee00            DCB      193,238,0
0003ff  00                DCB      0

                          AREA ||i.led22||, CODE, READONLY, ALIGN=2

                  led22 PROC
;;;456    //led控制
;;;457    void led22(void)
000000  b510              PUSH     {r4,lr}
;;;458    {		
;;;459    		ll_gpio_bit_reset(GPIOD, BIT(5));  
000002  2120              MOVS     r1,#0x20
000004  482d              LDR      r0,|L8.188|
000006  f7fffffe          BL       ll_gpio_bit_reset
;;;460    		ll_gpio_bit_reset(GPIOD, BIT(10));
00000a  f44f6180          MOV      r1,#0x400
00000e  482b              LDR      r0,|L8.188|
000010  f7fffffe          BL       ll_gpio_bit_reset
;;;461    		ll_gpio_bit_set(GPIOD, BIT(9));
000014  f44f7100          MOV      r1,#0x200
000018  4828              LDR      r0,|L8.188|
00001a  f7fffffe          BL       ll_gpio_bit_set
;;;462    		ll_gpio_bit_set(GPIOB, BIT(12));
00001e  f44f5180          MOV      r1,#0x1000
000022  4827              LDR      r0,|L8.192|
000024  f7fffffe          BL       ll_gpio_bit_set
;;;463    		ll_gpio_bit_set(GPIOB, BIT(13));
000028  f44f5100          MOV      r1,#0x2000
00002c  4824              LDR      r0,|L8.192|
00002e  f7fffffe          BL       ll_gpio_bit_set
;;;464    		
;;;465    		ll_gpio_bit_reset(GPIOB, BIT(13));  //LED6
000032  f44f5100          MOV      r1,#0x2000
000036  4822              LDR      r0,|L8.192|
000038  f7fffffe          BL       ll_gpio_bit_reset
;;;466    		delay_ms(500);
00003c  f44f70fa          MOV      r0,#0x1f4
000040  f7fffffe          BL       delay_ms
;;;467    		ll_gpio_bit_set(GPIOB, BIT(13));
000044  f44f5100          MOV      r1,#0x2000
000048  481d              LDR      r0,|L8.192|
00004a  f7fffffe          BL       ll_gpio_bit_set
;;;468    		ll_gpio_bit_reset(GPIOB, BIT(12));   //LED5
00004e  f44f5180          MOV      r1,#0x1000
000052  481b              LDR      r0,|L8.192|
000054  f7fffffe          BL       ll_gpio_bit_reset
;;;469    		delay_ms(500);
000058  f44f70fa          MOV      r0,#0x1f4
00005c  f7fffffe          BL       delay_ms
;;;470    		ll_gpio_bit_set(GPIOB, BIT(12));
000060  f44f5180          MOV      r1,#0x1000
000064  4816              LDR      r0,|L8.192|
000066  f7fffffe          BL       ll_gpio_bit_set
;;;471    		ll_gpio_bit_reset(GPIOD, BIT(9));  //LED4
00006a  f44f7100          MOV      r1,#0x200
00006e  4813              LDR      r0,|L8.188|
000070  f7fffffe          BL       ll_gpio_bit_reset
;;;472    		delay_ms(500);
000074  f44f70fa          MOV      r0,#0x1f4
000078  f7fffffe          BL       delay_ms
;;;473    		ll_gpio_bit_set(GPIOD, BIT(9));
00007c  f44f7100          MOV      r1,#0x200
000080  480e              LDR      r0,|L8.188|
000082  f7fffffe          BL       ll_gpio_bit_set
;;;474    		ll_gpio_bit_set(GPIOD, BIT(10));  //LED3
000086  f44f6180          MOV      r1,#0x400
00008a  480c              LDR      r0,|L8.188|
00008c  f7fffffe          BL       ll_gpio_bit_set
;;;475    		delay_ms(500);
000090  f44f70fa          MOV      r0,#0x1f4
000094  f7fffffe          BL       delay_ms
;;;476    		ll_gpio_bit_reset(GPIOD, BIT(10));
000098  f44f6180          MOV      r1,#0x400
00009c  4807              LDR      r0,|L8.188|
00009e  f7fffffe          BL       ll_gpio_bit_reset
;;;477    		ll_gpio_bit_set(GPIOD, BIT(5));  //LED2
0000a2  2120              MOVS     r1,#0x20
0000a4  4805              LDR      r0,|L8.188|
0000a6  f7fffffe          BL       ll_gpio_bit_set
;;;478    		delay_ms(500);
0000aa  f44f70fa          MOV      r0,#0x1f4
0000ae  f7fffffe          BL       delay_ms
;;;479    		ll_gpio_bit_reset(GPIOD, BIT(5));
0000b2  2120              MOVS     r1,#0x20
0000b4  4801              LDR      r0,|L8.188|
0000b6  f7fffffe          BL       ll_gpio_bit_reset
;;;480    }
0000ba  bd10              POP      {r4,pc}
;;;481    
                          ENDP

                  |L8.188|
                          DCD      0x40027000
                  |L8.192|
                          DCD      0x40024000

                          AREA ||i.ledkeyinit||, CODE, READONLY, ALIGN=2

                  ledkeyinit PROC
;;;482    //LED初始化
;;;483    void ledkeyinit(void)
000000  b510              PUSH     {r4,lr}
;;;484    {
;;;485    		ll_gpio_dir(GPIOD,BIT(5),LL_GPIO_PIN_OUTPUT);  //LED2
000002  2201              MOVS     r2,#1
000004  2120              MOVS     r1,#0x20
000006  4834              LDR      r0,|L9.216|
000008  f7fffffe          BL       ll_gpio_dir
;;;486        ll_gpio_pull(GPIOD, BIT(5), LL_GPIO_PULL_UP);
00000c  2202              MOVS     r2,#2
00000e  2120              MOVS     r1,#0x20
000010  4831              LDR      r0,|L9.216|
000012  f7fffffe          BL       ll_gpio_pull
;;;487    		ll_gpio_dir(GPIOD,BIT(10),LL_GPIO_PIN_OUTPUT);  //LED3
000016  2201              MOVS     r2,#1
000018  0291              LSLS     r1,r2,#10
00001a  482f              LDR      r0,|L9.216|
00001c  f7fffffe          BL       ll_gpio_dir
;;;488        ll_gpio_pull(GPIOD, BIT(10), LL_GPIO_PULL_UP);
000020  2202              MOVS     r2,#2
000022  0251              LSLS     r1,r2,#9
000024  482c              LDR      r0,|L9.216|
000026  f7fffffe          BL       ll_gpio_pull
;;;489    		ll_gpio_dir(GPIOD,BIT(9),LL_GPIO_PIN_OUTPUT);  //LED4
00002a  2201              MOVS     r2,#1
00002c  0251              LSLS     r1,r2,#9
00002e  482a              LDR      r0,|L9.216|
000030  f7fffffe          BL       ll_gpio_dir
;;;490        ll_gpio_pull(GPIOD, BIT(9), LL_GPIO_PULL_UP);
000034  2202              MOVS     r2,#2
000036  0211              LSLS     r1,r2,#8
000038  4827              LDR      r0,|L9.216|
00003a  f7fffffe          BL       ll_gpio_pull
;;;491    		ll_gpio_dir(GPIOB,BIT(12),LL_GPIO_PIN_OUTPUT);  //LED5
00003e  2201              MOVS     r2,#1
000040  0311              LSLS     r1,r2,#12
000042  4826              LDR      r0,|L9.220|
000044  f7fffffe          BL       ll_gpio_dir
;;;492        ll_gpio_pull(GPIOB, BIT(12), LL_GPIO_PULL_UP);
000048  2202              MOVS     r2,#2
00004a  02d1              LSLS     r1,r2,#11
00004c  4823              LDR      r0,|L9.220|
00004e  f7fffffe          BL       ll_gpio_pull
;;;493        ll_gpio_dir(GPIOB,BIT(13),LL_GPIO_PIN_OUTPUT);  //LED6
000052  2201              MOVS     r2,#1
000054  0351              LSLS     r1,r2,#13
000056  4821              LDR      r0,|L9.220|
000058  f7fffffe          BL       ll_gpio_dir
;;;494        ll_gpio_pull(GPIOB, BIT(13), LL_GPIO_PULL_UP);
00005c  2202              MOVS     r2,#2
00005e  0311              LSLS     r1,r2,#12
000060  481e              LDR      r0,|L9.220|
000062  f7fffffe          BL       ll_gpio_pull
;;;495        ll_gpio_dir(GPIOC,BIT(15),LL_GPIO_PIN_INPUT);   //KEY1
000066  2200              MOVS     r2,#0
000068  f44f4100          MOV      r1,#0x8000
00006c  481c              LDR      r0,|L9.224|
00006e  f7fffffe          BL       ll_gpio_dir
;;;496        ll_gpio_pull(GPIOC, BIT(15), LL_GPIO_PULL_DOWN);
000072  2204              MOVS     r2,#4
000074  0351              LSLS     r1,r2,#13
000076  481a              LDR      r0,|L9.224|
000078  f7fffffe          BL       ll_gpio_pull
;;;497        ll_gpio_interrupt_enable(GPIOC, BIT(15));
00007c  f44f4100          MOV      r1,#0x8000
000080  4817              LDR      r0,|L9.224|
000082  f7fffffe          BL       ll_gpio_interrupt_enable
;;;498        ll_gpio_dir(GPIOB,BIT(15),LL_GPIO_PIN_INPUT);   //KEY2
000086  2200              MOVS     r2,#0
000088  f44f4100          MOV      r1,#0x8000
00008c  4813              LDR      r0,|L9.220|
00008e  f7fffffe          BL       ll_gpio_dir
;;;499        ll_gpio_pull(GPIOB, BIT(15), LL_GPIO_PULL_UP);
000092  2202              MOVS     r2,#2
000094  0391              LSLS     r1,r2,#14
000096  4811              LDR      r0,|L9.220|
000098  f7fffffe          BL       ll_gpio_pull
;;;500    		ll_gpio_interrupt_enable(GPIOB, BIT(15));
00009c  f44f4100          MOV      r1,#0x8000
0000a0  480e              LDR      r0,|L9.220|
0000a2  f7fffffe          BL       ll_gpio_interrupt_enable
;;;501    
;;;502    		ll_gpio_bit_reset(GPIOD, BIT(5)); 
0000a6  2120              MOVS     r1,#0x20
0000a8  480b              LDR      r0,|L9.216|
0000aa  f7fffffe          BL       ll_gpio_bit_reset
;;;503    		ll_gpio_bit_reset(GPIOD, BIT(10));
0000ae  f44f6180          MOV      r1,#0x400
0000b2  4809              LDR      r0,|L9.216|
0000b4  f7fffffe          BL       ll_gpio_bit_reset
;;;504    		ll_gpio_bit_set(GPIOD, BIT(9));
0000b8  f44f7100          MOV      r1,#0x200
0000bc  4806              LDR      r0,|L9.216|
0000be  f7fffffe          BL       ll_gpio_bit_set
;;;505    		ll_gpio_bit_set(GPIOB, BIT(12));
0000c2  f44f5180          MOV      r1,#0x1000
0000c6  4805              LDR      r0,|L9.220|
0000c8  f7fffffe          BL       ll_gpio_bit_set
;;;506    		ll_gpio_bit_set(GPIOB, BIT(13));
0000cc  f44f5100          MOV      r1,#0x2000
0000d0  4802              LDR      r0,|L9.220|
0000d2  f7fffffe          BL       ll_gpio_bit_set
;;;507    }
0000d6  bd10              POP      {r4,pc}
                          ENDP

                  |L9.216|
                          DCD      0x40027000
                  |L9.220|
                          DCD      0x40024000
                  |L9.224|
                          DCD      0x40025000

                          AREA ||i.ll_gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_reset PROC
;;;311      */
;;;312    __STATIC_INLINE void ll_gpio_bit_reset(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  b28a              UXTH     r2,r1
;;;313        p_gpio->BSRS = ((u32)pin_bits) & 0xFFFF;
000002  6382              STR      r2,[r0,#0x38]
;;;314    }
000004  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.ll_gpio_bit_set||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_set PROC
;;;300      */
;;;301    __STATIC_INLINE void ll_gpio_bit_set(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  040a              LSLS     r2,r1,#16
;;;302        p_gpio->BSRS = ((u32)pin_bits) << 16;
000002  6382              STR      r2,[r0,#0x38]
;;;303    }
000004  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i.ll_gpio_interrupt_enable||, CODE, READONLY, ALIGN=1

                  ll_gpio_interrupt_enable PROC
;;;390      */
;;;391    __STATIC_INLINE void ll_gpio_interrupt_enable(GPIO_TypeDef* p_gpio, u32 pin_bits) {
000000  6882              LDR      r2,[r0,#8]
;;;392        p_gpio->INTMASK |= pin_bits;
000002  430a              ORRS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;393    }
000006  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.ll_gpio_read_data_bit||, CODE, READONLY, ALIGN=1

                  ll_gpio_read_data_bit PROC
;;;322      */
;;;323    __STATIC_INLINE TYPE_ENUM_LL_GPIO_BIT_ACTION ll_gpio_read_data_bit(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  4602              MOV      r2,r0
;;;324        TYPE_ENUM_LL_GPIO_BIT_ACTION bit_status = LL_GPIO_RESET;
000002  2000              MOVS     r0,#0
;;;325        
;;;326        if ((p_gpio->DR & pin_bits) != (u32)LL_GPIO_RESET) {
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L13.14|
;;;327            bit_status = LL_GPIO_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L13.16|
                  |L13.14|
;;;328        } else {
;;;329            bit_status = LL_GPIO_RESET;
00000e  2000              MOVS     r0,#0
                  |L13.16|
;;;330        }
;;;331        
;;;332        return bit_status;
;;;333    }
000010  4770              BX       lr
;;;334    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;353    }
;;;354    int main(void) {
000000  b51c              PUSH     {r2-r4,lr}
;;;355        system_stare_init();    //初始化函数
000002  f7fffffe          BL       system_stare_init
;;;356    		ledkeyinit();
000006  f7fffffe          BL       ledkeyinit
;;;357    	  LCD_Clear(WHITE);       //清屏
00000a  f64f70ff          MOV      r0,#0xffff
00000e  f7fffffe          BL       LCD_Clear
;;;358    		lcd_show_shuju();       //显示数据
000012  f7fffffe          BL       lcd_show_shuju
;;;359        while (1) {
000016  e22a              B        |L14.1134|
                  |L14.24|
;;;360    			caijishuju();
000018  f7fffffe          BL       caijishuju
;;;361    			if(Switch2[0]=='1')  //电机正
00001c  48fd              LDR      r0,|L14.1044|
00001e  7800              LDRB     r0,[r0,#0]  ; Switch2
000020  2831              CMP      r0,#0x31
000022  d136              BNE      |L14.146|
;;;362    			{
;;;363    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "电",0);    //0的意思是可以覆盖
000024  2000              MOVS     r0,#0
000026  a1fc              ADR      r1,|L14.1048|
000028  f64f73ff          MOV      r3,#0xffff
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  48fa              LDR      r0,|L14.1052|
000032  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000034  21b0              MOVS     r1,#0xb0
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       GUI_DrawFont16
;;;364    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "机",0);    //0的意思是可以覆盖
00003c  2000              MOVS     r0,#0
00003e  a1f8              ADR      r1,|L14.1056|
000040  f64f73ff          MOV      r3,#0xffff
000044  e9cd1000          STRD     r1,r0,[sp,#0]
000048  48f4              LDR      r0,|L14.1052|
00004a  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
00004c  21b0              MOVS     r1,#0xb0
00004e  2010              MOVS     r0,#0x10
000050  f7fffffe          BL       GUI_DrawFont16
;;;365    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "正",0);    //0的意思是可以覆盖
000054  2000              MOVS     r0,#0
000056  a1f3              ADR      r1,|L14.1060|
000058  f64f73ff          MOV      r3,#0xffff
00005c  e9cd1000          STRD     r1,r0,[sp,#0]
000060  48ee              LDR      r0,|L14.1052|
000062  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000064  21b0              MOVS     r1,#0xb0
000066  2020              MOVS     r0,#0x20
000068  f7fffffe          BL       GUI_DrawFont16
;;;366    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "转",0);    //0的意思是可以覆盖
00006c  2000              MOVS     r0,#0
00006e  a1ee              ADR      r1,|L14.1064|
000070  f64f73ff          MOV      r3,#0xffff
000074  e9cd1000          STRD     r1,r0,[sp,#0]
000078  48e8              LDR      r0,|L14.1052|
00007a  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
00007c  21b0              MOVS     r1,#0xb0
00007e  2030              MOVS     r0,#0x30
000080  f7fffffe          BL       GUI_DrawFont16
;;;367    				dianjizheng(5);
000084  2005              MOVS     r0,#5
000086  f7fffffe          BL       dianjizheng
;;;368    				Switch2[0]=0;
00008a  2000              MOVS     r0,#0
00008c  49e1              LDR      r1,|L14.1044|
00008e  7008              STRB     r0,[r1,#0]
000090  e1a1              B        |L14.982|
                  |L14.146|
;;;369    			}else if(Switch2[0]=='2')   //电机反
000092  48e0              LDR      r0,|L14.1044|
000094  7800              LDRB     r0,[r0,#0]  ; Switch2
000096  2832              CMP      r0,#0x32
000098  d136              BNE      |L14.264|
;;;370    			{	
;;;371    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "电",0);    //0的意思是可以覆盖
00009a  2000              MOVS     r0,#0
00009c  a1de              ADR      r1,|L14.1048|
00009e  f64f73ff          MOV      r3,#0xffff
0000a2  e9cd1000          STRD     r1,r0,[sp,#0]
0000a6  48dd              LDR      r0,|L14.1052|
0000a8  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0000aa  21b0              MOVS     r1,#0xb0
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       GUI_DrawFont16
;;;372    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "机",0);    //0的意思是可以覆盖
0000b2  2000              MOVS     r0,#0
0000b4  a1da              ADR      r1,|L14.1056|
0000b6  f64f73ff          MOV      r3,#0xffff
0000ba  e9cd1000          STRD     r1,r0,[sp,#0]
0000be  48d7              LDR      r0,|L14.1052|
0000c0  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0000c2  21b0              MOVS     r1,#0xb0
0000c4  2010              MOVS     r0,#0x10
0000c6  f7fffffe          BL       GUI_DrawFont16
;;;373    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "反",0);    //0的意思是可以覆盖
0000ca  2000              MOVS     r0,#0
0000cc  a1d7              ADR      r1,|L14.1068|
0000ce  f64f73ff          MOV      r3,#0xffff
0000d2  e9cd1000          STRD     r1,r0,[sp,#0]
0000d6  48d1              LDR      r0,|L14.1052|
0000d8  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0000da  21b0              MOVS     r1,#0xb0
0000dc  2020              MOVS     r0,#0x20
0000de  f7fffffe          BL       GUI_DrawFont16
;;;374    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "转",0);    //0的意思是可以覆盖
0000e2  2000              MOVS     r0,#0
0000e4  a1d0              ADR      r1,|L14.1064|
0000e6  f64f73ff          MOV      r3,#0xffff
0000ea  e9cd1000          STRD     r1,r0,[sp,#0]
0000ee  48cb              LDR      r0,|L14.1052|
0000f0  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0000f2  21b0              MOVS     r1,#0xb0
0000f4  2030              MOVS     r0,#0x30
0000f6  f7fffffe          BL       GUI_DrawFont16
;;;375    				dianjifan(5);
0000fa  2005              MOVS     r0,#5
0000fc  f7fffffe          BL       dianjifan
;;;376    				Switch2[0]=0;
000100  2000              MOVS     r0,#0
000102  49c4              LDR      r1,|L14.1044|
000104  7008              STRB     r0,[r1,#0]
000106  e166              B        |L14.982|
                  |L14.264|
;;;377    			}else if(Switch2[0]=='3')    //舵机正
000108  48c2              LDR      r0,|L14.1044|
00010a  7800              LDRB     r0,[r0,#0]  ; Switch2
00010c  2833              CMP      r0,#0x33
00010e  d137              BNE      |L14.384|
;;;378    			{
;;;379    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "舵",0);    //0的意思是可以覆盖
000110  2000              MOVS     r0,#0
000112  a1c7              ADR      r1,|L14.1072|
000114  f64f73ff          MOV      r3,#0xffff
000118  e9cd1000          STRD     r1,r0,[sp,#0]
00011c  48bf              LDR      r0,|L14.1052|
00011e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000120  21b0              MOVS     r1,#0xb0
000122  2000              MOVS     r0,#0
000124  f7fffffe          BL       GUI_DrawFont16
;;;380    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "机",0);    //0的意思是可以覆盖
000128  2000              MOVS     r0,#0
00012a  a1bd              ADR      r1,|L14.1056|
00012c  f64f73ff          MOV      r3,#0xffff
000130  e9cd1000          STRD     r1,r0,[sp,#0]
000134  48b9              LDR      r0,|L14.1052|
000136  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000138  21b0              MOVS     r1,#0xb0
00013a  2010              MOVS     r0,#0x10
00013c  f7fffffe          BL       GUI_DrawFont16
;;;381    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "正",0);    //0的意思是可以覆盖
000140  2000              MOVS     r0,#0
000142  a1b8              ADR      r1,|L14.1060|
000144  f64f73ff          MOV      r3,#0xffff
000148  e9cd1000          STRD     r1,r0,[sp,#0]
00014c  48b3              LDR      r0,|L14.1052|
00014e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000150  21b0              MOVS     r1,#0xb0
000152  2020              MOVS     r0,#0x20
000154  f7fffffe          BL       GUI_DrawFont16
;;;382    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "转",0);    //0的意思是可以覆盖
000158  2000              MOVS     r0,#0
00015a  a1b3              ADR      r1,|L14.1064|
00015c  f64f73ff          MOV      r3,#0xffff
000160  e9cd1000          STRD     r1,r0,[sp,#0]
000164  48ad              LDR      r0,|L14.1052|
000166  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000168  21b0              MOVS     r1,#0xb0
00016a  2030              MOVS     r0,#0x30
00016c  f7fffffe          BL       GUI_DrawFont16
;;;383    				Control_SG90(1000);
000170  f44f707a          MOV      r0,#0x3e8
000174  f7fffffe          BL       Control_SG90
;;;384    				Switch2[0]=0;
000178  2000              MOVS     r0,#0
00017a  49a6              LDR      r1,|L14.1044|
00017c  7008              STRB     r0,[r1,#0]
00017e  e12a              B        |L14.982|
                  |L14.384|
;;;385    			}else if(Switch2[0]=='4')   //舵机反
000180  48a4              LDR      r0,|L14.1044|
000182  7800              LDRB     r0,[r0,#0]  ; Switch2
000184  2834              CMP      r0,#0x34
000186  d137              BNE      |L14.504|
;;;386    			{
;;;387    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "舵",0);    //0的意思是可以覆盖
000188  2000              MOVS     r0,#0
00018a  a1a9              ADR      r1,|L14.1072|
00018c  f64f73ff          MOV      r3,#0xffff
000190  e9cd1000          STRD     r1,r0,[sp,#0]
000194  48a1              LDR      r0,|L14.1052|
000196  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000198  21b0              MOVS     r1,#0xb0
00019a  2000              MOVS     r0,#0
00019c  f7fffffe          BL       GUI_DrawFont16
;;;388    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "机",0);    //0的意思是可以覆盖
0001a0  2000              MOVS     r0,#0
0001a2  a19f              ADR      r1,|L14.1056|
0001a4  f64f73ff          MOV      r3,#0xffff
0001a8  e9cd1000          STRD     r1,r0,[sp,#0]
0001ac  489b              LDR      r0,|L14.1052|
0001ae  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0001b0  21b0              MOVS     r1,#0xb0
0001b2  2010              MOVS     r0,#0x10
0001b4  f7fffffe          BL       GUI_DrawFont16
;;;389    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "反",0);    //0的意思是可以覆盖
0001b8  2000              MOVS     r0,#0
0001ba  a19c              ADR      r1,|L14.1068|
0001bc  f64f73ff          MOV      r3,#0xffff
0001c0  e9cd1000          STRD     r1,r0,[sp,#0]
0001c4  4895              LDR      r0,|L14.1052|
0001c6  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0001c8  21b0              MOVS     r1,#0xb0
0001ca  2020              MOVS     r0,#0x20
0001cc  f7fffffe          BL       GUI_DrawFont16
;;;390    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "转",0);    //0的意思是可以覆盖
0001d0  2000              MOVS     r0,#0
0001d2  a195              ADR      r1,|L14.1064|
0001d4  f64f73ff          MOV      r3,#0xffff
0001d8  e9cd1000          STRD     r1,r0,[sp,#0]
0001dc  488f              LDR      r0,|L14.1052|
0001de  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0001e0  21b0              MOVS     r1,#0xb0
0001e2  2030              MOVS     r0,#0x30
0001e4  f7fffffe          BL       GUI_DrawFont16
;;;391    				Control_SG90(2000);
0001e8  f44f60fa          MOV      r0,#0x7d0
0001ec  f7fffffe          BL       Control_SG90
;;;392    				Switch2[0]=0;
0001f0  2000              MOVS     r0,#0
0001f2  4988              LDR      r1,|L14.1044|
0001f4  7008              STRB     r0,[r1,#0]
0001f6  e0ee              B        |L14.982|
                  |L14.504|
;;;393    			}else if(Switch2[0]=='5')   //开电风扇
0001f8  4886              LDR      r0,|L14.1044|
0001fa  7800              LDRB     r0,[r0,#0]  ; Switch2
0001fc  2835              CMP      r0,#0x35
0001fe  d137              BNE      |L14.624|
;;;394    			{
;;;395    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "开",0);    //0的意思是可以覆盖
000200  2000              MOVS     r0,#0
000202  a18c              ADR      r1,|L14.1076|
000204  f64f73ff          MOV      r3,#0xffff
000208  e9cd1000          STRD     r1,r0,[sp,#0]
00020c  4883              LDR      r0,|L14.1052|
00020e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000210  21b0              MOVS     r1,#0xb0
000212  2000              MOVS     r0,#0
000214  f7fffffe          BL       GUI_DrawFont16
;;;396    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "电",0);    //0的意思是可以覆盖
000218  2000              MOVS     r0,#0
00021a  a17f              ADR      r1,|L14.1048|
00021c  f64f73ff          MOV      r3,#0xffff
000220  e9cd1000          STRD     r1,r0,[sp,#0]
000224  487d              LDR      r0,|L14.1052|
000226  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000228  21b0              MOVS     r1,#0xb0
00022a  2010              MOVS     r0,#0x10
00022c  f7fffffe          BL       GUI_DrawFont16
;;;397    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "风",0);    //0的意思是可以覆盖
000230  2000              MOVS     r0,#0
000232  a181              ADR      r1,|L14.1080|
000234  f64f73ff          MOV      r3,#0xffff
000238  e9cd1000          STRD     r1,r0,[sp,#0]
00023c  4877              LDR      r0,|L14.1052|
00023e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000240  21b0              MOVS     r1,#0xb0
000242  2020              MOVS     r0,#0x20
000244  f7fffffe          BL       GUI_DrawFont16
;;;398    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "扇",0);    //0的意思是可以覆盖
000248  2000              MOVS     r0,#0
00024a  a17c              ADR      r1,|L14.1084|
00024c  f64f73ff          MOV      r3,#0xffff
000250  e9cd1000          STRD     r1,r0,[sp,#0]
000254  4871              LDR      r0,|L14.1052|
000256  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000258  21b0              MOVS     r1,#0xb0
00025a  2030              MOVS     r0,#0x30
00025c  f7fffffe          BL       GUI_DrawFont16
;;;399    				ll_gpio_bit_set(GPIOC, BIT(4));
000260  2110              MOVS     r1,#0x10
000262  4877              LDR      r0,|L14.1088|
000264  f7fffffe          BL       ll_gpio_bit_set
;;;400    				Switch2[0]=0;
000268  2000              MOVS     r0,#0
00026a  496a              LDR      r1,|L14.1044|
00026c  7008              STRB     r0,[r1,#0]
00026e  e0b2              B        |L14.982|
                  |L14.624|
;;;401    			}else if(Switch2[0]=='6')   //关电风扇
000270  4868              LDR      r0,|L14.1044|
000272  7800              LDRB     r0,[r0,#0]  ; Switch2
000274  2836              CMP      r0,#0x36
000276  d137              BNE      |L14.744|
;;;402    			{
;;;403    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "关",0);    //0的意思是可以覆盖
000278  2000              MOVS     r0,#0
00027a  a172              ADR      r1,|L14.1092|
00027c  f64f73ff          MOV      r3,#0xffff
000280  e9cd1000          STRD     r1,r0,[sp,#0]
000284  4865              LDR      r0,|L14.1052|
000286  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000288  21b0              MOVS     r1,#0xb0
00028a  2000              MOVS     r0,#0
00028c  f7fffffe          BL       GUI_DrawFont16
;;;404    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "电",0);    //0的意思是可以覆盖
000290  2000              MOVS     r0,#0
000292  a161              ADR      r1,|L14.1048|
000294  f64f73ff          MOV      r3,#0xffff
000298  e9cd1000          STRD     r1,r0,[sp,#0]
00029c  485f              LDR      r0,|L14.1052|
00029e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0002a0  21b0              MOVS     r1,#0xb0
0002a2  2010              MOVS     r0,#0x10
0002a4  f7fffffe          BL       GUI_DrawFont16
;;;405    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "风",0);    //0的意思是可以覆盖
0002a8  2000              MOVS     r0,#0
0002aa  a163              ADR      r1,|L14.1080|
0002ac  f64f73ff          MOV      r3,#0xffff
0002b0  e9cd1000          STRD     r1,r0,[sp,#0]
0002b4  4859              LDR      r0,|L14.1052|
0002b6  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0002b8  21b0              MOVS     r1,#0xb0
0002ba  2020              MOVS     r0,#0x20
0002bc  f7fffffe          BL       GUI_DrawFont16
;;;406    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "扇",0);    //0的意思是可以覆盖
0002c0  2000              MOVS     r0,#0
0002c2  a15e              ADR      r1,|L14.1084|
0002c4  f64f73ff          MOV      r3,#0xffff
0002c8  e9cd1000          STRD     r1,r0,[sp,#0]
0002cc  4853              LDR      r0,|L14.1052|
0002ce  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0002d0  21b0              MOVS     r1,#0xb0
0002d2  2030              MOVS     r0,#0x30
0002d4  f7fffffe          BL       GUI_DrawFont16
;;;407    				ll_gpio_bit_reset(GPIOC, BIT(4));
0002d8  2110              MOVS     r1,#0x10
0002da  4859              LDR      r0,|L14.1088|
0002dc  f7fffffe          BL       ll_gpio_bit_reset
;;;408    				Switch2[0]=0;
0002e0  2000              MOVS     r0,#0
0002e2  494c              LDR      r1,|L14.1044|
0002e4  7008              STRB     r0,[r1,#0]
0002e6  e076              B        |L14.982|
                  |L14.744|
;;;409    			}else if(Switch2[0]=='7')   //开台灯
0002e8  484a              LDR      r0,|L14.1044|
0002ea  7800              LDRB     r0,[r0,#0]  ; Switch2
0002ec  2837              CMP      r0,#0x37
0002ee  d137              BNE      |L14.864|
;;;410    			{
;;;411    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "打",0);    //0的意思是可以覆盖
0002f0  2000              MOVS     r0,#0
0002f2  a155              ADR      r1,|L14.1096|
0002f4  f64f73ff          MOV      r3,#0xffff
0002f8  e9cd1000          STRD     r1,r0,[sp,#0]
0002fc  4847              LDR      r0,|L14.1052|
0002fe  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000300  21b0              MOVS     r1,#0xb0
000302  2000              MOVS     r0,#0
000304  f7fffffe          BL       GUI_DrawFont16
;;;412    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "开",0);    //0的意思是可以覆盖
000308  2000              MOVS     r0,#0
00030a  a14a              ADR      r1,|L14.1076|
00030c  f64f73ff          MOV      r3,#0xffff
000310  e9cd1000          STRD     r1,r0,[sp,#0]
000314  4841              LDR      r0,|L14.1052|
000316  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000318  21b0              MOVS     r1,#0xb0
00031a  2010              MOVS     r0,#0x10
00031c  f7fffffe          BL       GUI_DrawFont16
;;;413    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "台",0);    //0的意思是可以覆盖
000320  2000              MOVS     r0,#0
000322  a14a              ADR      r1,|L14.1100|
000324  f64f73ff          MOV      r3,#0xffff
000328  e9cd1000          STRD     r1,r0,[sp,#0]
00032c  483b              LDR      r0,|L14.1052|
00032e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000330  21b0              MOVS     r1,#0xb0
000332  2020              MOVS     r0,#0x20
000334  f7fffffe          BL       GUI_DrawFont16
;;;414    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "灯",0);    //0的意思是可以覆盖
000338  2000              MOVS     r0,#0
00033a  a145              ADR      r1,|L14.1104|
00033c  f64f73ff          MOV      r3,#0xffff
000340  e9cd1000          STRD     r1,r0,[sp,#0]
000344  4835              LDR      r0,|L14.1052|
000346  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000348  21b0              MOVS     r1,#0xb0
00034a  2030              MOVS     r0,#0x30
00034c  f7fffffe          BL       GUI_DrawFont16
;;;415    				ll_gpio_bit_set(GPIOC, BIT(6));
000350  2140              MOVS     r1,#0x40
000352  483b              LDR      r0,|L14.1088|
000354  f7fffffe          BL       ll_gpio_bit_set
;;;416    				Switch2[0]=0;
000358  2000              MOVS     r0,#0
00035a  492e              LDR      r1,|L14.1044|
00035c  7008              STRB     r0,[r1,#0]
00035e  e03a              B        |L14.982|
                  |L14.864|
;;;417    			}else if(Switch2[0]=='8')   //关台灯
000360  482c              LDR      r0,|L14.1044|
000362  7800              LDRB     r0,[r0,#0]  ; Switch2
000364  2838              CMP      r0,#0x38
000366  d136              BNE      |L14.982|
;;;418    			{
;;;419    				GUI_DrawFont16(0, 176, POINT_COLOR, WHITE, "关",0);    //0的意思是可以覆盖
000368  2000              MOVS     r0,#0
00036a  a136              ADR      r1,|L14.1092|
00036c  f64f73ff          MOV      r3,#0xffff
000370  e9cd1000          STRD     r1,r0,[sp,#0]
000374  4829              LDR      r0,|L14.1052|
000376  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000378  21b0              MOVS     r1,#0xb0
00037a  2000              MOVS     r0,#0
00037c  f7fffffe          BL       GUI_DrawFont16
;;;420    				GUI_DrawFont16(16, 176, POINT_COLOR, WHITE, "闭",0);    //0的意思是可以覆盖
000380  2000              MOVS     r0,#0
000382  a134              ADR      r1,|L14.1108|
000384  f64f73ff          MOV      r3,#0xffff
000388  e9cd1000          STRD     r1,r0,[sp,#0]
00038c  4823              LDR      r0,|L14.1052|
00038e  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
000390  21b0              MOVS     r1,#0xb0
000392  2010              MOVS     r0,#0x10
000394  f7fffffe          BL       GUI_DrawFont16
;;;421    				GUI_DrawFont16(32, 176, POINT_COLOR, WHITE, "台",0);    //0的意思是可以覆盖
000398  2000              MOVS     r0,#0
00039a  a12c              ADR      r1,|L14.1100|
00039c  f64f73ff          MOV      r3,#0xffff
0003a0  e9cd1000          STRD     r1,r0,[sp,#0]
0003a4  481d              LDR      r0,|L14.1052|
0003a6  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0003a8  21b0              MOVS     r1,#0xb0
0003aa  2020              MOVS     r0,#0x20
0003ac  f7fffffe          BL       GUI_DrawFont16
;;;422    				GUI_DrawFont16(48, 176, POINT_COLOR, WHITE, "灯",0);    //0的意思是可以覆盖
0003b0  2000              MOVS     r0,#0
0003b2  a127              ADR      r1,|L14.1104|
0003b4  f64f73ff          MOV      r3,#0xffff
0003b8  e9cd1000          STRD     r1,r0,[sp,#0]
0003bc  4817              LDR      r0,|L14.1052|
0003be  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
0003c0  21b0              MOVS     r1,#0xb0
0003c2  2030              MOVS     r0,#0x30
0003c4  f7fffffe          BL       GUI_DrawFont16
;;;423    				ll_gpio_bit_reset(GPIOC, BIT(6));
0003c8  2140              MOVS     r1,#0x40
0003ca  481d              LDR      r0,|L14.1088|
0003cc  f7fffffe          BL       ll_gpio_bit_reset
;;;424    				Switch2[0]=0;
0003d0  2000              MOVS     r0,#0
0003d2  4910              LDR      r1,|L14.1044|
0003d4  7008              STRB     r0,[r1,#0]
                  |L14.982|
;;;425    			}
;;;426    			if(yudi==0){
0003d6  4820              LDR      r0,|L14.1112|
0003d8  6800              LDR      r0,[r0,#0]  ; yudi
0003da  b968              CBNZ     r0,|L14.1016|
;;;427    				ll_gpio_bit_set(GPIOB, BIT(11));
0003dc  f44f6100          MOV      r1,#0x800
0003e0  481e              LDR      r0,|L14.1116|
0003e2  f7fffffe          BL       ll_gpio_bit_set
;;;428    				delay_ms(1000);
0003e6  f44f707a          MOV      r0,#0x3e8
0003ea  f7fffffe          BL       delay_ms
;;;429    				ll_gpio_bit_reset(GPIOB, BIT(11));
0003ee  f44f6100          MOV      r1,#0x800
0003f2  481a              LDR      r0,|L14.1116|
0003f4  f7fffffe          BL       ll_gpio_bit_reset
                  |L14.1016|
;;;430    			}
;;;431    			if(chumo2==1)
0003f8  4819              LDR      r0,|L14.1120|
0003fa  6800              LDR      r0,[r0,#0]  ; chumo2
0003fc  2801              CMP      r0,#1
0003fe  d136              BNE      |L14.1134|
;;;432    			{
;;;433    				if(flat2==0)
000400  4818              LDR      r0,|L14.1124|
000402  6800              LDR      r0,[r0,#0]  ; flat2
000404  b928              CBNZ     r0,|L14.1042|
;;;434    				{
;;;435    					led22();
000406  f7fffffe          BL       led22
;;;436    					flat2=1;
00040a  2001              MOVS     r0,#1
00040c  4915              LDR      r1,|L14.1124|
00040e  6008              STR      r0,[r1,#0]  ; flat2
000410  e02d              B        |L14.1134|
                  |L14.1042|
000412  e029              B        |L14.1128|
                  |L14.1044|
                          DCD      Switch2
                  |L14.1048|
000418  b5e700            DCB      181,231,0
00041b  00                DCB      0
                  |L14.1052|
                          DCD      POINT_COLOR
                  |L14.1056|
000420  bbfa00            DCB      187,250,0
000423  00                DCB      0
                  |L14.1060|
000424  d5fd00            DCB      213,253,0
000427  00                DCB      0
                  |L14.1064|
000428  d7aa00            DCB      215,170,0
00042b  00                DCB      0
                  |L14.1068|
00042c  b7b400            DCB      183,180,0
00042f  00                DCB      0
                  |L14.1072|
000430  b6e600            DCB      182,230,0
000433  00                DCB      0
                  |L14.1076|
000434  bfaa00            DCB      191,170,0
000437  00                DCB      0
                  |L14.1080|
000438  b7e700            DCB      183,231,0
00043b  00                DCB      0
                  |L14.1084|
00043c  c9c800            DCB      201,200,0
00043f  00                DCB      0
                  |L14.1088|
                          DCD      0x40025000
                  |L14.1092|
000444  b9d800            DCB      185,216,0
000447  00                DCB      0
                  |L14.1096|
000448  b4f200            DCB      180,242,0
00044b  00                DCB      0
                  |L14.1100|
00044c  cca800            DCB      204,168,0
00044f  00                DCB      0
                  |L14.1104|
000450  b5c600            DCB      181,198,0
000453  00                DCB      0
                  |L14.1108|
000454  b1d500            DCB      177,213,0
000457  00                DCB      0
                  |L14.1112|
                          DCD      yudi
                  |L14.1116|
                          DCD      0x40024000
                  |L14.1120|
                          DCD      chumo2
                  |L14.1124|
                          DCD      flat2
                  |L14.1128|
;;;437    				}else{
;;;438    					flat2=0;
000468  2000              MOVS     r0,#0
00046a  4901              LDR      r1,|L14.1136|
00046c  6008              STR      r0,[r1,#0]  ; flat2
                  |L14.1134|
00046e  e5d3              B        |L14.24|
;;;439    				}
;;;440    			}
;;;441        }
;;;442    }
;;;443    
                          ENDP

                  |L14.1136|
                          DCD      flat2

                          AREA ||i.system_stare_init||, CODE, READONLY, ALIGN=2

                  system_stare_init PROC
;;;51     //系统初始化函数
;;;52     void system_stare_init(void){
000000  b538              PUSH     {r3-r5,lr}
;;;53     	__enable_irq();                 //中断初始化
000002  b662              CPSIE    i
;;;54     	clk_config();                   //时钟配置
000004  f7fffffe          BL       clk_config
;;;55       usart_init();                   //串口初始化
000008  f7fffffe          BL       usart_init
;;;56       usart_config();                 
00000c  f7fffffe          BL       usart_config
;;;57     	fadc_init();                    //adc初始化
000010  f7fffffe          BL       fadc_init
;;;58     	fadc_config();                  
000014  f7fffffe          BL       fadc_config
;;;59     	fadc_start();                   
000018  f7fffffe          BL       fadc_start
;;;60       LCD_Init();                     //lcd初始化
00001c  f7fffffe          BL       LCD_Init
;;;61     	LCD_direction(USE_HORIZONTAL);  //设置LCD显示方向
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       LCD_direction
;;;62       LCD_Clear(WHITE);               //清全屏
000026  f64f70ff          MOV      r0,#0xffff
00002a  f7fffffe          BL       LCD_Clear
;;;63       POINT_COLOR = RED;              // 设置前景颜色
00002e  f44f4078          MOV      r0,#0xf800
000032  49f1              LDR      r1,|L15.1016|
000034  8008              STRH     r0,[r1,#0]
;;;64       BACK_COLOR = BLACK;             // 设置背景颜色
000036  2000              MOVS     r0,#0
000038  49f0              LDR      r1,|L15.1020|
00003a  8008              STRH     r0,[r1,#0]
;;;65       uint16_t x = 0;
00003c  2500              MOVS     r5,#0
;;;66       uint16_t y = 16;
00003e  2410              MOVS     r4,#0x10
;;;67     	Drv_WIFI_Init();                //wifi初始化
000040  f7fffffe          BL       Drv_WIFI_Init
;;;68     	//温湿度
;;;69     	ll_gpio_dir(GPIOB,BIT(8),LL_GPIO_PIN_INPUT);    //PB8输入
000044  2200              MOVS     r2,#0
000046  0121              LSLS     r1,r4,#4
000048  48ed              LDR      r0,|L15.1024|
00004a  f7fffffe          BL       ll_gpio_dir
;;;70     	ll_gpio_pull(GPIOB, BIT(8), LL_GPIO_PULL_UP);		
00004e  2202              MOVS     r2,#2
000050  01d1              LSLS     r1,r2,#7
000052  48eb              LDR      r0,|L15.1024|
000054  f7fffffe          BL       ll_gpio_pull
;;;71     	ll_gpio_dir(GPIOB,BIT(10),LL_GPIO_PIN_OUTPUT);  //PB10输出
000058  2201              MOVS     r2,#1
00005a  0291              LSLS     r1,r2,#10
00005c  48e8              LDR      r0,|L15.1024|
00005e  f7fffffe          BL       ll_gpio_dir
;;;72     	ll_gpio_pull(GPIOB, BIT(10), LL_GPIO_PULL_UP);
000062  2202              MOVS     r2,#2
000064  0251              LSLS     r1,r2,#9
000066  48e6              LDR      r0,|L15.1024|
000068  f7fffffe          BL       ll_gpio_pull
;;;73     	//人体红外
;;;74     	ll_gpio_dir(GPIOB,BIT(4),LL_GPIO_PIN_INPUT);    //人体红外
00006c  2200              MOVS     r2,#0
00006e  2110              MOVS     r1,#0x10
000070  48e3              LDR      r0,|L15.1024|
000072  f7fffffe          BL       ll_gpio_dir
;;;75     	ll_gpio_pull(GPIOB, BIT(4), LL_GPIO_PULL_UP);
000076  2202              MOVS     r2,#2
000078  2110              MOVS     r1,#0x10
00007a  48e1              LDR      r0,|L15.1024|
00007c  f7fffffe          BL       ll_gpio_pull
;;;76     	//光敏值
;;;77     	ll_gpio_dir(GPIOB,BIT(0),LL_GPIO_PIN_INPUT);    //光敏值
000080  2200              MOVS     r2,#0
000082  2101              MOVS     r1,#1
000084  48de              LDR      r0,|L15.1024|
000086  f7fffffe          BL       ll_gpio_dir
;;;78     	ll_gpio_pull(GPIOB, BIT(0), LL_GPIO_PULL_UP);
00008a  2202              MOVS     r2,#2
00008c  2101              MOVS     r1,#1
00008e  48dc              LDR      r0,|L15.1024|
000090  f7fffffe          BL       ll_gpio_pull
;;;79     	//雨滴
;;;80     	ll_gpio_dir(GPIOB,BIT(2),LL_GPIO_PIN_INPUT);  //雨滴传感器
000094  2200              MOVS     r2,#0
000096  2104              MOVS     r1,#4
000098  48d9              LDR      r0,|L15.1024|
00009a  f7fffffe          BL       ll_gpio_dir
;;;81       ll_gpio_pull(GPIOB, BIT(2), LL_GPIO_PULL_UP);
00009e  2202              MOVS     r2,#2
0000a0  2104              MOVS     r1,#4
0000a2  48d7              LDR      r0,|L15.1024|
0000a4  f7fffffe          BL       ll_gpio_pull
;;;82     	//舵机
;;;83     	ll_gpio_dir(GPIOB,BIT(6),LL_GPIO_PIN_OUTPUT);  //舵机
0000a8  2201              MOVS     r2,#1
0000aa  2140              MOVS     r1,#0x40
0000ac  48d4              LDR      r0,|L15.1024|
0000ae  f7fffffe          BL       ll_gpio_dir
;;;84       ll_gpio_pull(GPIOB, BIT(6), LL_GPIO_PULL_DOWN);  
0000b2  2204              MOVS     r2,#4
0000b4  2140              MOVS     r1,#0x40
0000b6  48d2              LDR      r0,|L15.1024|
0000b8  f7fffffe          BL       ll_gpio_pull
;;;85     	//触摸1，电风扇
;;;86     	ll_gpio_dir(GPIOB,BIT(12),LL_GPIO_PIN_INPUT);  
0000bc  2200              MOVS     r2,#0
0000be  0221              LSLS     r1,r4,#8
0000c0  48cf              LDR      r0,|L15.1024|
0000c2  f7fffffe          BL       ll_gpio_dir
;;;87       ll_gpio_pull(GPIOB, BIT(12), LL_GPIO_PULL_DOWN); 
0000c6  2204              MOVS     r2,#4
0000c8  0291              LSLS     r1,r2,#10
0000ca  48cd              LDR      r0,|L15.1024|
0000cc  f7fffffe          BL       ll_gpio_pull
;;;88     	//触摸2，台灯
;;;89     	ll_gpio_dir(GPIOB,BIT(14),LL_GPIO_PIN_INPUT);  
0000d0  2200              MOVS     r2,#0
0000d2  02a1              LSLS     r1,r4,#10
0000d4  48ca              LDR      r0,|L15.1024|
0000d6  f7fffffe          BL       ll_gpio_dir
;;;90       ll_gpio_pull(GPIOB, BIT(14), LL_GPIO_PULL_DOWN); 
0000da  2204              MOVS     r2,#4
0000dc  0311              LSLS     r1,r2,#12
0000de  48c8              LDR      r0,|L15.1024|
0000e0  f7fffffe          BL       ll_gpio_pull
;;;91     	//电机
;;;92     	ll_gpio_dir(GPIOC,BIT(0),LL_GPIO_PIN_OUTPUT);  //pul  
0000e4  2201              MOVS     r2,#1
0000e6  4611              MOV      r1,r2
0000e8  48c6              LDR      r0,|L15.1028|
0000ea  f7fffffe          BL       ll_gpio_dir
;;;93       ll_gpio_pull(GPIOC, BIT(0), LL_GPIO_PULL_DOWN);  
0000ee  2204              MOVS     r2,#4
0000f0  2101              MOVS     r1,#1
0000f2  48c4              LDR      r0,|L15.1028|
0000f4  f7fffffe          BL       ll_gpio_pull
;;;94     	ll_gpio_dir(GPIOC,BIT(2),LL_GPIO_PIN_OUTPUT);  //dir
0000f8  2201              MOVS     r2,#1
0000fa  2104              MOVS     r1,#4
0000fc  48c1              LDR      r0,|L15.1028|
0000fe  f7fffffe          BL       ll_gpio_dir
;;;95       ll_gpio_pull(GPIOC, BIT(2), LL_GPIO_PULL_DOWN);  
000102  2204              MOVS     r2,#4
000104  4611              MOV      r1,r2
000106  48bf              LDR      r0,|L15.1028|
000108  f7fffffe          BL       ll_gpio_pull
;;;96     	//按钮1，电机
;;;97     	ll_gpio_dir(GPIOB,BIT(1),LL_GPIO_PIN_INPUT);  //按钮1
00010c  2200              MOVS     r2,#0
00010e  2102              MOVS     r1,#2
000110  48bb              LDR      r0,|L15.1024|
000112  f7fffffe          BL       ll_gpio_dir
;;;98       ll_gpio_pull(GPIOB, BIT(1), LL_GPIO_PULL_DOWN);
000116  2204              MOVS     r2,#4
000118  2102              MOVS     r1,#2
00011a  48b9              LDR      r0,|L15.1024|
00011c  f7fffffe          BL       ll_gpio_pull
;;;99     	//按钮2，舵机
;;;100    	ll_gpio_dir(GPIOB,BIT(3),LL_GPIO_PIN_INPUT);  //按钮2
000120  2200              MOVS     r2,#0
000122  2108              MOVS     r1,#8
000124  48b6              LDR      r0,|L15.1024|
000126  f7fffffe          BL       ll_gpio_dir
;;;101      ll_gpio_pull(GPIOB, BIT(3), LL_GPIO_PULL_DOWN);
00012a  2204              MOVS     r2,#4
00012c  2108              MOVS     r1,#8
00012e  48b4              LDR      r0,|L15.1024|
000130  f7fffffe          BL       ll_gpio_pull
;;;102    	//继电器1，电风扇
;;;103    	ll_gpio_dir(GPIOC,BIT(4),LL_GPIO_PIN_OUTPUT);  //继电器1
000134  2201              MOVS     r2,#1
000136  2110              MOVS     r1,#0x10
000138  48b2              LDR      r0,|L15.1028|
00013a  f7fffffe          BL       ll_gpio_dir
;;;104      ll_gpio_pull(GPIOC, BIT(4), LL_GPIO_PULL_DOWN);
00013e  2204              MOVS     r2,#4
000140  2110              MOVS     r1,#0x10
000142  48b0              LDR      r0,|L15.1028|
000144  f7fffffe          BL       ll_gpio_pull
;;;105    	//继电器2，台灯
;;;106    	ll_gpio_dir(GPIOC,BIT(6),LL_GPIO_PIN_OUTPUT);  //继电器2
000148  2201              MOVS     r2,#1
00014a  2140              MOVS     r1,#0x40
00014c  48ad              LDR      r0,|L15.1028|
00014e  f7fffffe          BL       ll_gpio_dir
;;;107      ll_gpio_pull(GPIOC, BIT(6), LL_GPIO_PULL_DOWN);
000152  2204              MOVS     r2,#4
000154  2140              MOVS     r1,#0x40
000156  48ab              LDR      r0,|L15.1028|
000158  f7fffffe          BL       ll_gpio_pull
;;;108    	//蜂鸣器
;;;109    	ll_gpio_dir(GPIOB,BIT(11),LL_GPIO_PIN_OUTPUT);  //蜂鸣器
00015c  2201              MOVS     r2,#1
00015e  02d1              LSLS     r1,r2,#11
000160  48a7              LDR      r0,|L15.1024|
000162  f7fffffe          BL       ll_gpio_dir
;;;110      ll_gpio_pull(GPIOB, BIT(11), LL_GPIO_PULL_DOWN);
000166  2204              MOVS     r2,#4
000168  0251              LSLS     r1,r2,#9
00016a  48a5              LDR      r0,|L15.1024|
00016c  f7fffffe          BL       ll_gpio_pull
;;;111    	ll_gpio_bit_reset(GPIOB, BIT(11));
000170  01e1              LSLS     r1,r4,#7
000172  48a3              LDR      r0,|L15.1024|
000174  f7fffffe          BL       ll_gpio_bit_reset
;;;112    	printf("main start\r\n");
000178  a0a3              ADR      r0,|L15.1032|
00017a  f7fffffe          BL       __2printf
;;;113    	LCD_ShowString(x, y, 12, "Getting ready for WIFI Test!!!", 1);
00017e  2001              MOVS     r0,#1
000180  a3a5              ADR      r3,|L15.1048|
000182  220c              MOVS     r2,#0xc
000184  4621              MOV      r1,r4
000186  9000              STR      r0,[sp,#0]
000188  4628              MOV      r0,r5
00018a  f7fffffe          BL       LCD_ShowString
;;;114    	printf("0. Testing AT\r\n");
00018e  a0aa              ADR      r0,|L15.1080|
000190  f7fffffe          BL       __2printf
;;;115    	while (Drv_WIFI_SendCmdAndWaitRequest("AT\r\n", "OK", 200)) {
000194  e003              B        |L15.414|
                  |L15.406|
;;;116            delay_ms(500);
000196  f44f70fa          MOV      r0,#0x1f4
00019a  f7fffffe          BL       delay_ms
                  |L15.414|
00019e  22c8              MOVS     r2,#0xc8              ;115
0001a0  a1a9              ADR      r1,|L15.1096|
0001a2  a0aa              ADR      r0,|L15.1100|
0001a4  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
0001a8  2800              CMP      r0,#0                 ;115
0001aa  d1f4              BNE      |L15.406|
;;;117        }
;;;118        y += 16; // 下一行
0001ac  f1040010          ADD      r0,r4,#0x10
0001b0  b284              UXTH     r4,r0
;;;119        LCD_ShowString(x, y, 12, "ESP-Modlue Test OK", 1);
0001b2  2001              MOVS     r0,#1
0001b4  a3a7              ADR      r3,|L15.1108|
0001b6  220c              MOVS     r2,#0xc
0001b8  4621              MOV      r1,r4
0001ba  9000              STR      r0,[sp,#0]
0001bc  4628              MOV      r0,r5
0001be  f7fffffe          BL       LCD_ShowString
;;;120    
;;;121        y += 16; // 下一行
0001c2  f1040010          ADD      r0,r4,#0x10
0001c6  b284              UXTH     r4,r0
;;;122        LCD_ShowString(x, y, 12, "ESP-Modlue Reset", 1);
0001c8  2001              MOVS     r0,#1
0001ca  a3a7              ADR      r3,|L15.1128|
0001cc  220c              MOVS     r2,#0xc
0001ce  4621              MOV      r1,r4
0001d0  9000              STR      r0,[sp,#0]
0001d2  4628              MOV      r0,r5
0001d4  f7fffffe          BL       LCD_ShowString
;;;123        printf("1. Reset\r\n");
0001d8  a0a8              ADR      r0,|L15.1148|
0001da  f7fffffe          BL       __2printf
;;;124        Drv_WIFI_SendCmdAndWaitRequest("AT+RST\r\n", "", 200);
0001de  22c8              MOVS     r2,#0xc8
0001e0  a18c              ADR      r1,|L15.1044|
0001e2  a0a9              ADR      r0,|L15.1160|
0001e4  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
;;;125        delay_ms(500);
0001e8  f44f70fa          MOV      r0,#0x1f4
0001ec  f7fffffe          BL       delay_ms
;;;126    
;;;127        y += 16; // 下一行
0001f0  f1040010          ADD      r0,r4,#0x10
0001f4  b284              UXTH     r4,r0
;;;128        LCD_ShowString(x, y, 12, "Close last connection...", 1);
0001f6  2001              MOVS     r0,#1
0001f8  a3a6              ADR      r3,|L15.1172|
0001fa  220c              MOVS     r2,#0xc
0001fc  4621              MOV      r1,r4
0001fe  9000              STR      r0,[sp,#0]
000200  4628              MOV      r0,r5
000202  f7fffffe          BL       LCD_ShowString
;;;129        printf("2. Close TCP/UDP Connection...\r\n");
000206  a0aa              ADR      r0,|L15.1200|
000208  f7fffffe          BL       __2printf
;;;130        Drv_WIFI_SendCmdAndWaitRequest("AT+CIPCLOSE\r\n", "", 200);
00020c  22c8              MOVS     r2,#0xc8
00020e  a181              ADR      r1,|L15.1044|
000210  a0b0              ADR      r0,|L15.1236|
000212  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
;;;131    
;;;132        y += 16; // 下一行
000216  f1040010          ADD      r0,r4,#0x10
00021a  b284              UXTH     r4,r0
;;;133        
;;;134    		
;;;135        printf("3. Set to STATION mode\r\n");
00021c  a0b1              ADR      r0,|L15.1252|
00021e  f7fffffe          BL       __2printf
;;;136        Drv_WIFI_SendCmdAndWaitRequest("AT+CWMODE=1\r\n", "OK", 200);
000222  22c8              MOVS     r2,#0xc8
000224  a188              ADR      r1,|L15.1096|
000226  a0b6              ADR      r0,|L15.1280|
000228  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
;;;137    
;;;138        y += 16; // 下一行
00022c  f1040010          ADD      r0,r4,#0x10
000230  b284              UXTH     r4,r0
;;;139        LCD_ShowString(x, y, 12, "DHCP config", 1);
000232  2001              MOVS     r0,#1
000234  a3b6              ADR      r3,|L15.1296|
000236  220c              MOVS     r2,#0xc
000238  4621              MOV      r1,r4
00023a  9000              STR      r0,[sp,#0]
00023c  4628              MOV      r0,r5
00023e  f7fffffe          BL       LCD_ShowString
;;;140        printf("4. Set to DHCP mode\r\n");
000242  a0b6              ADR      r0,|L15.1308|
000244  f7fffffe          BL       __2printf
;;;141        Drv_WIFI_SendCmdAndWaitRequest("AT+CWDHCP=1,1\r\n", "OK", 200);
000248  22c8              MOVS     r2,#0xc8
00024a  a17f              ADR      r1,|L15.1096|
00024c  a0b9              ADR      r0,|L15.1332|
00024e  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
;;;142    
;;;143        y += 16; // 下一行
000252  f1040010          ADD      r0,r4,#0x10
000256  b284              UXTH     r4,r0
;;;144        LCD_ShowString(x, y, 12, "Join to WIFI...", 1);
000258  2001              MOVS     r0,#1
00025a  a3ba              ADR      r3,|L15.1348|
00025c  220c              MOVS     r2,#0xc
00025e  4621              MOV      r1,r4
000260  9000              STR      r0,[sp,#0]
000262  4628              MOV      r0,r5
000264  f7fffffe          BL       LCD_ShowString
;;;145        printf("5. Join to Wifi\r\n");
000268  a0ba              ADR      r0,|L15.1364|
00026a  f7fffffe          BL       __2printf
;;;146        if (Drv_WIFI_SendCmdAndWaitRequest(JOIN_WIFI_INFO, "GOT IP", 3000) != 0) {
00026e  f64032b8          MOV      r2,#0xbb8
000272  a1bd              ADR      r1,|L15.1384|
000274  a0be              ADR      r0,|L15.1392|
000276  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
00027a  b150              CBZ      r0,|L15.658|
;;;147            y += 16; // 下一行
00027c  f1040010          ADD      r0,r4,#0x10
000280  b284              UXTH     r4,r0
;;;148            LCD_ShowString(x, y, 12, "Join to WIFI Failed", 1);
000282  2001              MOVS     r0,#1
000284  a3c3              ADR      r3,|L15.1428|
000286  220c              MOVS     r2,#0xc
000288  4621              MOV      r1,r4
00028a  9000              STR      r0,[sp,#0]
00028c  4628              MOV      r0,r5
00028e  f7fffffe          BL       LCD_ShowString
                  |L15.658|
;;;149            //goto END_PROCESS; // 联WIFI失败
;;;150        }
;;;151        //delay_ms(2000);
;;;152    		//delay_ms(500);
;;;153    		delay_ms(2000);
000292  f44f60fa          MOV      r0,#0x7d0
000296  f7fffffe          BL       delay_ms
;;;154    		
;;;155    		    y += 16; // 下一行
00029a  f1040010          ADD      r0,r4,#0x10
00029e  b284              UXTH     r4,r0
;;;156        LCD_ShowString(x, y, 12, "Creat MQTTCFG connection", 1);
0002a0  2001              MOVS     r0,#1
0002a2  a3c1              ADR      r3,|L15.1448|
0002a4  220c              MOVS     r2,#0xc
0002a6  4621              MOV      r1,r4
0002a8  9000              STR      r0,[sp,#0]
0002aa  4628              MOV      r0,r5
0002ac  f7fffffe          BL       LCD_ShowString
;;;157        printf("6. complete\r\n");
0002b0  a0c4              ADR      r0,|L15.1476|
0002b2  f7fffffe          BL       __2printf
;;;158        if (Drv_WIFI_SendCmdAndWaitRequest(CFG, "OK", 3000) != 0) {
0002b6  f64032b8          MOV      r2,#0xbb8
0002ba  a163              ADR      r1,|L15.1096|
0002bc  48c5              LDR      r0,|L15.1492|
0002be  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
0002c2  b150              CBZ      r0,|L15.730|
;;;159            y += 16; // 下一行
0002c4  f1040010          ADD      r0,r4,#0x10
0002c8  b284              UXTH     r4,r0
;;;160            LCD_ShowString(x, y, 12, "failed", 1);
0002ca  2001              MOVS     r0,#1
0002cc  a3c2              ADR      r3,|L15.1496|
0002ce  220c              MOVS     r2,#0xc
0002d0  4621              MOV      r1,r4
0002d2  9000              STR      r0,[sp,#0]
0002d4  4628              MOV      r0,r5
0002d6  f7fffffe          BL       LCD_ShowString
                  |L15.730|
;;;161            //goto END_PROCESS; // MQTT连接失败
;;;162        }
;;;163    		//delay_ms(2000);
;;;164    		//delay_ms(500);
;;;165        y += 16; // 下一行
0002da  f1040010          ADD      r0,r4,#0x10
0002de  b284              UXTH     r4,r0
;;;166        LCD_ShowString(x, y, 12, "Creat MQTT connection", 1);
0002e0  2001              MOVS     r0,#1
0002e2  a3bf              ADR      r3,|L15.1504|
0002e4  220c              MOVS     r2,#0xc
0002e6  4621              MOV      r1,r4
0002e8  9000              STR      r0,[sp,#0]
0002ea  4628              MOV      r0,r5
0002ec  f7fffffe          BL       LCD_ShowString
;;;167        printf("6. complete\r\n");
0002f0  a0b4              ADR      r0,|L15.1476|
0002f2  f7fffffe          BL       __2printf
;;;168        if (Drv_WIFI_SendCmdAndWaitRequest(CLIENTID, "OK", 3000) != 0) {
0002f6  f64032b8          MOV      r2,#0xbb8
0002fa  a153              ADR      r1,|L15.1096|
0002fc  48be              LDR      r0,|L15.1528|
0002fe  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
000302  b150              CBZ      r0,|L15.794|
;;;169            y += 16; // 下一行
000304  f1040010          ADD      r0,r4,#0x10
000308  b284              UXTH     r4,r0
;;;170            LCD_ShowString(x, y, 12, "failed", 1);
00030a  2001              MOVS     r0,#1
00030c  a3b2              ADR      r3,|L15.1496|
00030e  220c              MOVS     r2,#0xc
000310  4621              MOV      r1,r4
000312  9000              STR      r0,[sp,#0]
000314  4628              MOV      r0,r5
000316  f7fffffe          BL       LCD_ShowString
                  |L15.794|
;;;171            //goto END_PROCESS; // MQTT连接失败
;;;172        }
;;;173    		//delay_ms(2000);
;;;174    		//delay_ms(500);
;;;175        y += 16; // 下一行
00031a  f1040010          ADD      r0,r4,#0x10
00031e  b284              UXTH     r4,r0
;;;176        LCD_ShowString(x, y, 12, "Creat MQTTCLIENTID connection", 1);
000320  2001              MOVS     r0,#1
000322  a3b6              ADR      r3,|L15.1532|
000324  220c              MOVS     r2,#0xc
000326  4621              MOV      r1,r4
000328  9000              STR      r0,[sp,#0]
00032a  4628              MOV      r0,r5
00032c  f7fffffe          BL       LCD_ShowString
;;;177        printf("6. complete\r\n");
000330  a0a4              ADR      r0,|L15.1476|
000332  f7fffffe          BL       __2printf
;;;178        if (Drv_WIFI_SendCmdAndWaitRequest(CLIENTID, "OK", 500) != 0) {
000336  f44f72fa          MOV      r2,#0x1f4
00033a  a143              ADR      r1,|L15.1096|
00033c  48ae              LDR      r0,|L15.1528|
00033e  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
000342  b150              CBZ      r0,|L15.858|
;;;179            y += 16; // 下一行
000344  f1040010          ADD      r0,r4,#0x10
000348  b284              UXTH     r4,r0
;;;180            LCD_ShowString(x, y, 12, "MQTTCLIENTID failed", 1);
00034a  2001              MOVS     r0,#1
00034c  a3b3              ADR      r3,|L15.1564|
00034e  220c              MOVS     r2,#0xc
000350  4621              MOV      r1,r4
000352  9000              STR      r0,[sp,#0]
000354  4628              MOV      r0,r5
000356  f7fffffe          BL       LCD_ShowString
                  |L15.858|
;;;181            //goto END_PROCESS; // MQTT连接失败
;;;182        }
;;;183    				//delay_ms(2000);
;;;184    		//delay_ms(500);
;;;185        y += 16; // 下一行
00035a  f1040010          ADD      r0,r4,#0x10
00035e  b284              UXTH     r4,r0
;;;186        LCD_ShowString(x, y, 12, "Creat MQTTCONN connection", 1);
000360  2001              MOVS     r0,#1
000362  a3b3              ADR      r3,|L15.1584|
000364  220c              MOVS     r2,#0xc
000366  4621              MOV      r1,r4
000368  9000              STR      r0,[sp,#0]
00036a  4628              MOV      r0,r5
00036c  f7fffffe          BL       LCD_ShowString
;;;187        printf("6. complete\r\n");
000370  a094              ADR      r0,|L15.1476|
000372  f7fffffe          BL       __2printf
;;;188        if (Drv_WIFI_SendCmdAndWaitRequest(CONN, "OK", 500) != 0) {
000376  f44f72fa          MOV      r2,#0x1f4
00037a  a133              ADR      r1,|L15.1096|
00037c  a0b3              ADR      r0,|L15.1612|
00037e  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
000382  b150              CBZ      r0,|L15.922|
;;;189            y += 16; // 下一行
000384  f1040010          ADD      r0,r4,#0x10
000388  b284              UXTH     r4,r0
;;;190            LCD_ShowString(x, y, 12, "MQTTCONN failed", 1);
00038a  2001              MOVS     r0,#1
00038c  a3bf              ADR      r3,|L15.1676|
00038e  220c              MOVS     r2,#0xc
000390  4621              MOV      r1,r4
000392  9000              STR      r0,[sp,#0]
000394  4628              MOV      r0,r5
000396  f7fffffe          BL       LCD_ShowString
                  |L15.922|
;;;191            //goto END_PROCESS; // MQTT连接失败
;;;192        }
;;;193    		
;;;194    				//delay_ms(2000);
;;;195    		//delay_ms(500);
;;;196        y += 16; // 下一行
00039a  f1040010          ADD      r0,r4,#0x10
00039e  b284              UXTH     r4,r0
;;;197        LCD_ShowString(x, y, 12, "Creat topic connection", 1);
0003a0  2001              MOVS     r0,#1
0003a2  a3be              ADR      r3,|L15.1692|
0003a4  220c              MOVS     r2,#0xc
0003a6  4621              MOV      r1,r4
0003a8  9000              STR      r0,[sp,#0]
0003aa  4628              MOV      r0,r5
0003ac  f7fffffe          BL       LCD_ShowString
;;;198        printf("6. complete\r\n");
0003b0  a084              ADR      r0,|L15.1476|
0003b2  f7fffffe          BL       __2printf
;;;199        if (Drv_WIFI_SendCmdAndWaitRequest(SUB, "OK", 500) != 0) {
0003b6  f44f72fa          MOV      r2,#0x1f4
0003ba  a123              ADR      r1,|L15.1096|
0003bc  a0bd              ADR      r0,|L15.1716|
0003be  f7fffffe          BL       Drv_WIFI_SendCmdAndWaitRequest
0003c2  b150              CBZ      r0,|L15.986|
;;;200            y += 16; // 下一行
0003c4  f1040010          ADD      r0,r4,#0x10
0003c8  b284              UXTH     r4,r0
;;;201            LCD_ShowString(x, y, 12, "TOPIC failed", 1);
0003ca  2001              MOVS     r0,#1
0003cc  a3c6              ADR      r3,|L15.1768|
0003ce  220c              MOVS     r2,#0xc
0003d0  4621              MOV      r1,r4
0003d2  9000              STR      r0,[sp,#0]
0003d4  4628              MOV      r0,r5
0003d6  f7fffffe          BL       LCD_ShowString
                  |L15.986|
;;;202            //goto END_PROCESS; // MQTT连接失败
;;;203        }
;;;204    		y += 16; // 下一行
0003da  f1040010          ADD      r0,r4,#0x10
0003de  b284              UXTH     r4,r0
;;;205        LCD_ShowString(x, y, 12, "Wait for MQTT data and loopback", 1);
0003e0  2001              MOVS     r0,#1
0003e2  a3c5              ADR      r3,|L15.1784|
0003e4  220c              MOVS     r2,#0xc
0003e6  4621              MOV      r1,r4
0003e8  9000              STR      r0,[sp,#0]
0003ea  4628              MOV      r0,r5
0003ec  f7fffffe          BL       LCD_ShowString
;;;206        HW_WIFI_Clear();
0003f0  f7fffffe          BL       HW_WIFI_Clear
;;;207    }
0003f4  bd38              POP      {r3-r5,pc}
;;;208    
                          ENDP

0003f6  0000              DCW      0x0000
                  |L15.1016|
                          DCD      POINT_COLOR
                  |L15.1020|
                          DCD      BACK_COLOR
                  |L15.1024|
                          DCD      0x40024000
                  |L15.1028|
                          DCD      0x40025000
                  |L15.1032|
000408  6d61696e          DCB      "main start\r\n"
00040c  20737461
000410  72740d0a
                  |L15.1044|
000414  00                DCB      0
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
                  |L15.1048|
000418  47657474          DCB      "Getting ready for WIFI Test!!!",0
00041c  696e6720
000420  72656164
000424  7920666f
000428  72205749
00042c  46492054
000430  65737421
000434  212100  
000437  00                DCB      0
                  |L15.1080|
000438  302e2054          DCB      "0. Testing AT\r\n",0
00043c  65737469
000440  6e672041
000444  540d0a00
                  |L15.1096|
000448  4f4b00            DCB      "OK",0
00044b  00                DCB      0
                  |L15.1100|
00044c  41540d0a          DCB      "AT\r\n",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L15.1108|
000454  4553502d          DCB      "ESP-Modlue Test OK",0
000458  4d6f646c
00045c  75652054
000460  65737420
000464  4f4b00  
000467  00                DCB      0
                  |L15.1128|
000468  4553502d          DCB      "ESP-Modlue Reset",0
00046c  4d6f646c
000470  75652052
000474  65736574
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L15.1148|
00047c  312e2052          DCB      "1. Reset\r\n",0
000480  65736574
000484  0d0a00  
000487  00                DCB      0
                  |L15.1160|
000488  41542b52          DCB      "AT+RST\r\n",0
00048c  53540d0a
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L15.1172|
000494  436c6f73          DCB      "Close last connection...",0
000498  65206c61
00049c  73742063
0004a0  6f6e6e65
0004a4  6374696f
0004a8  6e2e2e2e
0004ac  00      
0004ad  00                DCB      0
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L15.1200|
0004b0  322e2043          DCB      "2. Close TCP/UDP Connection...\r\n",0
0004b4  6c6f7365
0004b8  20544350
0004bc  2f554450
0004c0  20436f6e
0004c4  6e656374
0004c8  696f6e2e
0004cc  2e2e0d0a
0004d0  00      
0004d1  00                DCB      0
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L15.1236|
0004d4  41542b43          DCB      "AT+CIPCLOSE\r\n",0
0004d8  4950434c
0004dc  4f53450d
0004e0  0a00    
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L15.1252|
0004e4  332e2053          DCB      "3. Set to STATION mode\r\n",0
0004e8  65742074
0004ec  6f205354
0004f0  4154494f
0004f4  4e206d6f
0004f8  64650d0a
0004fc  00      
0004fd  00                DCB      0
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L15.1280|
000500  41542b43          DCB      "AT+CWMODE=1\r\n",0
000504  574d4f44
000508  453d310d
00050c  0a00    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L15.1296|
000510  44484350          DCB      "DHCP config",0
000514  20636f6e
000518  66696700
                  |L15.1308|
00051c  342e2053          DCB      "4. Set to DHCP mode\r\n",0
000520  65742074
000524  6f204448
000528  4350206d
00052c  6f64650d
000530  0a00    
000532  00                DCB      0
000533  00                DCB      0
                  |L15.1332|
000534  41542b43          DCB      "AT+CWDHCP=1,1\r\n",0
000538  57444843
00053c  503d312c
000540  310d0a00
                  |L15.1348|
000544  4a6f696e          DCB      "Join to WIFI...",0
000548  20746f20
00054c  57494649
000550  2e2e2e00
                  |L15.1364|
000554  352e204a          DCB      "5. Join to Wifi\r\n",0
000558  6f696e20
00055c  746f2057
000560  6966690d
000564  0a00    
000566  00                DCB      0
000567  00                DCB      0
                  |L15.1384|
000568  474f5420          DCB      "GOT IP",0
00056c  495000  
00056f  00                DCB      0
                  |L15.1392|
000570  41542b43          DCB      "AT+CWJAP=""JiniPhone"",""eeeerrrr""\r\n",0
000574  574a4150
000578  3d224a69
00057c  6e695068
000580  6f6e6522
000584  2c226565
000588  65657272
00058c  7272220d
000590  0a00    
000592  00                DCB      0
000593  00                DCB      0
                  |L15.1428|
000594  4a6f696e          DCB      "Join to WIFI Failed",0
000598  20746f20
00059c  57494649
0005a0  20466169
0005a4  6c656400
                  |L15.1448|
0005a8  43726561          DCB      "Creat MQTTCFG connection",0
0005ac  74204d51
0005b0  54544346
0005b4  4720636f
0005b8  6e6e6563
0005bc  74696f6e
0005c0  00      
0005c1  00                DCB      0
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L15.1476|
0005c4  362e2063          DCB      "6. complete\r\n",0
0005c8  6f6d706c
0005cc  6574650d
0005d0  0a00    
0005d2  00                DCB      0
0005d3  00                DCB      0
                  |L15.1492|
                          DCD      ||.conststring||
                  |L15.1496|
0005d8  6661696c          DCB      "failed",0
0005dc  656400  
0005df  00                DCB      0
                  |L15.1504|
0005e0  43726561          DCB      "Creat MQTT connection",0
0005e4  74204d51
0005e8  54542063
0005ec  6f6e6e65
0005f0  6374696f
0005f4  6e00    
0005f6  00                DCB      0
0005f7  00                DCB      0
                  |L15.1528|
                          DCD      ||.conststring||+0x80
                  |L15.1532|
0005fc  43726561          DCB      "Creat MQTTCLIENTID connection",0
000600  74204d51
000604  5454434c
000608  49454e54
00060c  49442063
000610  6f6e6e65
000614  6374696f
000618  6e00    
00061a  00                DCB      0
00061b  00                DCB      0
                  |L15.1564|
00061c  4d515454          DCB      "MQTTCLIENTID failed",0
000620  434c4945
000624  4e544944
000628  20666169
00062c  6c656400
                  |L15.1584|
000630  43726561          DCB      "Creat MQTTCONN connection",0
000634  74204d51
000638  5454434f
00063c  4e4e2063
000640  6f6e6e65
000644  6374696f
000648  6e00    
00064a  00                DCB      0
00064b  00                DCB      0
                  |L15.1612|
00064c  41542b4d          DCB      "AT+MQTTCONN=0,""iot-060a32fu.mqtt.iothub.aliyuncs.com"""
000650  51545443
000654  4f4e4e3d
000658  302c2269
00065c  6f742d30
000660  36306133
000664  3266752e
000668  6d717474
00066c  2e696f74
000670  6875622e
000674  616c6979
000678  756e6373
00067c  2e636f6d
000680  22      
000681  2c313838          DCB      ",1883,1\r\n",0
000685  332c310d
000689  0a00    
00068b  00                DCB      0
                  |L15.1676|
00068c  4d515454          DCB      "MQTTCONN failed",0
000690  434f4e4e
000694  20666169
000698  6c656400
                  |L15.1692|
00069c  43726561          DCB      "Creat topic connection",0
0006a0  7420746f
0006a4  70696320
0006a8  636f6e6e
0006ac  65637469
0006b0  6f6e00  
0006b3  00                DCB      0
                  |L15.1716|
0006b4  41542b4d          DCB      "AT+MQTTSUB=0,""/jk1zFbWTW6V/class-rack/user/get"",1\r\n"
0006b8  51545453
0006bc  55423d30
0006c0  2c222f6a
0006c4  6b317a46
0006c8  62575457
0006cc  36562f63
0006d0  6c617373
0006d4  2d726163
0006d8  6b2f7573
0006dc  65722f67
0006e0  6574222c
0006e4  310d0a  
0006e7  00                DCB      0
                  |L15.1768|
0006e8  544f5049          DCB      "TOPIC failed",0
0006ec  43206661
0006f0  696c6564
0006f4  00      
0006f5  00                DCB      0
0006f6  00                DCB      0
0006f7  00                DCB      0
                  |L15.1784|
0006f8  57616974          DCB      "Wait for MQTT data and loopback",0
0006fc  20666f72
000700  204d5154
000704  54206461
000708  74612061
00070c  6e64206c
000710  6f6f7062
000714  61636b00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  temp_str
                          %        30
                  hum_str
                          %        30
                  rentizhi2
                          %        50
                  ziwaixian2
                          %        50
                  yudi2
                          %        50
                  guangmin2
                          %        50
                  RECS
                          %        250

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  41542b4d          DCB      "AT+MQTTUSERCFG=0,1,""NULL"",""class-rack&jk1zFbWTW6V"","
000004  51545455
000008  53455243
00000c  46473d30
000010  2c312c22
000014  4e554c4c
000018  222c2263
00001c  6c617373
000020  2d726163
000024  6b266a6b
000028  317a4662
00002c  57545736
000030  56222c  
000033  22336262          DCB      """3bbfde7d33ca4065242048dd72d0977a8a17e3dbc85ea7f6a87d0"
000037  66646537
00003b  64333363
00003f  61343036
000043  35323432
000047  30343864
00004b  64373264
00004f  30393737
000053  61386131
000057  37653364
00005b  62633835
00005f  65613766
000063  36613837
000067  6430    
000069  36316331          DCB      "61c10560fb7"",0,0,""""\r\n",0
00006d  30353630
000071  66623722
000075  2c302c30
000079  2c22220d
00007d  0a00    
00007f  00                DCB      0
000080  41542b4d          DCB      "AT+MQTTCLIENTID=0,""jk1zFbWTW6V.class-rack|securemode=2"
000084  51545443
000088  4c49454e
00008c  5449443d
000090  302c226a
000094  6b317a46
000098  62575457
00009c  36562e63
0000a0  6c617373
0000a4  2d726163
0000a8  6b7c7365
0000ac  63757265
0000b0  6d6f6465
0000b4  3d32    
0000b6  5c2c7369          DCB      "\\,signmethod=hmacsha256\\,timestamp=1685613072669|""\r"
0000ba  676e6d65
0000be  74686f64
0000c2  3d686d61
0000c6  63736861
0000ca  3235365c
0000ce  2c74696d
0000d2  65737461
0000d6  6d703d31
0000da  36383536
0000de  31333037
0000e2  32363639
0000e6  7c220d  
0000e9  0a00              DCB      "\n",0
0000eb  00                DCB      0
0000ec  41542b4d          DCB      "AT+MQTTPUB=0,""/sys/jk1zFbWTW6V/class-rack/thing/event/"
0000f0  51545450
0000f4  55423d30
0000f8  2c222f73
0000fc  79732f6a
000100  6b317a46
000104  62575457
000108  36562f63
00010c  6c617373
000110  2d726163
000114  6b2f7468
000118  696e672f
00011c  6576656e
000120  742f    
000122  70726f70          DCB      "property/post"",""{\\""method\\"":\\""thing.event.prope"
000126  65727479
00012a  2f706f73
00012e  74222c22
000132  7b5c226d
000136  6574686f
00013a  645c223a
00013e  5c227468
000142  696e672e
000146  6576656e
00014a  742e7072
00014e  6f7065  
000151  7274792e          DCB      "rty.post\\""\\,\\""id\\"":\\""1234\\""\\,\\""params\\"""
000155  706f7374
000159  5c225c2c
00015d  5c226964
000161  5c223a5c
000165  22313233
000169  345c225c
00016d  2c5c2270
000171  6172616d
000175  735c22  
000178  3a7b5c22          DCB      ":{\\""temp\\"":%d}\\,\\""version\\"":\\""1.0.0\\""}"",1"
00017c  74656d70
000180  5c223a25
000184  647d5c2c
000188  5c227665
00018c  7273696f
000190  6e5c223a
000194  5c22312e
000198  302e305c
00019c  227d222c
0001a0  31      
0001a1  2c300d0a          DCB      ",0\r\n",0
0001a5  00      
0001a6  00                DCB      0
0001a7  00                DCB      0
0001a8  41542b4d          DCB      "AT+MQTTPUB=0,""/sys/jk1zFbWTW6V/class-rack/thing/event/"
0001ac  51545450
0001b0  55423d30
0001b4  2c222f73
0001b8  79732f6a
0001bc  6b317a46
0001c0  62575457
0001c4  36562f63
0001c8  6c617373
0001cc  2d726163
0001d0  6b2f7468
0001d4  696e672f
0001d8  6576656e
0001dc  742f    
0001de  70726f70          DCB      "property/post"",""{\\""method\\"":\\""thing.event.prope"
0001e2  65727479
0001e6  2f706f73
0001ea  74222c22
0001ee  7b5c226d
0001f2  6574686f
0001f6  645c223a
0001fa  5c227468
0001fe  696e672e
000202  6576656e
000206  742e7072
00020a  6f7065  
00020d  7274792e          DCB      "rty.post\\""\\,\\""id\\"":\\""1232\\""\\,\\""params\\"""
000211  706f7374
000215  5c225c2c
000219  5c226964
00021d  5c223a5c
000221  22313233
000225  325c225c
000229  2c5c2270
00022d  6172616d
000231  735c22  
000234  3a7b5c22          DCB      ":{\\""hum\\"":%d}\\,\\""version\\"":\\""1.0.0\\""}"",1,"
000238  68756d5c
00023c  223a2564
000240  7d5c2c5c
000244  22766572
000248  73696f6e
00024c  5c223a5c
000250  22312e30
000254  2e305c22
000258  7d222c31
00025c  2c      
00025d  300d0a00          DCB      "0\r\n",0
000261  00                DCB      0
000262  00                DCB      0
000263  00                DCB      0
000264  41542b4d          DCB      "AT+MQTTPUB=0,""/sys/jk1zFbWTW6V/class-rack/thing/event/"
000268  51545450
00026c  55423d30
000270  2c222f73
000274  79732f6a
000278  6b317a46
00027c  62575457
000280  36562f63
000284  6c617373
000288  2d726163
00028c  6b2f7468
000290  696e672f
000294  6576656e
000298  742f    
00029a  70726f70          DCB      "property/post"",""{\\""method\\"":\\""thing.event.prope"
00029e  65727479
0002a2  2f706f73
0002a6  74222c22
0002aa  7b5c226d
0002ae  6574686f
0002b2  645c223a
0002b6  5c227468
0002ba  696e672e
0002be  6576656e
0002c2  742e7072
0002c6  6f7065  
0002c9  7274792e          DCB      "rty.post\\""\\,\\""id\\"":\\""1231\\""\\,\\""params\\"""
0002cd  706f7374
0002d1  5c225c2c
0002d5  5c226964
0002d9  5c223a5c
0002dd  22313233
0002e1  315c225c
0002e5  2c5c2270
0002e9  6172616d
0002ed  735c22  
0002f0  3a7b5c22          DCB      ":{\\""yudi\\"":%d}\\,\\""version\\"":\\""1.0.0\\""}"",1"
0002f4  79756469
0002f8  5c223a25
0002fc  647d5c2c
000300  5c227665
000304  7273696f
000308  6e5c223a
00030c  5c22312e
000310  302e305c
000314  227d222c
000318  31      
000319  2c300d0a          DCB      ",0\r\n",0
00031d  00      
00031e  00                DCB      0
00031f  00                DCB      0
000320  41542b4d          DCB      "AT+MQTTPUB=0,""/sys/jk1zFbWTW6V/class-rack/thing/event/"
000324  51545450
000328  55423d30
00032c  2c222f73
000330  79732f6a
000334  6b317a46
000338  62575457
00033c  36562f63
000340  6c617373
000344  2d726163
000348  6b2f7468
00034c  696e672f
000350  6576656e
000354  742f    
000356  70726f70          DCB      "property/post"",""{\\""method\\"":\\""thing.event.prope"
00035a  65727479
00035e  2f706f73
000362  74222c22
000366  7b5c226d
00036a  6574686f
00036e  645c223a
000372  5c227468
000376  696e672e
00037a  6576656e
00037e  742e7072
000382  6f7065  
000385  7274792e          DCB      "rty.post\\""\\,\\""id\\"":\\""1235\\""\\,\\""params\\"""
000389  706f7374
00038d  5c225c2c
000391  5c226964
000395  5c223a5c
000399  22313233
00039d  355c225c
0003a1  2c5c2270
0003a5  6172616d
0003a9  735c22  
0003ac  3a7b5c22          DCB      ":{\\""renti\\"":%d}\\,\\""version\\"":\\""1.0.0\\""}"","
0003b0  72656e74
0003b4  695c223a
0003b8  25647d5c
0003bc  2c5c2276
0003c0  65727369
0003c4  6f6e5c22
0003c8  3a5c2231
0003cc  2e302e30
0003d0  5c227d22
0003d4  2c      
0003d5  312c300d          DCB      "1,0\r\n",0
0003d9  0a00    
0003db  00                DCB      0
0003dc  41542b4d          DCB      "AT+MQTTPUB=0,""/sys/jk1zFbWTW6V/class-rack/thing/event/"
0003e0  51545450
0003e4  55423d30
0003e8  2c222f73
0003ec  79732f6a
0003f0  6b317a46
0003f4  62575457
0003f8  36562f63
0003fc  6c617373
000400  2d726163
000404  6b2f7468
000408  696e672f
00040c  6576656e
000410  742f    
000412  70726f70          DCB      "property/post"",""{\\""method\\"":\\""thing.event.prope"
000416  65727479
00041a  2f706f73
00041e  74222c22
000422  7b5c226d
000426  6574686f
00042a  645c223a
00042e  5c227468
000432  696e672e
000436  6576656e
00043a  742e7072
00043e  6f7065  
000441  7274792e          DCB      "rty.post\\""\\,\\""id\\"":\\""1230\\""\\,\\""params\\"""
000445  706f7374
000449  5c225c2c
00044d  5c226964
000451  5c223a5c
000455  22313233
000459  305c225c
00045d  2c5c2270
000461  6172616d
000465  735c22  
000468  3a7b5c22          DCB      ":{\\""guangmin\\"":%d}\\,\\""version\\"":\\""1.0.0\\""}"
00046c  6775616e
000470  676d696e
000474  5c223a25
000478  647d5c2c
00047c  5c227665
000480  7273696f
000484  6e5c223a
000488  5c22312e
00048c  302e305c
000490  227d    
000492  222c312c          DCB      """,1,0\r\n",0
000496  300d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  rentizhi
                          DCD      0x00000000
                  guangmin
                          DCD      0x00000000
                  ziwaixian
                          DCD      0x00000000
                  temp
00000c  00                DCB      0x00
                  hum
00000d  000000            DCB      0x00,0x00,0x00
                  button1
                          DCD      0x00000000
                  button2
                          DCD      0x00000000
                  yudi
                          DCD      0x00000000
                  chumo1
                          DCD      0x00000000
                  chumo2
                          DCD      0x00000000
                  Switch2
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  flat1
                          DCD      0x00000000
                  flat2
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\LL\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_rentizhi____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___6_main_c_rentizhi____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_rentizhi____REVSH|
#line 474
|__asm___6_main_c_rentizhi____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_rentizhi____RRX|
#line 661
|__asm___6_main_c_rentizhi____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
