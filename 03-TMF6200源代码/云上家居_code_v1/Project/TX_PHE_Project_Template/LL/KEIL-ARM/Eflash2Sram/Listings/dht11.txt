; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\dht11.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\dht11.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\dht11.crf ..\..\..\..\User\LL\DHT11.c]
                          THUMB

                          AREA ||i.delay_10ms||, CODE, READONLY, ALIGN=1

                  delay_10ms PROC
;;;13     }
;;;14     void delay_10ms(void)
000000  210a              MOVS     r1,#0xa
;;;15     {
;;;16     	int n = 10, i = 0;
000002  2000              MOVS     r0,#0
;;;17     	while(n--)
000004  e006              B        |L1.20|
                  |L1.6|
;;;18     		for(i = 0; i < 8050; i++);
000006  2000              MOVS     r0,#0
000008  e000              B        |L1.12|
                  |L1.10|
00000a  1c40              ADDS     r0,r0,#1
                  |L1.12|
00000c  f6417272          MOV      r2,#0x1f72
000010  4290              CMP      r0,r2
000012  dbfa              BLT      |L1.10|
                  |L1.20|
000014  1e0a              SUBS     r2,r1,#0              ;17
000016  f1a10101          SUB      r1,r1,#1              ;17
00001a  d1f4              BNE      |L1.6|
;;;19     }
00001c  4770              BX       lr
;;;20     
                          ENDP


                          AREA ||i.delay_10us||, CODE, READONLY, ALIGN=1

                  delay_10us PROC
;;;12     #endif
;;;9      void delay_10us(void)
000000  2064              MOVS     r0,#0x64
;;;10     {
;;;11     	int i = 100;
;;;12     	while(i--);
000002  bf00              NOP      
                  |L2.4|
000004  1e01              SUBS     r1,r0,#0
000006  f1a00001          SUB      r0,r0,#1
00000a  d1fb              BNE      |L2.4|
;;;13     }
00000c  4770              BX       lr
;;;14     void delay_10ms(void)
                          ENDP


                          AREA ||i.dht11_init||, CODE, READONLY, ALIGN=2

                  dht11_init PROC
;;;20     
;;;21     int dht11_init(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     again:
000002  bf00              NOP      
                  |L3.4|
;;;24     	ll_gpio_bit_set(GPIOB, BIT(10));
000004  f44f6180          MOV      r1,#0x400
000008  481e              LDR      r0,|L3.132|
00000a  f7fffffe          BL       ll_gpio_bit_set
;;;25     	delay_10ms();
00000e  f7fffffe          BL       delay_10ms
;;;26     	delay_10ms();
000012  f7fffffe          BL       delay_10ms
;;;27     	delay_10ms();
000016  f7fffffe          BL       delay_10ms
;;;28     	//1、拉低电平持续 至少 18ms
;;;29     	ll_gpio_bit_reset(GPIOB, BIT(10));
00001a  f44f6080          MOV      r0,#0x400
00001e  4919              LDR      r1,|L3.132|
000020  6388              STR      r0,[r1,#0x38]
000022  bf00              NOP      
;;;30     	delay_10ms();
000024  f7fffffe          BL       delay_10ms
;;;31     	delay_10ms();
000028  f7fffffe          BL       delay_10ms
;;;32     	delay_10ms();
00002c  f7fffffe          BL       delay_10ms
;;;33     	delay_10ms();
000030  f7fffffe          BL       delay_10ms
;;;34     	delay_10ms();
000034  f7fffffe          BL       delay_10ms
;;;35     	//2、拉高电平持续 20~40us
;;;36     	ll_gpio_bit_set(GPIOB, BIT(10));
000038  f44f6180          MOV      r1,#0x400
00003c  4811              LDR      r0,|L3.132|
00003e  f7fffffe          BL       ll_gpio_bit_set
;;;37     	//设置引脚输入功能，方便30us后，读取 dht11响应的电平	
;;;38     	delay_10us();
000042  f7fffffe          BL       delay_10us
;;;39     	delay_10us();
000046  f7fffffe          BL       delay_10us
;;;40     	delay_10us();
00004a  f7fffffe          BL       delay_10us
;;;41     	delay_10us();
00004e  f7fffffe          BL       delay_10us
;;;42     	
;;;43     	if( ll_gpio_read_data_bit(GPIOB, BIT(8)) == 0){//3、判断 dht11是否拉低电平 80us给响应
000052  f44f7180          MOV      r1,#0x100
000056  480b              LDR      r0,|L3.132|
000058  f7fffffe          BL       ll_gpio_read_data_bit
00005c  b980              CBNZ     r0,|L3.128|
;;;44     		while( !ll_gpio_read_data_bit(GPIOB, BIT(8)));//如果为低电平，则循环等待，电平拉高的时候，结束该循环。
00005e  bf00              NOP      
                  |L3.96|
000060  f44f7180          MOV      r1,#0x100
000064  4807              LDR      r0,|L3.132|
000066  f7fffffe          BL       ll_gpio_read_data_bit
00006a  2800              CMP      r0,#0
00006c  d0f8              BEQ      |L3.96|
;;;45     		while( ll_gpio_read_data_bit(GPIOB, BIT(8)));//如果为高电平，则循环等待，电平拉低的时候，结束该循环
00006e  bf00              NOP      
                  |L3.112|
000070  f44f7180          MOV      r1,#0x100
000074  4803              LDR      r0,|L3.132|
000076  f7fffffe          BL       ll_gpio_read_data_bit
00007a  2800              CMP      r0,#0
00007c  d1f8              BNE      |L3.112|
;;;46     		return 0;//结束该函数，表示可以准备读取 dht11回复的数据
;;;47     	} 
;;;48     	goto again;//dht11 未给响应，重新开始
;;;49     }
00007e  bd10              POP      {r4,pc}
                  |L3.128|
000080  e7c0              B        |L3.4|
;;;50     int dht11_read(u8 *temp, u8 *hum)
                          ENDP

000082  0000              DCW      0x0000
                  |L3.132|
                          DCD      0x40024000

                          AREA ||i.dht11_read||, CODE, READONLY, ALIGN=2

                  dht11_read PROC
;;;49     }
;;;50     int dht11_read(u8 *temp, u8 *hum)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;51     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;52     	int i, count=0;
000008  2700              MOVS     r7,#0
;;;53     	u8 data[5] = {0};
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;54     	if( dht11_init() == 0){
000010  f7fffffe          BL       dht11_init
000014  2800              CMP      r0,#0
000016  d157              BNE      |L4.200|
;;;55     		for(i = 0 ; i < 40; i++){ //循环40次，读取dht11响应的 40bit数据	
000018  2400              MOVS     r4,#0
00001a  e031              B        |L4.128|
                  |L4.28|
;;;56     			while(!ll_gpio_read_data_bit(GPIOB, BIT(8)));//等待响应时低电平 50us结束
00001c  bf00              NOP      
                  |L4.30|
00001e  f44f7180          MOV      r1,#0x100
000022  482b              LDR      r0,|L4.208|
000024  f7fffffe          BL       ll_gpio_read_data_bit
000028  2800              CMP      r0,#0
00002a  d0f8              BEQ      |L4.30|
;;;57     			count = 0;
00002c  2700              MOVS     r7,#0
;;;58     			while(ll_gpio_read_data_bit(GPIOB, BIT(8))){
00002e  e002              B        |L4.54|
                  |L4.48|
;;;59     				delay_10us();
000030  f7fffffe          BL       delay_10us
;;;60     				count++;		//记录高电平的次数
000034  1c7f              ADDS     r7,r7,#1
                  |L4.54|
000036  f44f7180          MOV      r1,#0x100             ;58
00003a  4825              LDR      r0,|L4.208|
00003c  f7fffffe          BL       ll_gpio_read_data_bit
000040  2800              CMP      r0,#0                 ;58
000042  d1f5              BNE      |L4.48|
;;;61     			}
;;;62     			if(count > 5)
000044  2f05              CMP      r7,#5
000046  dd1a              BLE      |L4.126|
;;;63     				// i/8 :表示0、1、2、3、4五个数据，1 << (7 - i % 8)：每个数据占8位，数据传输 高位在前
;;;64     				data[i/8] |= 1 << (7 - i % 8);	
000048  17e2              ASRS     r2,r4,#31
00004a  eb047252          ADD      r2,r4,r2,LSR #29
00004e  10d2              ASRS     r2,r2,#3
000050  f81d2002          LDRB     r2,[sp,r2]
000054  4621              MOV      r1,r4
000056  17e3              ASRS     r3,r4,#31
000058  eb047353          ADD      r3,r4,r3,LSR #29
00005c  10db              ASRS     r3,r3,#3
00005e  eba403c3          SUB      r3,r4,r3,LSL #3
000062  f1c30c07          RSB      r12,r3,#7
000066  2301              MOVS     r3,#1
000068  fa03f30c          LSL      r3,r3,r12
00006c  431a              ORRS     r2,r2,r3
00006e  b2d2              UXTB     r2,r2
000070  4620              MOV      r0,r4
000072  17e3              ASRS     r3,r4,#31
000074  eb047353          ADD      r3,r4,r3,LSR #29
000078  10db              ASRS     r3,r3,#3
00007a  f80d2003          STRB     r2,[sp,r3]
                  |L4.126|
00007e  1c64              ADDS     r4,r4,#1              ;55
                  |L4.128|
000080  2c28              CMP      r4,#0x28              ;55
000082  dbcb              BLT      |L4.28|
;;;65     		}
;;;66     		delay_10ms();
000084  f7fffffe          BL       delay_10ms
;;;67     		//数据接收完成后，将PB10置位 输出模式
;;;68     		//空闲状态，电平拉高
;;;69     		ll_gpio_bit_set(GPIOB, BIT(10));
000088  f44f6180          MOV      r1,#0x400
00008c  4810              LDR      r0,|L4.208|
00008e  f7fffffe          BL       ll_gpio_bit_set
;;;70     		//检验检测数据是否正确
;;;71     		if(data[4] != (data[0] + data[1] + data[2] + data[3]))
000092  f89d0000          LDRB     r0,[sp,#0]
000096  f89d1001          LDRB     r1,[sp,#1]
00009a  4408              ADD      r0,r0,r1
00009c  f89d1002          LDRB     r1,[sp,#2]
0000a0  4408              ADD      r0,r0,r1
0000a2  f89d1003          LDRB     r1,[sp,#3]
0000a6  4408              ADD      r0,r0,r1
0000a8  f89d1004          LDRB     r1,[sp,#4]
0000ac  4288              CMP      r0,r1
0000ae  d003              BEQ      |L4.184|
;;;72     			return -1;
0000b0  f04f30ff          MOV      r0,#0xffffffff
                  |L4.180|
;;;73     		else {
;;;74     			*temp = data[2];
;;;75     			*hum = data[0];
;;;76     			return 0;
;;;77     		}
;;;78     	}
;;;79     	return -1;
;;;80     }
0000b4  e8bd81fc          POP      {r2-r8,pc}
                  |L4.184|
0000b8  f89d0002          LDRB     r0,[sp,#2]            ;74
0000bc  7028              STRB     r0,[r5,#0]            ;74
0000be  f89d0000          LDRB     r0,[sp,#0]            ;75
0000c2  7030              STRB     r0,[r6,#0]            ;75
0000c4  2000              MOVS     r0,#0                 ;76
0000c6  e7f5              B        |L4.180|
                  |L4.200|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;79
0000cc  e7f2              B        |L4.180|
                          ENDP

0000ce  0000              DCW      0x0000
                  |L4.208|
                          DCD      0x40024000

                          AREA ||i.ll_gpio_bit_set||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_set PROC
;;;300      */
;;;301    __STATIC_INLINE void ll_gpio_bit_set(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  040a              LSLS     r2,r1,#16
;;;302        p_gpio->BSRS = ((u32)pin_bits) << 16;
000002  6382              STR      r2,[r0,#0x38]
;;;303    }
000004  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i.ll_gpio_read_data_bit||, CODE, READONLY, ALIGN=1

                  ll_gpio_read_data_bit PROC
;;;322      */
;;;323    __STATIC_INLINE TYPE_ENUM_LL_GPIO_BIT_ACTION ll_gpio_read_data_bit(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  4602              MOV      r2,r0
;;;324        TYPE_ENUM_LL_GPIO_BIT_ACTION bit_status = LL_GPIO_RESET;
000002  2000              MOVS     r0,#0
;;;325        
;;;326        if ((p_gpio->DR & pin_bits) != (u32)LL_GPIO_RESET) {
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L6.14|
;;;327            bit_status = LL_GPIO_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L6.16|
                  |L6.14|
;;;328        } else {
;;;329            bit_status = LL_GPIO_RESET;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;330        }
;;;331        
;;;332        return bit_status;
;;;333    }
000010  4770              BX       lr
;;;334    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\LL\\DHT11.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_DHT11_c_e6212940____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___7_DHT11_c_e6212940____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_DHT11_c_e6212940____REVSH|
#line 474
|__asm___7_DHT11_c_e6212940____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_DHT11_c_e6212940____RRX|
#line 661
|__asm___7_DHT11_c_e6212940____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
