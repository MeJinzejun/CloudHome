; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\hw_lcd.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\hw_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\hw_lcd.crf ..\..\..\..\User\Hardware\hw_lcd.c]
                          THUMB

                          AREA ||i.HW_LCD_Init||, CODE, READONLY, ALIGN=1

                  HW_LCD_Init PROC
;;;8      
;;;9      void HW_LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11         // GPIO 初始化
;;;12         LCD_IO_Init();
000002  f7fffffe          BL       LCD_IO_Init
;;;13         // SPI 接口初始化
;;;14         LCD_SPI_Init();
000006  f7fffffe          BL       LCD_SPI_Init
;;;15     }
00000a  bd10              POP      {r4,pc}
;;;16     
                          ENDP


                          AREA ||i.HW_LCD_Reset||, CODE, READONLY, ALIGN=2

                  HW_LCD_Reset PROC
;;;16     
;;;17     void HW_LCD_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;18     {
;;;19         LCD_CTL_RST_L;
000002  2120              MOVS     r1,#0x20
000004  4806              LDR      r0,|L2.32|
000006  f7fffffe          BL       ll_gpio_bit_reset
;;;20         delay_ms(100);
00000a  2064              MOVS     r0,#0x64
00000c  f7fffffe          BL       delay_ms
;;;21         LCD_CTL_RST_H;
000010  2120              MOVS     r1,#0x20
000012  4803              LDR      r0,|L2.32|
000014  f7fffffe          BL       ll_gpio_bit_set
;;;22         delay_ms(50);
000018  2032              MOVS     r0,#0x32
00001a  f7fffffe          BL       delay_ms
;;;23     }
00001e  bd10              POP      {r4,pc}
;;;24     
                          ENDP

                  |L2.32|
                          DCD      0x40022000

                          AREA ||i.HW_LCD_SendData||, CODE, READONLY, ALIGN=2

                  HW_LCD_SendData PROC
;;;32     
;;;33     void HW_LCD_SendData(uint8_t DatVal)
000000  b501              PUSH     {r0,lr}
;;;34     {
;;;35         LCD_CTL_SPI_CS_L;
000002  2140              MOVS     r1,#0x40
000004  4807              LDR      r0,|L3.36|
000006  f7fffffe          BL       ll_gpio_bit_reset
;;;36         LCD_CTL_DC_RS_H;
00000a  2110              MOVS     r1,#0x10
00000c  4805              LDR      r0,|L3.36|
00000e  f7fffffe          BL       ll_gpio_bit_set
;;;37         LCD_SPI_Write(&DatVal, 1);
000012  2101              MOVS     r1,#1
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       LCD_SPI_Write
;;;38         LCD_CTL_SPI_CS_H;
00001a  2140              MOVS     r1,#0x40
00001c  4801              LDR      r0,|L3.36|
00001e  f7fffffe          BL       ll_gpio_bit_set
;;;39     }
000022  bd08              POP      {r3,pc}
;;;40     
                          ENDP

                  |L3.36|
                          DCD      0x40022000

                          AREA ||i.HW_LCD_SendData16Bit||, CODE, READONLY, ALIGN=2

                  HW_LCD_SendData16Bit PROC
;;;40     
;;;41     void HW_LCD_SendData16Bit(uint16_t DatVal)
000000  b538              PUSH     {r3-r5,lr}
;;;42     {
000002  4604              MOV      r4,r0
;;;43         uint8_t data = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;44         LCD_CTL_SPI_CS_L;
000008  2140              MOVS     r1,#0x40
00000a  480c              LDR      r0,|L4.60|
00000c  f7fffffe          BL       ll_gpio_bit_reset
;;;45         LCD_CTL_DC_RS_H;
000010  2110              MOVS     r1,#0x10
000012  480a              LDR      r0,|L4.60|
000014  f7fffffe          BL       ll_gpio_bit_set
;;;46         data = DatVal >> 8;
000018  1220              ASRS     r0,r4,#8
00001a  9000              STR      r0,[sp,#0]
;;;47         LCD_SPI_Write(&data, 1);
00001c  2101              MOVS     r1,#1
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       LCD_SPI_Write
;;;48         data = DatVal & 0xFF;
000024  b2e0              UXTB     r0,r4
000026  9000              STR      r0,[sp,#0]
;;;49         LCD_SPI_Write(&data, 1);
000028  2101              MOVS     r1,#1
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       LCD_SPI_Write
;;;50         LCD_CTL_SPI_CS_H;
000030  2140              MOVS     r1,#0x40
000032  4802              LDR      r0,|L4.60|
000034  f7fffffe          BL       ll_gpio_bit_set
;;;51     }
000038  bd38              POP      {r3-r5,pc}
;;;52     
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      0x40022000

                          AREA ||i.HW_LCD_SendReg||, CODE, READONLY, ALIGN=2

                  HW_LCD_SendReg PROC
;;;24     
;;;25     void HW_LCD_SendReg(uint8_t RegVal)
000000  b501              PUSH     {r0,lr}
;;;26     {
;;;27         LCD_CTL_SPI_CS_L;
000002  2140              MOVS     r1,#0x40
000004  4807              LDR      r0,|L5.36|
000006  f7fffffe          BL       ll_gpio_bit_reset
;;;28         LCD_CTL_DC_RS_L;
00000a  2110              MOVS     r1,#0x10
00000c  4805              LDR      r0,|L5.36|
00000e  f7fffffe          BL       ll_gpio_bit_reset
;;;29         LCD_SPI_Write(&RegVal, 1);
000012  2101              MOVS     r1,#1
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       LCD_SPI_Write
;;;30         LCD_CTL_SPI_CS_H;
00001a  2140              MOVS     r1,#0x40
00001c  4801              LDR      r0,|L5.36|
00001e  f7fffffe          BL       ll_gpio_bit_set
;;;31     }
000022  bd08              POP      {r3,pc}
;;;32     
                          ENDP

                  |L5.36|
                          DCD      0x40022000

                          AREA ||i.HW_LCD_WrReg||, CODE, READONLY, ALIGN=1

                  HW_LCD_WrReg PROC
;;;52     
;;;53     void HW_LCD_WrReg(uint8_t Reg, uint8_t Value)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;55         HW_LCD_SendReg(Reg);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HW_LCD_SendReg
;;;56         HW_LCD_SendData(Value);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       HW_LCD_SendData
;;;57     }
000012  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP


                          AREA ||i.LCD_IO_Init||, CODE, READONLY, ALIGN=2

                  LCD_IO_Init PROC
;;;58     
;;;59     static void LCD_IO_Init(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61         ll_gpio_dir(LCD_CTL_PORT, LCD_CTL_PIN_DC_RS, LL_GPIO_PIN_OUTPUT);
000002  2201              MOVS     r2,#1
000004  2110              MOVS     r1,#0x10
000006  4809              LDR      r0,|L7.44|
000008  f7fffffe          BL       ll_gpio_dir
;;;62         ll_gpio_dir(LCD_CTL_PORT, LCD_CTL_PIN_RST, LL_GPIO_PIN_OUTPUT);
00000c  2201              MOVS     r2,#1
00000e  2120              MOVS     r1,#0x20
000010  4806              LDR      r0,|L7.44|
000012  f7fffffe          BL       ll_gpio_dir
;;;63         LCD_CTL_SPI_CS_H;
000016  2140              MOVS     r1,#0x40
000018  4804              LDR      r0,|L7.44|
00001a  f7fffffe          BL       ll_gpio_bit_set
;;;64         ll_gpio_dir(LCD_CTL_PORT, LCD_CTL_SPI_PIN_CS, LL_GPIO_PIN_OUTPUT);
00001e  2201              MOVS     r2,#1
000020  2140              MOVS     r1,#0x40
000022  4802              LDR      r0,|L7.44|
000024  f7fffffe          BL       ll_gpio_dir
;;;65     }
000028  bd10              POP      {r4,pc}
;;;66     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40022000

                          AREA ||i.LCD_SPI_Init||, CODE, READONLY, ALIGN=2

                  LCD_SPI_Init PROC
;;;66     
;;;67     static void LCD_SPI_Init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;68     {
;;;69         TYPE_LL_SPI_INIT init;
;;;70         
;;;71         init.clk_div_cnt   = SYS_CLK/LCD_SPI_CLK/2-1;
000002  480d              LDR      r0,|L8.56|
000004  6800              LDR      r0,[r0,#0]  ; SYS_CLK
000006  490d              LDR      r1,|L8.60|
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  2101              MOVS     r1,#1
00000e  ebc10050          RSB      r0,r1,r0,LSR #1
000012  9000              STR      r0,[sp,#0]
;;;72         init.frame_size    = LL_SPI_8_BIT;
000014  2000              MOVS     r0,#0
000016  f88d0004          STRB     r0,[sp,#4]
;;;73         init.slave_mode_en = false;
00001a  f88d0006          STRB     r0,[sp,#6]
;;;74         init.spi_mode      = LL_SPI_MODE_0;
00001e  f88d0005          STRB     r0,[sp,#5]
;;;75         init.wire_mode     = LL_SPI_NORMAL_MODE;
000022  f88d0007          STRB     r0,[sp,#7]
;;;76         init.io_map        = LL_SPI0_IOMAP1;
000026  2001              MOVS     r0,#1
000028  f88d0008          STRB     r0,[sp,#8]
;;;77         ll_spi_init(SPI0, &init);
00002c  4669              MOV      r1,sp
00002e  4804              LDR      r0,|L8.64|
000030  f7fffffe          BL       ll_spi_init
;;;78     }
000034  bd0e              POP      {r1-r3,pc}
;;;79     
                          ENDP

000036  0000              DCW      0x0000
                  |L8.56|
                          DCD      SYS_CLK
                  |L8.60|
                          DCD      0x02625a00
                  |L8.64|
                          DCD      0x40006000

                          AREA ||i.LCD_SPI_Write||, CODE, READONLY, ALIGN=2

                  LCD_SPI_Write PROC
;;;79     
;;;80     static void LCD_SPI_Write(uint8_t *Buf, uint32_t Num)
000000  b510              PUSH     {r4,lr}
;;;81     {
000002  4602              MOV      r2,r0
;;;82         /* Start the tx function of the spi module */
;;;83         ll_spi_start_tx(SPI0, Num);
000004  bf00              NOP      
000006  4815              LDR      r0,|L9.92|
000008  6840              LDR      r0,[r0,#4]
00000a  f0400002          ORR      r0,r0,#2
00000e  4b13              LDR      r3,|L9.92|
000010  6058              STR      r0,[r3,#4]
000012  4618              MOV      r0,r3
000014  6201              STR      r1,[r0,#0x20]
000016  2000              MOVS     r0,#0
000018  6258              STR      r0,[r3,#0x24]
00001a  bf00              NOP      
;;;84         
;;;85         for(uint32_t i = 0; i < Num; i++) {
00001c  bf00              NOP      
00001e  e00a              B        |L9.54|
                  |L9.32|
;;;86             while(LL_SPI_GET_TX_FIFO_FULL_PENDING(SPI0));
000020  bf00              NOP      
                  |L9.34|
000022  4b0e              LDR      r3,|L9.92|
000024  68db              LDR      r3,[r3,#0xc]
000026  f0030380          AND      r3,r3,#0x80
00002a  2b00              CMP      r3,#0
00002c  d1f9              BNE      |L9.34|
;;;87             LL_SPI_WRITE_DATA(SPI0, Buf[i]);
00002e  5c13              LDRB     r3,[r2,r0]
000030  4c0a              LDR      r4,|L9.92|
000032  6123              STR      r3,[r4,#0x10]
000034  1c40              ADDS     r0,r0,#1              ;85
                  |L9.54|
000036  4288              CMP      r0,r1                 ;85
000038  d3f2              BCC      |L9.32|
;;;88         }
;;;89         /* Waiting for transmission to complete */
;;;90         while(LL_SPI_GET_BUSY_PENDING(SPI0));
00003a  bf00              NOP      
                  |L9.60|
00003c  4807              LDR      r0,|L9.92|
00003e  68c0              LDR      r0,[r0,#0xc]
000040  f0000001          AND      r0,r0,#1
000044  2800              CMP      r0,#0
000046  d1f9              BNE      |L9.60|
;;;91         /* Disable the SPI tx function */
;;;92         ll_spi_disable(SPI0);
000048  bf00              NOP      
00004a  4804              LDR      r0,|L9.92|
00004c  6840              LDR      r0,[r0,#4]
00004e  f0200003          BIC      r0,r0,#3
000052  4b02              LDR      r3,|L9.92|
000054  6058              STR      r0,[r3,#4]
000056  bf00              NOP      
;;;93     }
000058  bd10              POP      {r4,pc}
;;;94     
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      0x40006000

                          AREA ||i.ll_gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_reset PROC
;;;311      */
;;;312    __STATIC_INLINE void ll_gpio_bit_reset(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  b28a              UXTH     r2,r1
;;;313        p_gpio->BSRS = ((u32)pin_bits) & 0xFFFF;
000002  6382              STR      r2,[r0,#0x38]
;;;314    }
000004  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.ll_gpio_bit_set||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_set PROC
;;;300      */
;;;301    __STATIC_INLINE void ll_gpio_bit_set(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  040a              LSLS     r2,r1,#16
;;;302        p_gpio->BSRS = ((u32)pin_bits) << 16;
000002  6382              STR      r2,[r0,#0x38]
;;;303    }
000004  4770              BX       lr
;;;304    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\Hardware\\hw_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_hw_lcd_c_937666a0____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___8_hw_lcd_c_937666a0____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_hw_lcd_c_937666a0____REVSH|
#line 474
|__asm___8_hw_lcd_c_937666a0____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_hw_lcd_c_937666a0____RRX|
#line 661
|__asm___8_hw_lcd_c_937666a0____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
