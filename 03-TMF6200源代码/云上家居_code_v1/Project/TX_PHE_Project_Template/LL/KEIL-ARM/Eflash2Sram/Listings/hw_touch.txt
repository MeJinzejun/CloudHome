; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\eflash2sram\objects\hw_touch.o --asm_dir=.\Eflash2Sram\Listings\ --list_dir=.\Eflash2Sram\Listings\ --depend=.\eflash2sram\objects\hw_touch.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\Libraries\CMSIS\DSP\Include -I..\..\..\..\Libraries\CMSIS\Core\Include -I..\..\..\..\Libraries\Device\Phoenix\include -I..\..\..\..\Libraries\Protocol\Modbus\include -I..\..\..\..\Libraries\Protocol\Modbus\port -I..\..\..\..\Libraries\Protocol\ -I..\..\..\..\User\LL -I..\..\..\..\Libraries\Driver\include -I..\..\..\..\Libraries\Driver\include\LL -I..\..\..\..\User\Hardware -I..\..\..\..\User\ThirdDrivers -I.\RTE\_Eflash2Sram -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\Tools\KIEIL\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DARMCM3 -DEFLASH2SRAM --omf_browse=.\eflash2sram\objects\hw_touch.crf ..\..\..\..\User\Hardware\hw_touch.c]
                          THUMB

                          AREA ||i.TP_Adj_Info_Show||, CODE, READONLY, ALIGN=2

                  TP_Adj_Info_Show PROC
;;;284    ******************************************************************************/
;;;285    void TP_Adj_Info_Show(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 x3, u16 y3, u16 fac)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;286    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
00000c  e9ddab0c          LDRD     r10,r11,[sp,#0x30]
000010  e9dd890a          LDRD     r8,r9,[sp,#0x28]
;;;287        POINT_COLOR = RED;
000014  f44f4078          MOV      r0,#0xf800
000018  4949              LDR      r1,|L1.320|
00001a  8008              STRH     r0,[r1,#0]
;;;288        LCD_ShowString(40, 140, 16, "x1:", 1);
00001c  2001              MOVS     r0,#1
00001e  a349              ADR      r3,|L1.324|
000020  2210              MOVS     r2,#0x10
000022  218c              MOVS     r1,#0x8c
000024  9000              STR      r0,[sp,#0]
000026  2028              MOVS     r0,#0x28
000028  f7fffffe          BL       LCD_ShowString
;;;289        LCD_ShowString(40 + 80, 140, 16, "y1:", 1);
00002c  2001              MOVS     r0,#1
00002e  a346              ADR      r3,|L1.328|
000030  2210              MOVS     r2,#0x10
000032  218c              MOVS     r1,#0x8c
000034  9000              STR      r0,[sp,#0]
000036  2078              MOVS     r0,#0x78
000038  f7fffffe          BL       LCD_ShowString
;;;290        LCD_ShowString(40, 160, 16, "x2:", 1);
00003c  2001              MOVS     r0,#1
00003e  a343              ADR      r3,|L1.332|
000040  2210              MOVS     r2,#0x10
000042  21a0              MOVS     r1,#0xa0
000044  9000              STR      r0,[sp,#0]
000046  2028              MOVS     r0,#0x28
000048  f7fffffe          BL       LCD_ShowString
;;;291        LCD_ShowString(40 + 80, 160, 16, "y2:", 1);
00004c  2001              MOVS     r0,#1
00004e  a340              ADR      r3,|L1.336|
000050  2210              MOVS     r2,#0x10
000052  21a0              MOVS     r1,#0xa0
000054  9000              STR      r0,[sp,#0]
000056  2078              MOVS     r0,#0x78
000058  f7fffffe          BL       LCD_ShowString
;;;292        LCD_ShowString(40, 180, 16, "x3:", 1);
00005c  2001              MOVS     r0,#1
00005e  a33d              ADR      r3,|L1.340|
000060  2210              MOVS     r2,#0x10
000062  21b4              MOVS     r1,#0xb4
000064  9000              STR      r0,[sp,#0]
000066  2028              MOVS     r0,#0x28
000068  f7fffffe          BL       LCD_ShowString
;;;293        LCD_ShowString(40 + 80, 180, 16, "y3:", 1);
00006c  2001              MOVS     r0,#1
00006e  a33a              ADR      r3,|L1.344|
000070  2210              MOVS     r2,#0x10
000072  21b4              MOVS     r1,#0xb4
000074  9000              STR      r0,[sp,#0]
000076  2078              MOVS     r0,#0x78
000078  f7fffffe          BL       LCD_ShowString
;;;294        LCD_ShowString(40, 200, 16, "x4:", 1);
00007c  2001              MOVS     r0,#1
00007e  a337              ADR      r3,|L1.348|
000080  2210              MOVS     r2,#0x10
000082  21c8              MOVS     r1,#0xc8
000084  9000              STR      r0,[sp,#0]
000086  2028              MOVS     r0,#0x28
000088  f7fffffe          BL       LCD_ShowString
;;;295        LCD_ShowString(40 + 80, 200, 16, "y4:", 1);
00008c  2001              MOVS     r0,#1
00008e  a334              ADR      r3,|L1.352|
000090  2210              MOVS     r2,#0x10
000092  21c8              MOVS     r1,#0xc8
000094  9000              STR      r0,[sp,#0]
000096  2078              MOVS     r0,#0x78
000098  f7fffffe          BL       LCD_ShowString
;;;296        LCD_ShowString(40, 220, 16, "fac is:", 1);
00009c  2001              MOVS     r0,#1
00009e  a331              ADR      r3,|L1.356|
0000a0  2210              MOVS     r2,#0x10
0000a2  21dc              MOVS     r1,#0xdc
0000a4  9000              STR      r0,[sp,#0]
0000a6  2028              MOVS     r0,#0x28
0000a8  f7fffffe          BL       LCD_ShowString
;;;297        LCD_ShowNum(40 + 24, 140, x0, 4, 16); //显示数值
0000ac  2010              MOVS     r0,#0x10
0000ae  2304              MOVS     r3,#4
0000b0  4622              MOV      r2,r4
0000b2  218c              MOVS     r1,#0x8c
0000b4  9000              STR      r0,[sp,#0]
0000b6  2040              MOVS     r0,#0x40
0000b8  f7fffffe          BL       LCD_ShowNum
;;;298        LCD_ShowNum(40 + 24 + 80, 140, y0, 4, 16); //显示数值
0000bc  2010              MOVS     r0,#0x10
0000be  2304              MOVS     r3,#4
0000c0  462a              MOV      r2,r5
0000c2  218c              MOVS     r1,#0x8c
0000c4  9000              STR      r0,[sp,#0]
0000c6  2090              MOVS     r0,#0x90
0000c8  f7fffffe          BL       LCD_ShowNum
;;;299        LCD_ShowNum(40 + 24, 160, x1, 4, 16); //显示数值
0000cc  2010              MOVS     r0,#0x10
0000ce  2304              MOVS     r3,#4
0000d0  463a              MOV      r2,r7
0000d2  21a0              MOVS     r1,#0xa0
0000d4  9000              STR      r0,[sp,#0]
0000d6  2040              MOVS     r0,#0x40
0000d8  f7fffffe          BL       LCD_ShowNum
;;;300        LCD_ShowNum(40 + 24 + 80, 160, y1, 4, 16); //显示数值
0000dc  2010              MOVS     r0,#0x10
0000de  2304              MOVS     r3,#4
0000e0  4632              MOV      r2,r6
0000e2  21a0              MOVS     r1,#0xa0
0000e4  9000              STR      r0,[sp,#0]
0000e6  2090              MOVS     r0,#0x90
0000e8  f7fffffe          BL       LCD_ShowNum
;;;301        LCD_ShowNum(40 + 24, 180, x2, 4, 16); //显示数值
0000ec  2010              MOVS     r0,#0x10
0000ee  2304              MOVS     r3,#4
0000f0  4642              MOV      r2,r8
0000f2  21b4              MOVS     r1,#0xb4
0000f4  9000              STR      r0,[sp,#0]
0000f6  2040              MOVS     r0,#0x40
0000f8  f7fffffe          BL       LCD_ShowNum
;;;302        LCD_ShowNum(40 + 24 + 80, 180, y2, 4, 16); //显示数值
0000fc  2010              MOVS     r0,#0x10
0000fe  2304              MOVS     r3,#4
000100  464a              MOV      r2,r9
000102  21b4              MOVS     r1,#0xb4
000104  9000              STR      r0,[sp,#0]
000106  2090              MOVS     r0,#0x90
000108  f7fffffe          BL       LCD_ShowNum
;;;303        LCD_ShowNum(40 + 24, 200, x3, 4, 16); //显示数值
00010c  2010              MOVS     r0,#0x10
00010e  2304              MOVS     r3,#4
000110  4652              MOV      r2,r10
000112  21c8              MOVS     r1,#0xc8
000114  9000              STR      r0,[sp,#0]
000116  2040              MOVS     r0,#0x40
000118  f7fffffe          BL       LCD_ShowNum
;;;304        LCD_ShowNum(40 + 24 + 80, 200, y3, 4, 16); //显示数值
00011c  2010              MOVS     r0,#0x10
00011e  2304              MOVS     r3,#4
000120  465a              MOV      r2,r11
000122  21c8              MOVS     r1,#0xc8
000124  9000              STR      r0,[sp,#0]
000126  2090              MOVS     r0,#0x90
000128  f7fffffe          BL       LCD_ShowNum
;;;305        LCD_ShowNum(40 + 56, 220, fac, 3, 16); //显示数值,该数值必须在95~105范围之内.
00012c  2010              MOVS     r0,#0x10
00012e  2303              MOVS     r3,#3
000130  9000              STR      r0,[sp,#0]
000132  21dc              MOVS     r1,#0xdc
000134  2060              MOVS     r0,#0x60
000136  9a0e              LDR      r2,[sp,#0x38]
000138  f7fffffe          BL       LCD_ShowNum
;;;306    }
00013c  e8bd8ff8          POP      {r3-r11,pc}
;;;307    
                          ENDP

                  |L1.320|
                          DCD      POINT_COLOR
                  |L1.324|
000144  78313a00          DCB      "x1:",0
                  |L1.328|
000148  79313a00          DCB      "y1:",0
                  |L1.332|
00014c  78323a00          DCB      "x2:",0
                  |L1.336|
000150  79323a00          DCB      "y2:",0
                  |L1.340|
000154  78333a00          DCB      "x3:",0
                  |L1.344|
000158  79333a00          DCB      "y3:",0
                  |L1.348|
00015c  78343a00          DCB      "x4:",0
                  |L1.352|
000160  79343a00          DCB      "y4:",0
                  |L1.356|
000164  66616320          DCB      "fac is:",0
000168  69733a00

                          AREA ||i.TP_Adjust||, CODE, READONLY, ALIGN=2

                  TP_Adjust PROC
;;;314    ******************************************************************************/
;;;315    void TP_Adjust(void)
000000  b500              PUSH     {lr}
;;;316    {
000002  b095              SUB      sp,sp,#0x54
;;;317        u16 pos_temp[4][2];//坐标缓存值
;;;318        u8  cnt = 0;
000004  2000              MOVS     r0,#0
000006  9010              STR      r0,[sp,#0x40]
;;;319        u16 d1, d2;
;;;320        u32 tem1, tem2;
;;;321        float fac;
;;;322        u16 outtime = 0;
000008  900a              STR      r0,[sp,#0x28]
;;;323        cnt = 0;
00000a  9010              STR      r0,[sp,#0x40]
;;;324        POINT_COLOR = BLUE;
00000c  201f              MOVS     r0,#0x1f
00000e  49fa              LDR      r1,|L2.1016|
000010  8008              STRH     r0,[r1,#0]
;;;325        BACK_COLOR = WHITE;
000012  f64f70ff          MOV      r0,#0xffff
000016  49f9              LDR      r1,|L2.1020|
000018  8008              STRH     r0,[r1,#0]
;;;326        LCD_Clear(WHITE);//清屏
00001a  f7fffffe          BL       LCD_Clear
;;;327        POINT_COLOR = RED; //红色
00001e  f44f4078          MOV      r0,#0xf800
000022  49f5              LDR      r1,|L2.1016|
000024  8008              STRH     r0,[r1,#0]
;;;328        LCD_Clear(WHITE);//清屏
000026  f64f70ff          MOV      r0,#0xffff
00002a  f7fffffe          BL       LCD_Clear
;;;329        POINT_COLOR = BLACK;
00002e  2000              MOVS     r0,#0
000030  49f1              LDR      r1,|L2.1016|
000032  8008              STRH     r0,[r1,#0]
;;;330        LCD_ShowString(10, 40, 16, "Please use the stylus click", 1); //显示提示信息
000034  2001              MOVS     r0,#1
000036  a3f2              ADR      r3,|L2.1024|
000038  2210              MOVS     r2,#0x10
00003a  2128              MOVS     r1,#0x28
00003c  9000              STR      r0,[sp,#0]
00003e  200a              MOVS     r0,#0xa
000040  f7fffffe          BL       LCD_ShowString
;;;331        LCD_ShowString(10, 56, 16, "the cross on the screen.", 1); //显示提示信息
000044  2001              MOVS     r0,#1
000046  a3f5              ADR      r3,|L2.1052|
000048  2210              MOVS     r2,#0x10
00004a  2138              MOVS     r1,#0x38
00004c  9000              STR      r0,[sp,#0]
00004e  200a              MOVS     r0,#0xa
000050  f7fffffe          BL       LCD_ShowString
;;;332        LCD_ShowString(10, 72, 16, "The cross will always move", 1); //显示提示信息
000054  2001              MOVS     r0,#1
000056  a3f8              ADR      r3,|L2.1080|
000058  2210              MOVS     r2,#0x10
00005a  2148              MOVS     r1,#0x48
00005c  9000              STR      r0,[sp,#0]
00005e  200a              MOVS     r0,#0xa
000060  f7fffffe          BL       LCD_ShowString
;;;333        LCD_ShowString(10, 88, 16, "until the screen adjustment", 1); //显示提示信息
000064  2001              MOVS     r0,#1
000066  a3fb              ADR      r3,|L2.1108|
000068  2210              MOVS     r2,#0x10
00006a  2158              MOVS     r1,#0x58
00006c  9000              STR      r0,[sp,#0]
00006e  200a              MOVS     r0,#0xa
000070  f7fffffe          BL       LCD_ShowString
;;;334        LCD_ShowString(10, 104, 16, "is completed.", 1); //显示提示信息
000074  2001              MOVS     r0,#1
000076  a3fe              ADR      r3,|L2.1136|
000078  2210              MOVS     r2,#0x10
00007a  2168              MOVS     r1,#0x68
00007c  9000              STR      r0,[sp,#0]
00007e  200a              MOVS     r0,#0xa
000080  f7fffffe          BL       LCD_ShowString
;;;335    
;;;336        TP_Drow_Touch_Point(20, 20, RED); //画点1
000084  f44f4278          MOV      r2,#0xf800
000088  2114              MOVS     r1,#0x14
00008a  4608              MOV      r0,r1
00008c  f7fffffe          BL       TP_Drow_Touch_Point
;;;337        tp_dev.sta = 0; //消除触发信号
000090  2000              MOVS     r0,#0
000092  49fb              LDR      r1,|L2.1152|
000094  7508              STRB     r0,[r1,#0x14]
;;;338        tp_dev.xfac = 0; //xfac用来标记是否校准过,所以校准之前必须清掉!以免错误
000096  6188              STR      r0,[r1,#0x18]  ; tp_dev
;;;339    
;;;340        while (1) { //如果连续10秒钟没有按下,则自动退出
000098  e241              B        |L2.1310|
                  |L2.154|
;;;341            tp_dev.scan(1);//扫描物理坐标
00009a  48f9              LDR      r0,|L2.1152|
00009c  6840              LDR      r0,[r0,#4]  ; tp_dev
00009e  9009              STR      r0,[sp,#0x24]
0000a0  2001              MOVS     r0,#1
0000a2  9909              LDR      r1,[sp,#0x24]
0000a4  4788              BLX      r1
;;;342    
;;;343            if ((tp_dev.sta & 0xc0) == TP_CATH_PRES) { //按键按下了一次(此时按键松开了.)
0000a6  48f6              LDR      r0,|L2.1152|
0000a8  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000aa  f00000c0          AND      r0,r0,#0xc0
0000ae  2840              CMP      r0,#0x40
0000b0  d17a              BNE      |L2.424|
;;;344                outtime = 0;
0000b2  2000              MOVS     r0,#0
0000b4  900a              STR      r0,[sp,#0x28]
;;;345                tp_dev.sta &= ~(1 << 6); //标记按键已经被处理过了.
0000b6  48f2              LDR      r0,|L2.1152|
0000b8  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000ba  f0200040          BIC      r0,r0,#0x40
0000be  49f0              LDR      r1,|L2.1152|
0000c0  7508              STRB     r0,[r1,#0x14]
;;;346    
;;;347                pos_temp[cnt][0] = tp_dev.x;
0000c2  4608              MOV      r0,r1
0000c4  8a01              LDRH     r1,[r0,#0x10]  ; tp_dev
0000c6  aa11              ADD      r2,sp,#0x44
0000c8  9810              LDR      r0,[sp,#0x40]
0000ca  f8221020          STRH     r1,[r2,r0,LSL #2]
;;;348                pos_temp[cnt][1] = tp_dev.y;
0000ce  48ec              LDR      r0,|L2.1152|
0000d0  8a41              LDRH     r1,[r0,#0x12]  ; tp_dev
0000d2  9810              LDR      r0,[sp,#0x40]
0000d4  eb020080          ADD      r0,r2,r0,LSL #2
0000d8  8041              STRH     r1,[r0,#2]
;;;349                cnt++;
0000da  9810              LDR      r0,[sp,#0x40]
0000dc  1c40              ADDS     r0,r0,#1
0000de  b2c0              UXTB     r0,r0
0000e0  9010              STR      r0,[sp,#0x40]
;;;350    
;;;351                switch (cnt) {
0000e2  9810              LDR      r0,[sp,#0x40]
0000e4  2801              CMP      r0,#1
0000e6  d006              BEQ      |L2.246|
0000e8  2802              CMP      r0,#2
0000ea  d015              BEQ      |L2.280|
0000ec  2803              CMP      r0,#3
0000ee  d029              BEQ      |L2.324|
0000f0  2804              CMP      r0,#4
0000f2  d110              BNE      |L2.278|
0000f4  e041              B        |L2.378|
                  |L2.246|
;;;352                    case 1:
;;;353                        TP_Drow_Touch_Point(20, 20, WHITE);             //清除点1
0000f6  f64f72ff          MOV      r2,#0xffff
0000fa  2114              MOVS     r1,#0x14
0000fc  4608              MOV      r0,r1
0000fe  f7fffffe          BL       TP_Drow_Touch_Point
;;;354                        TP_Drow_Touch_Point(lcddev.width - 20, 20, RED); //画点2
000102  48e0              LDR      r0,|L2.1156|
000104  8800              LDRH     r0,[r0,#0]  ; lcddev
000106  3814              SUBS     r0,r0,#0x14
000108  b280              UXTH     r0,r0
00010a  f44f4278          MOV      r2,#0xf800
00010e  2114              MOVS     r1,#0x14
000110  9009              STR      r0,[sp,#0x24]
000112  f7fffffe          BL       TP_Drow_Touch_Point
                  |L2.278|
;;;355                        break;
000116  e3df              B        |L2.2264|
                  |L2.280|
;;;356    
;;;357                    case 2:
;;;358                        TP_Drow_Touch_Point(lcddev.width - 20, 20, WHITE); //清除点2
000118  48da              LDR      r0,|L2.1156|
00011a  8800              LDRH     r0,[r0,#0]  ; lcddev
00011c  3814              SUBS     r0,r0,#0x14
00011e  b280              UXTH     r0,r0
000120  f64f72ff          MOV      r2,#0xffff
000124  2114              MOVS     r1,#0x14
000126  9009              STR      r0,[sp,#0x24]
000128  f7fffffe          BL       TP_Drow_Touch_Point
;;;359                        TP_Drow_Touch_Point(20, lcddev.height - 20, RED); //画点3
00012c  48d5              LDR      r0,|L2.1156|
00012e  8840              LDRH     r0,[r0,#2]  ; lcddev
000130  3814              SUBS     r0,r0,#0x14
000132  b280              UXTH     r0,r0
000134  f44f4278          MOV      r2,#0xf800
000138  4601              MOV      r1,r0
00013a  9009              STR      r0,[sp,#0x24]
00013c  2014              MOVS     r0,#0x14
00013e  f7fffffe          BL       TP_Drow_Touch_Point
;;;360                        break;
000142  e3c9              B        |L2.2264|
                  |L2.324|
;;;361    
;;;362                    case 3:
;;;363                        TP_Drow_Touch_Point(20, lcddev.height - 20, WHITE);     //清除点3
000144  48cf              LDR      r0,|L2.1156|
000146  8840              LDRH     r0,[r0,#2]  ; lcddev
000148  3814              SUBS     r0,r0,#0x14
00014a  b280              UXTH     r0,r0
00014c  f64f72ff          MOV      r2,#0xffff
000150  4601              MOV      r1,r0
000152  9009              STR      r0,[sp,#0x24]
000154  2014              MOVS     r0,#0x14
000156  f7fffffe          BL       TP_Drow_Touch_Point
;;;364                        TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, RED); //画点4
00015a  48ca              LDR      r0,|L2.1156|
00015c  8840              LDRH     r0,[r0,#2]  ; lcddev
00015e  3814              SUBS     r0,r0,#0x14
000160  b280              UXTH     r0,r0
000162  9009              STR      r0,[sp,#0x24]
000164  48c7              LDR      r0,|L2.1156|
000166  8800              LDRH     r0,[r0,#0]  ; lcddev
000168  3814              SUBS     r0,r0,#0x14
00016a  b280              UXTH     r0,r0
00016c  f44f4278          MOV      r2,#0xf800
000170  9008              STR      r0,[sp,#0x20]
000172  9909              LDR      r1,[sp,#0x24]
000174  f7fffffe          BL       TP_Drow_Touch_Point
;;;365                        break;
000178  e3ae              B        |L2.2264|
                  |L2.378|
;;;366    
;;;367                    case 4:  //全部四个点已经得到
;;;368                        //对边相等
;;;369                        tem1 = abs(pos_temp[0][0] - pos_temp[1][0]); //x1-x2
00017a  f8bd0044          LDRH     r0,[sp,#0x44]
00017e  f8bd1048          LDRH     r1,[sp,#0x48]
000182  1a40              SUBS     r0,r0,r1
000184  9009              STR      r0,[sp,#0x24]
000186  2800              CMP      r0,#0
000188  db01              BLT      |L2.398|
00018a  9809              LDR      r0,[sp,#0x24]
00018c  e001              B        |L2.402|
                  |L2.398|
00018e  9809              LDR      r0,[sp,#0x24]
000190  4240              RSBS     r0,r0,#0
                  |L2.402|
000192  900d              STR      r0,[sp,#0x34]
;;;370                        tem2 = abs(pos_temp[0][1] - pos_temp[1][1]); //y1-y2
000194  f8bd1046          LDRH     r1,[sp,#0x46]
000198  a811              ADD      r0,sp,#0x44
00019a  88c0              LDRH     r0,[r0,#6]
00019c  1a08              SUBS     r0,r1,r0
00019e  9009              STR      r0,[sp,#0x24]
0001a0  2800              CMP      r0,#0
0001a2  db02              BLT      |L2.426|
0001a4  9809              LDR      r0,[sp,#0x24]
0001a6  e002              B        |L2.430|
                  |L2.424|
0001a8  e397              B        |L2.2266|
                  |L2.426|
0001aa  9809              LDR      r0,[sp,#0x24]
0001ac  4240              RSBS     r0,r0,#0
                  |L2.430|
0001ae  900c              STR      r0,[sp,#0x30]
;;;371                        tem1 *= tem1;
0001b0  980d              LDR      r0,[sp,#0x34]
0001b2  4340              MULS     r0,r0,r0
0001b4  900d              STR      r0,[sp,#0x34]
;;;372                        tem2 *= tem2;
0001b6  980c              LDR      r0,[sp,#0x30]
0001b8  4340              MULS     r0,r0,r0
0001ba  900c              STR      r0,[sp,#0x30]
;;;373                        d1 = sqrt(tem1 + tem2); //得到1,2的距离
0001bc  e9dd100c          LDRD     r1,r0,[sp,#0x30]
0001c0  4408              ADD      r0,r0,r1
0001c2  9005              STR      r0,[sp,#0x14]
0001c4  f7fffffe          BL       __aeabi_ui2d
0001c8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0001cc  f7fffffe          BL       sqrt
0001d0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0001d4  f7fffffe          BL       __aeabi_d2uiz
0001d8  b280              UXTH     r0,r0
0001da  900f              STR      r0,[sp,#0x3c]
;;;374    
;;;375                        tem1 = abs(pos_temp[2][0] - pos_temp[3][0]); //x3-x4
0001dc  f8bd004c          LDRH     r0,[sp,#0x4c]
0001e0  f8bd1050          LDRH     r1,[sp,#0x50]
0001e4  1a40              SUBS     r0,r0,r1
0001e6  9009              STR      r0,[sp,#0x24]
0001e8  2800              CMP      r0,#0
0001ea  db01              BLT      |L2.496|
0001ec  9809              LDR      r0,[sp,#0x24]
0001ee  e001              B        |L2.500|
                  |L2.496|
0001f0  9809              LDR      r0,[sp,#0x24]
0001f2  4240              RSBS     r0,r0,#0
                  |L2.500|
0001f4  900d              STR      r0,[sp,#0x34]
;;;376                        tem2 = abs(pos_temp[2][1] - pos_temp[3][1]); //y3-y4
0001f6  a811              ADD      r0,sp,#0x44
0001f8  8941              LDRH     r1,[r0,#0xa]
0001fa  89c0              LDRH     r0,[r0,#0xe]
0001fc  1a08              SUBS     r0,r1,r0
0001fe  9009              STR      r0,[sp,#0x24]
000200  2800              CMP      r0,#0
000202  db01              BLT      |L2.520|
000204  9809              LDR      r0,[sp,#0x24]
000206  e001              B        |L2.524|
                  |L2.520|
000208  9809              LDR      r0,[sp,#0x24]
00020a  4240              RSBS     r0,r0,#0
                  |L2.524|
00020c  900c              STR      r0,[sp,#0x30]
;;;377                        tem1 *= tem1;
00020e  980d              LDR      r0,[sp,#0x34]
000210  4340              MULS     r0,r0,r0
000212  900d              STR      r0,[sp,#0x34]
;;;378                        tem2 *= tem2;
000214  980c              LDR      r0,[sp,#0x30]
000216  4340              MULS     r0,r0,r0
000218  900c              STR      r0,[sp,#0x30]
;;;379                        d2 = sqrt(tem1 + tem2); //得到3,4的距离
00021a  e9dd100c          LDRD     r1,r0,[sp,#0x30]
00021e  4408              ADD      r0,r0,r1
000220  9005              STR      r0,[sp,#0x14]
000222  f7fffffe          BL       __aeabi_ui2d
000226  e9cd0106          STRD     r0,r1,[sp,#0x18]
00022a  f7fffffe          BL       sqrt
00022e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000232  f7fffffe          BL       __aeabi_d2uiz
000236  b280              UXTH     r0,r0
000238  900e              STR      r0,[sp,#0x38]
;;;380                        fac = (float)d1 / d2;
00023a  980e              LDR      r0,[sp,#0x38]
00023c  f7fffffe          BL       __aeabi_ui2f
000240  9009              STR      r0,[sp,#0x24]
000242  980f              LDR      r0,[sp,#0x3c]
000244  f7fffffe          BL       __aeabi_ui2f
000248  9008              STR      r0,[sp,#0x20]
00024a  9909              LDR      r1,[sp,#0x24]
00024c  f7fffffe          BL       __aeabi_fdiv
000250  900b              STR      r0,[sp,#0x2c]
;;;381    
;;;382                        if (fac < 0.95 || fac > 1.05 || d1 == 0 || d2 == 0) { //不合格
000252  980b              LDR      r0,[sp,#0x2c]
000254  f7fffffe          BL       __aeabi_f2d
000258  f04f3266          MOV      r2,#0x66666666
00025c  4b8a              LDR      r3,|L2.1160|
00025e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000262  f7fffffe          BL       __aeabi_cdcmple
000266  d30d              BCC      |L2.644|
000268  980b              LDR      r0,[sp,#0x2c]
00026a  f7fffffe          BL       __aeabi_f2d
00026e  4a87              LDR      r2,|L2.1164|
000270  4b87              LDR      r3,|L2.1168|
000272  e9cd0108          STRD     r0,r1,[sp,#0x20]
000276  f7fffffe          BL       __aeabi_cdrcmple
00027a  d303              BCC      |L2.644|
00027c  980f              LDR      r0,[sp,#0x3c]
00027e  b108              CBZ      r0,|L2.644|
000280  980e              LDR      r0,[sp,#0x38]
000282  bbe8              CBNZ     r0,|L2.768|
                  |L2.644|
;;;383                            cnt = 0;
000284  2000              MOVS     r0,#0
000286  9010              STR      r0,[sp,#0x40]
;;;384                            TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
000288  487e              LDR      r0,|L2.1156|
00028a  8840              LDRH     r0,[r0,#2]  ; lcddev
00028c  3814              SUBS     r0,r0,#0x14
00028e  b280              UXTH     r0,r0
000290  9009              STR      r0,[sp,#0x24]
000292  487c              LDR      r0,|L2.1156|
000294  8800              LDRH     r0,[r0,#0]  ; lcddev
000296  3814              SUBS     r0,r0,#0x14
000298  b280              UXTH     r0,r0
00029a  f64f72ff          MOV      r2,#0xffff
00029e  9008              STR      r0,[sp,#0x20]
0002a0  9909              LDR      r1,[sp,#0x24]
0002a2  f7fffffe          BL       TP_Drow_Touch_Point
;;;385                            TP_Drow_Touch_Point(20, 20, RED);                           //画点1
0002a6  f44f4278          MOV      r2,#0xf800
0002aa  2114              MOVS     r1,#0x14
0002ac  4608              MOV      r0,r1
0002ae  f7fffffe          BL       TP_Drow_Touch_Point
;;;386                            TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1],
0002b2  4978              LDR      r1,|L2.1172|
0002b4  980b              LDR      r0,[sp,#0x2c]
0002b6  f7fffffe          BL       __aeabi_fmul
0002ba  9008              STR      r0,[sp,#0x20]
0002bc  f7fffffe          BL       __aeabi_f2uiz
0002c0  b280              UXTH     r0,r0
0002c2  a911              ADD      r1,sp,#0x44
0002c4  9009              STR      r0,[sp,#0x24]
0002c6  89c9              LDRH     r1,[r1,#0xe]
0002c8  f8bd2050          LDRH     r2,[sp,#0x50]
0002cc  ab11              ADD      r3,sp,#0x44
0002ce  895b              LDRH     r3,[r3,#0xa]
0002d0  e9cd3201          STRD     r3,r2,[sp,#4]
0002d4  e9cd1003          STRD     r1,r0,[sp,#0xc]
0002d8  f8bd004c          LDRH     r0,[sp,#0x4c]
0002dc  9000              STR      r0,[sp,#0]
0002de  a811              ADD      r0,sp,#0x44
0002e0  88c0              LDRH     r0,[r0,#6]
0002e2  9008              STR      r0,[sp,#0x20]
0002e4  f8bd0048          LDRH     r0,[sp,#0x48]
0002e8  9007              STR      r0,[sp,#0x1c]
0002ea  f8bd0046          LDRH     r0,[sp,#0x46]
0002ee  9006              STR      r0,[sp,#0x18]
0002f0  f8bd0044          LDRH     r0,[sp,#0x44]
0002f4  9005              STR      r0,[sp,#0x14]
0002f6  a906              ADD      r1,sp,#0x18
0002f8  c90e              LDM      r1,{r1-r3}
0002fa  f7fffffe          BL       TP_Adj_Info_Show
;;;387                                             pos_temp[1][0], pos_temp[1][1],
;;;388                                             pos_temp[2][0], pos_temp[2][1],
;;;389                                             pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
;;;390                            continue;
0002fe  e2f4              B        |L2.2282|
                  |L2.768|
000300  e7ff              B        |L2.770|
                  |L2.770|
;;;391                        }
;;;392    
;;;393                        tem1 = abs(pos_temp[0][0] - pos_temp[2][0]); //x1-x3
000302  f8bd0044          LDRH     r0,[sp,#0x44]
000306  f8bd104c          LDRH     r1,[sp,#0x4c]
00030a  1a40              SUBS     r0,r0,r1
00030c  9009              STR      r0,[sp,#0x24]
00030e  2800              CMP      r0,#0
000310  db01              BLT      |L2.790|
000312  9809              LDR      r0,[sp,#0x24]
000314  e001              B        |L2.794|
                  |L2.790|
000316  9809              LDR      r0,[sp,#0x24]
000318  4240              RSBS     r0,r0,#0
                  |L2.794|
00031a  900d              STR      r0,[sp,#0x34]
;;;394                        tem2 = abs(pos_temp[0][1] - pos_temp[2][1]); //y1-y3
00031c  f8bd1046          LDRH     r1,[sp,#0x46]
000320  a811              ADD      r0,sp,#0x44
000322  8940              LDRH     r0,[r0,#0xa]
000324  1a08              SUBS     r0,r1,r0
000326  9009              STR      r0,[sp,#0x24]
000328  2800              CMP      r0,#0
00032a  db01              BLT      |L2.816|
00032c  9809              LDR      r0,[sp,#0x24]
00032e  e001              B        |L2.820|
                  |L2.816|
000330  9809              LDR      r0,[sp,#0x24]
000332  4240              RSBS     r0,r0,#0
                  |L2.820|
000334  900c              STR      r0,[sp,#0x30]
;;;395                        tem1 *= tem1;
000336  980d              LDR      r0,[sp,#0x34]
000338  4340              MULS     r0,r0,r0
00033a  900d              STR      r0,[sp,#0x34]
;;;396                        tem2 *= tem2;
00033c  980c              LDR      r0,[sp,#0x30]
00033e  4340              MULS     r0,r0,r0
000340  900c              STR      r0,[sp,#0x30]
;;;397                        d1 = sqrt(tem1 + tem2); //得到1,3的距离
000342  e9dd100c          LDRD     r1,r0,[sp,#0x30]
000346  4408              ADD      r0,r0,r1
000348  9005              STR      r0,[sp,#0x14]
00034a  f7fffffe          BL       __aeabi_ui2d
00034e  e9cd0106          STRD     r0,r1,[sp,#0x18]
000352  f7fffffe          BL       sqrt
000356  e9cd0108          STRD     r0,r1,[sp,#0x20]
00035a  f7fffffe          BL       __aeabi_d2uiz
00035e  b280              UXTH     r0,r0
000360  900f              STR      r0,[sp,#0x3c]
;;;398    
;;;399                        tem1 = abs(pos_temp[1][0] - pos_temp[3][0]); //x2-x4
000362  f8bd0048          LDRH     r0,[sp,#0x48]
000366  f8bd1050          LDRH     r1,[sp,#0x50]
00036a  1a40              SUBS     r0,r0,r1
00036c  9009              STR      r0,[sp,#0x24]
00036e  2800              CMP      r0,#0
000370  db01              BLT      |L2.886|
000372  9809              LDR      r0,[sp,#0x24]
000374  e001              B        |L2.890|
                  |L2.886|
000376  9809              LDR      r0,[sp,#0x24]
000378  4240              RSBS     r0,r0,#0
                  |L2.890|
00037a  900d              STR      r0,[sp,#0x34]
;;;400                        tem2 = abs(pos_temp[1][1] - pos_temp[3][1]); //y2-y4
00037c  a811              ADD      r0,sp,#0x44
00037e  88c1              LDRH     r1,[r0,#6]
000380  89c0              LDRH     r0,[r0,#0xe]
000382  1a08              SUBS     r0,r1,r0
000384  9009              STR      r0,[sp,#0x24]
000386  2800              CMP      r0,#0
000388  db01              BLT      |L2.910|
00038a  9809              LDR      r0,[sp,#0x24]
00038c  e001              B        |L2.914|
                  |L2.910|
00038e  9809              LDR      r0,[sp,#0x24]
000390  4240              RSBS     r0,r0,#0
                  |L2.914|
000392  900c              STR      r0,[sp,#0x30]
;;;401                        tem1 *= tem1;
000394  980d              LDR      r0,[sp,#0x34]
000396  4340              MULS     r0,r0,r0
000398  900d              STR      r0,[sp,#0x34]
;;;402                        tem2 *= tem2;
00039a  980c              LDR      r0,[sp,#0x30]
00039c  4340              MULS     r0,r0,r0
00039e  900c              STR      r0,[sp,#0x30]
;;;403                        d2 = sqrt(tem1 + tem2); //得到2,4的距离
0003a0  e9dd100c          LDRD     r1,r0,[sp,#0x30]
0003a4  4408              ADD      r0,r0,r1
0003a6  9005              STR      r0,[sp,#0x14]
0003a8  f7fffffe          BL       __aeabi_ui2d
0003ac  e9cd0106          STRD     r0,r1,[sp,#0x18]
0003b0  f7fffffe          BL       sqrt
0003b4  e9cd0108          STRD     r0,r1,[sp,#0x20]
0003b8  f7fffffe          BL       __aeabi_d2uiz
0003bc  b280              UXTH     r0,r0
0003be  900e              STR      r0,[sp,#0x38]
;;;404                        fac = (float)d1 / d2;
0003c0  980e              LDR      r0,[sp,#0x38]
0003c2  f7fffffe          BL       __aeabi_ui2f
0003c6  9009              STR      r0,[sp,#0x24]
0003c8  980f              LDR      r0,[sp,#0x3c]
0003ca  f7fffffe          BL       __aeabi_ui2f
0003ce  9008              STR      r0,[sp,#0x20]
0003d0  9909              LDR      r1,[sp,#0x24]
0003d2  f7fffffe          BL       __aeabi_fdiv
0003d6  900b              STR      r0,[sp,#0x2c]
;;;405    
;;;406                        if (fac < 0.95 || fac > 1.05) { //不合格
0003d8  980b              LDR      r0,[sp,#0x2c]
0003da  f7fffffe          BL       __aeabi_f2d
0003de  f04f3266          MOV      r2,#0x66666666
0003e2  4b29              LDR      r3,|L2.1160|
0003e4  e9cd0108          STRD     r0,r1,[sp,#0x20]
0003e8  f7fffffe          BL       __aeabi_cdcmple
0003ec  d35a              BCC      |L2.1188|
0003ee  980b              LDR      r0,[sp,#0x2c]
0003f0  f7fffffe          BL       __aeabi_f2d
0003f4  4a25              LDR      r2,|L2.1164|
0003f6  e04f              B        |L2.1176|
                  |L2.1016|
                          DCD      POINT_COLOR
                  |L2.1020|
                          DCD      BACK_COLOR
                  |L2.1024|
000400  506c6561          DCB      "Please use the stylus click",0
000404  73652075
000408  73652074
00040c  68652073
000410  74796c75
000414  7320636c
000418  69636b00
                  |L2.1052|
00041c  74686520          DCB      "the cross on the screen.",0
000420  63726f73
000424  73206f6e
000428  20746865
00042c  20736372
000430  65656e2e
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L2.1080|
000438  54686520          DCB      "The cross will always move",0
00043c  63726f73
000440  73207769
000444  6c6c2061
000448  6c776179
00044c  73206d6f
000450  766500  
000453  00                DCB      0
                  |L2.1108|
000454  756e7469          DCB      "until the screen adjustment",0
000458  6c207468
00045c  65207363
000460  7265656e
000464  2061646a
000468  7573746d
00046c  656e7400
                  |L2.1136|
000470  69732063          DCB      "is completed.",0
000474  6f6d706c
000478  65746564
00047c  2e00    
00047e  00                DCB      0
00047f  00                DCB      0
                  |L2.1152|
                          DCD      tp_dev
                  |L2.1156|
                          DCD      lcddev
                  |L2.1160|
                          DCD      0x3fee6666
                  |L2.1164|
                          DCD      0xcccccccd
                  |L2.1168|
                          DCD      0x3ff0cccc
                  |L2.1172|
                          DCD      0x42c80000
                  |L2.1176|
000498  4bf7              LDR      r3,|L2.2168|
00049a  e9cd0108          STRD     r0,r1,[sp,#0x20]
00049e  f7fffffe          BL       __aeabi_cdrcmple
0004a2  d23d              BCS      |L2.1312|
                  |L2.1188|
;;;407                            cnt = 0;
0004a4  2000              MOVS     r0,#0
0004a6  9010              STR      r0,[sp,#0x40]
;;;408                            TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
0004a8  48f4              LDR      r0,|L2.2172|
0004aa  8840              LDRH     r0,[r0,#2]  ; lcddev
0004ac  3814              SUBS     r0,r0,#0x14
0004ae  b280              UXTH     r0,r0
0004b0  9009              STR      r0,[sp,#0x24]
0004b2  48f2              LDR      r0,|L2.2172|
0004b4  8800              LDRH     r0,[r0,#0]  ; lcddev
0004b6  3814              SUBS     r0,r0,#0x14
0004b8  b280              UXTH     r0,r0
0004ba  f64f72ff          MOV      r2,#0xffff
0004be  9008              STR      r0,[sp,#0x20]
0004c0  9909              LDR      r1,[sp,#0x24]
0004c2  f7fffffe          BL       TP_Drow_Touch_Point
;;;409                            TP_Drow_Touch_Point(20, 20, RED);                           //画点1
0004c6  f44f4278          MOV      r2,#0xf800
0004ca  2114              MOVS     r1,#0x14
0004cc  4608              MOV      r0,r1
0004ce  f7fffffe          BL       TP_Drow_Touch_Point
;;;410                            TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1],
0004d2  49eb              LDR      r1,|L2.2176|
0004d4  980b              LDR      r0,[sp,#0x2c]
0004d6  f7fffffe          BL       __aeabi_fmul
0004da  9008              STR      r0,[sp,#0x20]
0004dc  f7fffffe          BL       __aeabi_f2uiz
0004e0  b280              UXTH     r0,r0
0004e2  a911              ADD      r1,sp,#0x44
0004e4  9009              STR      r0,[sp,#0x24]
0004e6  89c9              LDRH     r1,[r1,#0xe]
0004e8  f8bd2050          LDRH     r2,[sp,#0x50]
0004ec  ab11              ADD      r3,sp,#0x44
0004ee  895b              LDRH     r3,[r3,#0xa]
0004f0  e9cd3201          STRD     r3,r2,[sp,#4]
0004f4  e9cd1003          STRD     r1,r0,[sp,#0xc]
0004f8  f8bd004c          LDRH     r0,[sp,#0x4c]
0004fc  9000              STR      r0,[sp,#0]
0004fe  a811              ADD      r0,sp,#0x44
000500  88c0              LDRH     r0,[r0,#6]
000502  9008              STR      r0,[sp,#0x20]
000504  f8bd0048          LDRH     r0,[sp,#0x48]
000508  9007              STR      r0,[sp,#0x1c]
00050a  f8bd0046          LDRH     r0,[sp,#0x46]
00050e  9006              STR      r0,[sp,#0x18]
000510  f8bd0044          LDRH     r0,[sp,#0x44]
000514  9005              STR      r0,[sp,#0x14]
000516  a906              ADD      r1,sp,#0x18
000518  c90e              LDM      r1,{r1-r3}
00051a  f7fffffe          BL       TP_Adj_Info_Show
                  |L2.1310|
;;;411                                             pos_temp[1][0], pos_temp[1][1],
;;;412                                             pos_temp[2][0], pos_temp[2][1],
;;;413                                             pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
;;;414                            continue;
00051e  e1e4              B        |L2.2282|
                  |L2.1312|
;;;415                        }//正确了
;;;416    
;;;417                        //对角线相等
;;;418                        tem1 = abs(pos_temp[1][0] - pos_temp[2][0]); //x1-x3
000520  f8bd0048          LDRH     r0,[sp,#0x48]
000524  f8bd104c          LDRH     r1,[sp,#0x4c]
000528  1a40              SUBS     r0,r0,r1
00052a  9009              STR      r0,[sp,#0x24]
00052c  2800              CMP      r0,#0
00052e  db01              BLT      |L2.1332|
000530  9809              LDR      r0,[sp,#0x24]
000532  e001              B        |L2.1336|
                  |L2.1332|
000534  9809              LDR      r0,[sp,#0x24]
000536  4240              RSBS     r0,r0,#0
                  |L2.1336|
000538  900d              STR      r0,[sp,#0x34]
;;;419                        tem2 = abs(pos_temp[1][1] - pos_temp[2][1]); //y1-y3
00053a  a811              ADD      r0,sp,#0x44
00053c  88c1              LDRH     r1,[r0,#6]
00053e  8940              LDRH     r0,[r0,#0xa]
000540  1a08              SUBS     r0,r1,r0
000542  9009              STR      r0,[sp,#0x24]
000544  2800              CMP      r0,#0
000546  db01              BLT      |L2.1356|
000548  9809              LDR      r0,[sp,#0x24]
00054a  e001              B        |L2.1360|
                  |L2.1356|
00054c  9809              LDR      r0,[sp,#0x24]
00054e  4240              RSBS     r0,r0,#0
                  |L2.1360|
000550  900c              STR      r0,[sp,#0x30]
;;;420                        tem1 *= tem1;
000552  980d              LDR      r0,[sp,#0x34]
000554  4340              MULS     r0,r0,r0
000556  900d              STR      r0,[sp,#0x34]
;;;421                        tem2 *= tem2;
000558  980c              LDR      r0,[sp,#0x30]
00055a  4340              MULS     r0,r0,r0
00055c  900c              STR      r0,[sp,#0x30]
;;;422                        d1 = sqrt(tem1 + tem2); //得到1,4的距离
00055e  e9dd100c          LDRD     r1,r0,[sp,#0x30]
000562  4408              ADD      r0,r0,r1
000564  9005              STR      r0,[sp,#0x14]
000566  f7fffffe          BL       __aeabi_ui2d
00056a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00056e  f7fffffe          BL       sqrt
000572  e9cd0108          STRD     r0,r1,[sp,#0x20]
000576  f7fffffe          BL       __aeabi_d2uiz
00057a  b280              UXTH     r0,r0
00057c  900f              STR      r0,[sp,#0x3c]
;;;423    
;;;424                        tem1 = abs(pos_temp[0][0] - pos_temp[3][0]); //x2-x4
00057e  f8bd0044          LDRH     r0,[sp,#0x44]
000582  f8bd1050          LDRH     r1,[sp,#0x50]
000586  1a40              SUBS     r0,r0,r1
000588  9009              STR      r0,[sp,#0x24]
00058a  2800              CMP      r0,#0
00058c  db01              BLT      |L2.1426|
00058e  9809              LDR      r0,[sp,#0x24]
000590  e001              B        |L2.1430|
                  |L2.1426|
000592  9809              LDR      r0,[sp,#0x24]
000594  4240              RSBS     r0,r0,#0
                  |L2.1430|
000596  900d              STR      r0,[sp,#0x34]
;;;425                        tem2 = abs(pos_temp[0][1] - pos_temp[3][1]); //y2-y4
000598  f8bd1046          LDRH     r1,[sp,#0x46]
00059c  a811              ADD      r0,sp,#0x44
00059e  89c0              LDRH     r0,[r0,#0xe]
0005a0  1a08              SUBS     r0,r1,r0
0005a2  9009              STR      r0,[sp,#0x24]
0005a4  2800              CMP      r0,#0
0005a6  db01              BLT      |L2.1452|
0005a8  9809              LDR      r0,[sp,#0x24]
0005aa  e001              B        |L2.1456|
                  |L2.1452|
0005ac  9809              LDR      r0,[sp,#0x24]
0005ae  4240              RSBS     r0,r0,#0
                  |L2.1456|
0005b0  900c              STR      r0,[sp,#0x30]
;;;426                        tem1 *= tem1;
0005b2  980d              LDR      r0,[sp,#0x34]
0005b4  4340              MULS     r0,r0,r0
0005b6  900d              STR      r0,[sp,#0x34]
;;;427                        tem2 *= tem2;
0005b8  980c              LDR      r0,[sp,#0x30]
0005ba  4340              MULS     r0,r0,r0
0005bc  900c              STR      r0,[sp,#0x30]
;;;428                        d2 = sqrt(tem1 + tem2); //得到2,3的距离
0005be  e9dd100c          LDRD     r1,r0,[sp,#0x30]
0005c2  4408              ADD      r0,r0,r1
0005c4  9005              STR      r0,[sp,#0x14]
0005c6  f7fffffe          BL       __aeabi_ui2d
0005ca  e9cd0106          STRD     r0,r1,[sp,#0x18]
0005ce  f7fffffe          BL       sqrt
0005d2  e9cd0108          STRD     r0,r1,[sp,#0x20]
0005d6  f7fffffe          BL       __aeabi_d2uiz
0005da  b280              UXTH     r0,r0
0005dc  900e              STR      r0,[sp,#0x38]
;;;429                        fac = (float)d1 / d2;
0005de  980e              LDR      r0,[sp,#0x38]
0005e0  f7fffffe          BL       __aeabi_ui2f
0005e4  9009              STR      r0,[sp,#0x24]
0005e6  980f              LDR      r0,[sp,#0x3c]
0005e8  f7fffffe          BL       __aeabi_ui2f
0005ec  9008              STR      r0,[sp,#0x20]
0005ee  9909              LDR      r1,[sp,#0x24]
0005f0  f7fffffe          BL       __aeabi_fdiv
0005f4  900b              STR      r0,[sp,#0x2c]
;;;430    
;;;431                        if (fac < 0.95 || fac > 1.05) { //不合格
0005f6  980b              LDR      r0,[sp,#0x2c]
0005f8  f7fffffe          BL       __aeabi_f2d
0005fc  f04f3266          MOV      r2,#0x66666666
000600  4ba0              LDR      r3,|L2.2180|
000602  e9cd0108          STRD     r0,r1,[sp,#0x20]
000606  f7fffffe          BL       __aeabi_cdcmple
00060a  d309              BCC      |L2.1568|
00060c  980b              LDR      r0,[sp,#0x2c]
00060e  f7fffffe          BL       __aeabi_f2d
000612  4a9d              LDR      r2,|L2.2184|
000614  4b98              LDR      r3,|L2.2168|
000616  e9cd0108          STRD     r0,r1,[sp,#0x20]
00061a  f7fffffe          BL       __aeabi_cdrcmple
00061e  d23d              BCS      |L2.1692|
                  |L2.1568|
;;;432                            cnt = 0;
000620  2000              MOVS     r0,#0
000622  9010              STR      r0,[sp,#0x40]
;;;433                            TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
000624  4895              LDR      r0,|L2.2172|
000626  8840              LDRH     r0,[r0,#2]  ; lcddev
000628  3814              SUBS     r0,r0,#0x14
00062a  b280              UXTH     r0,r0
00062c  9009              STR      r0,[sp,#0x24]
00062e  4893              LDR      r0,|L2.2172|
000630  8800              LDRH     r0,[r0,#0]  ; lcddev
000632  3814              SUBS     r0,r0,#0x14
000634  b280              UXTH     r0,r0
000636  f64f72ff          MOV      r2,#0xffff
00063a  9008              STR      r0,[sp,#0x20]
00063c  9909              LDR      r1,[sp,#0x24]
00063e  f7fffffe          BL       TP_Drow_Touch_Point
;;;434                            TP_Drow_Touch_Point(20, 20, RED);                           //画点1
000642  f44f4278          MOV      r2,#0xf800
000646  2114              MOVS     r1,#0x14
000648  4608              MOV      r0,r1
00064a  f7fffffe          BL       TP_Drow_Touch_Point
;;;435                            TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1],
00064e  498c              LDR      r1,|L2.2176|
000650  980b              LDR      r0,[sp,#0x2c]
000652  f7fffffe          BL       __aeabi_fmul
000656  9008              STR      r0,[sp,#0x20]
000658  f7fffffe          BL       __aeabi_f2uiz
00065c  b280              UXTH     r0,r0
00065e  a911              ADD      r1,sp,#0x44
000660  9009              STR      r0,[sp,#0x24]
000662  89c9              LDRH     r1,[r1,#0xe]
000664  f8bd2050          LDRH     r2,[sp,#0x50]
000668  ab11              ADD      r3,sp,#0x44
00066a  895b              LDRH     r3,[r3,#0xa]
00066c  e9cd3201          STRD     r3,r2,[sp,#4]
000670  e9cd1003          STRD     r1,r0,[sp,#0xc]
000674  f8bd004c          LDRH     r0,[sp,#0x4c]
000678  9000              STR      r0,[sp,#0]
00067a  a811              ADD      r0,sp,#0x44
00067c  88c0              LDRH     r0,[r0,#6]
00067e  9008              STR      r0,[sp,#0x20]
000680  f8bd0048          LDRH     r0,[sp,#0x48]
000684  9007              STR      r0,[sp,#0x1c]
000686  f8bd0046          LDRH     r0,[sp,#0x46]
00068a  9006              STR      r0,[sp,#0x18]
00068c  f8bd0044          LDRH     r0,[sp,#0x44]
000690  9005              STR      r0,[sp,#0x14]
000692  a906              ADD      r1,sp,#0x18
000694  c90e              LDM      r1,{r1-r3}
000696  f7fffffe          BL       TP_Adj_Info_Show
;;;436                                             pos_temp[1][0], pos_temp[1][1],
;;;437                                             pos_temp[2][0], pos_temp[2][1],
;;;438                                             pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
;;;439                            continue;
00069a  e126              B        |L2.2282|
                  |L2.1692|
;;;440                        }//正确了
;;;441    
;;;442                        //计算结果
;;;443                        tp_dev.xfac = (float)(lcddev.width - 40) / (pos_temp[1][0] - pos_temp[0][0]); //得到xfac
00069c  f8bd0048          LDRH     r0,[sp,#0x48]
0006a0  f8bd1044          LDRH     r1,[sp,#0x44]
0006a4  1a40              SUBS     r0,r0,r1
0006a6  9007              STR      r0,[sp,#0x1c]
0006a8  f7fffffe          BL       __aeabi_i2f
0006ac  9009              STR      r0,[sp,#0x24]
0006ae  4873              LDR      r0,|L2.2172|
0006b0  8800              LDRH     r0,[r0,#0]  ; lcddev
0006b2  3828              SUBS     r0,r0,#0x28
0006b4  9007              STR      r0,[sp,#0x1c]
0006b6  f7fffffe          BL       __aeabi_i2f
0006ba  9008              STR      r0,[sp,#0x20]
0006bc  9909              LDR      r1,[sp,#0x24]
0006be  f7fffffe          BL       __aeabi_fdiv
0006c2  4972              LDR      r1,|L2.2188|
0006c4  6188              STR      r0,[r1,#0x18]  ; tp_dev
;;;444                        tp_dev.xoff = (lcddev.width - tp_dev.xfac * (pos_temp[1][0] + pos_temp[0][0])) / 2; //得到xoff
0006c6  f8bd0048          LDRH     r0,[sp,#0x48]
0006ca  f8bd1044          LDRH     r1,[sp,#0x44]
0006ce  4408              ADD      r0,r0,r1
0006d0  9004              STR      r0,[sp,#0x10]
0006d2  f7fffffe          BL       __aeabi_i2f
0006d6  9005              STR      r0,[sp,#0x14]
0006d8  486c              LDR      r0,|L2.2188|
0006da  6980              LDR      r0,[r0,#0x18]  ; tp_dev
0006dc  4601              MOV      r1,r0
0006de  9004              STR      r0,[sp,#0x10]
0006e0  9805              LDR      r0,[sp,#0x14]
0006e2  f7fffffe          BL       __aeabi_fmul
0006e6  9007              STR      r0,[sp,#0x1c]
0006e8  4864              LDR      r0,|L2.2172|
0006ea  8800              LDRH     r0,[r0,#0]  ; lcddev
0006ec  9005              STR      r0,[sp,#0x14]
0006ee  f7fffffe          BL       __aeabi_ui2f
0006f2  9006              STR      r0,[sp,#0x18]
0006f4  9907              LDR      r1,[sp,#0x1c]
0006f6  f7fffffe          BL       __aeabi_fsub
0006fa  f04f4180          MOV      r1,#0x40000000
0006fe  9008              STR      r0,[sp,#0x20]
000700  f7fffffe          BL       __aeabi_fdiv
000704  9009              STR      r0,[sp,#0x24]
000706  f7fffffe          BL       __aeabi_f2iz
00070a  b200              SXTH     r0,r0
00070c  495f              LDR      r1,|L2.2188|
00070e  8408              STRH     r0,[r1,#0x20]
;;;445    
;;;446                        tp_dev.yfac = (float)(lcddev.height - 40) / (pos_temp[2][1] - pos_temp[0][1]); //得到yfac
000710  a811              ADD      r0,sp,#0x44
000712  8940              LDRH     r0,[r0,#0xa]
000714  f8bd1046          LDRH     r1,[sp,#0x46]
000718  1a40              SUBS     r0,r0,r1
00071a  9007              STR      r0,[sp,#0x1c]
00071c  f7fffffe          BL       __aeabi_i2f
000720  9009              STR      r0,[sp,#0x24]
000722  4856              LDR      r0,|L2.2172|
000724  8840              LDRH     r0,[r0,#2]  ; lcddev
000726  3828              SUBS     r0,r0,#0x28
000728  9007              STR      r0,[sp,#0x1c]
00072a  f7fffffe          BL       __aeabi_i2f
00072e  9008              STR      r0,[sp,#0x20]
000730  9909              LDR      r1,[sp,#0x24]
000732  f7fffffe          BL       __aeabi_fdiv
000736  4955              LDR      r1,|L2.2188|
000738  61c8              STR      r0,[r1,#0x1c]  ; tp_dev
;;;447                        tp_dev.yoff = (lcddev.height - tp_dev.yfac * (pos_temp[2][1] + pos_temp[0][1])) / 2; //得到yoff
00073a  a811              ADD      r0,sp,#0x44
00073c  8940              LDRH     r0,[r0,#0xa]
00073e  f8bd1046          LDRH     r1,[sp,#0x46]
000742  4408              ADD      r0,r0,r1
000744  9004              STR      r0,[sp,#0x10]
000746  f7fffffe          BL       __aeabi_i2f
00074a  9005              STR      r0,[sp,#0x14]
00074c  484f              LDR      r0,|L2.2188|
00074e  69c0              LDR      r0,[r0,#0x1c]  ; tp_dev
000750  4601              MOV      r1,r0
000752  9004              STR      r0,[sp,#0x10]
000754  9805              LDR      r0,[sp,#0x14]
000756  f7fffffe          BL       __aeabi_fmul
00075a  9007              STR      r0,[sp,#0x1c]
00075c  4847              LDR      r0,|L2.2172|
00075e  8840              LDRH     r0,[r0,#2]  ; lcddev
000760  9005              STR      r0,[sp,#0x14]
000762  f7fffffe          BL       __aeabi_ui2f
000766  9006              STR      r0,[sp,#0x18]
000768  9907              LDR      r1,[sp,#0x1c]
00076a  f7fffffe          BL       __aeabi_fsub
00076e  f04f4180          MOV      r1,#0x40000000
000772  9008              STR      r0,[sp,#0x20]
000774  f7fffffe          BL       __aeabi_fdiv
000778  9009              STR      r0,[sp,#0x24]
00077a  f7fffffe          BL       __aeabi_f2iz
00077e  b200              SXTH     r0,r0
000780  4942              LDR      r1,|L2.2188|
000782  8448              STRH     r0,[r1,#0x22]
;;;448    
;;;449                        if (abs(tp_dev.xfac) > 2 || abs(tp_dev.yfac) > 2) { //触屏和预设的相反了.
000784  4608              MOV      r0,r1
000786  6980              LDR      r0,[r0,#0x18]  ; tp_dev
000788  9007              STR      r0,[sp,#0x1c]
00078a  f7fffffe          BL       __aeabi_f2iz
00078e  9008              STR      r0,[sp,#0x20]
000790  2800              CMP      r0,#0
000792  db01              BLT      |L2.1944|
000794  9808              LDR      r0,[sp,#0x20]
000796  e001              B        |L2.1948|
                  |L2.1944|
000798  9808              LDR      r0,[sp,#0x20]
00079a  4240              RSBS     r0,r0,#0
                  |L2.1948|
00079c  2802              CMP      r0,#2
00079e  dc0d              BGT      |L2.1980|
0007a0  483a              LDR      r0,|L2.2188|
0007a2  69c0              LDR      r0,[r0,#0x1c]  ; tp_dev
0007a4  9007              STR      r0,[sp,#0x1c]
0007a6  f7fffffe          BL       __aeabi_f2iz
0007aa  9009              STR      r0,[sp,#0x24]
0007ac  2800              CMP      r0,#0
0007ae  db01              BLT      |L2.1972|
0007b0  9809              LDR      r0,[sp,#0x24]
0007b2  e001              B        |L2.1976|
                  |L2.1972|
0007b4  9809              LDR      r0,[sp,#0x24]
0007b6  4240              RSBS     r0,r0,#0
                  |L2.1976|
0007b8  2802              CMP      r0,#2
0007ba  dd3a              BLE      |L2.2098|
                  |L2.1980|
;;;450                            cnt = 0;
0007bc  2000              MOVS     r0,#0
0007be  9010              STR      r0,[sp,#0x40]
;;;451                            TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
0007c0  482e              LDR      r0,|L2.2172|
0007c2  8840              LDRH     r0,[r0,#2]  ; lcddev
0007c4  3814              SUBS     r0,r0,#0x14
0007c6  b280              UXTH     r0,r0
0007c8  9009              STR      r0,[sp,#0x24]
0007ca  482c              LDR      r0,|L2.2172|
0007cc  8800              LDRH     r0,[r0,#0]  ; lcddev
0007ce  3814              SUBS     r0,r0,#0x14
0007d0  b280              UXTH     r0,r0
0007d2  f64f72ff          MOV      r2,#0xffff
0007d6  9008              STR      r0,[sp,#0x20]
0007d8  9909              LDR      r1,[sp,#0x24]
0007da  f7fffffe          BL       TP_Drow_Touch_Point
;;;452                            TP_Drow_Touch_Point(20, 20, RED);                           //画点1
0007de  f44f4278          MOV      r2,#0xf800
0007e2  2114              MOVS     r1,#0x14
0007e4  4608              MOV      r0,r1
0007e6  f7fffffe          BL       TP_Drow_Touch_Point
;;;453                            LCD_ShowString(40, 26, 16, "TP Need readjust!", 1);
0007ea  2001              MOVS     r0,#1
0007ec  a328              ADR      r3,|L2.2192|
0007ee  2210              MOVS     r2,#0x10
0007f0  211a              MOVS     r1,#0x1a
0007f2  9000              STR      r0,[sp,#0]
0007f4  2028              MOVS     r0,#0x28
0007f6  f7fffffe          BL       LCD_ShowString
;;;454                            tp_dev.touchtype = !tp_dev.touchtype; //修改触屏类型.
0007fa  4824              LDR      r0,|L2.2188|
0007fc  f8900024          LDRB     r0,[r0,#0x24]  ; tp_dev
000800  b908              CBNZ     r0,|L2.2054|
000802  2001              MOVS     r0,#1
000804  e000              B        |L2.2056|
                  |L2.2054|
000806  2000              MOVS     r0,#0
                  |L2.2056|
000808  4920              LDR      r1,|L2.2188|
00080a  f8810024          STRB     r0,[r1,#0x24]
;;;455    
;;;456                            if (tp_dev.touchtype) { //X,Y方向与屏幕相反
00080e  4608              MOV      r0,r1
000810  f8900024          LDRB     r0,[r0,#0x24]  ; tp_dev
000814  b130              CBZ      r0,|L2.2084|
;;;457                                CMD_RDX = 0X90;
000816  2090              MOVS     r0,#0x90
000818  4922              LDR      r1,|L2.2212|
00081a  7008              STRB     r0,[r1,#0]
;;;458                                CMD_RDY = 0XD0;
00081c  20d0              MOVS     r0,#0xd0
00081e  4922              LDR      r1,|L2.2216|
000820  7008              STRB     r0,[r1,#0]
000822  e005              B        |L2.2096|
                  |L2.2084|
;;;459                            } else {                //X,Y方向与屏幕相同
;;;460                                CMD_RDX = 0XD0;
000824  20d0              MOVS     r0,#0xd0
000826  491f              LDR      r1,|L2.2212|
000828  7008              STRB     r0,[r1,#0]
;;;461                                CMD_RDY = 0X90;
00082a  2090              MOVS     r0,#0x90
00082c  491e              LDR      r1,|L2.2216|
00082e  7008              STRB     r0,[r1,#0]
                  |L2.2096|
;;;462                            }
;;;463    
;;;464                            continue;
000830  e05b              B        |L2.2282|
                  |L2.2098|
;;;465                        }
;;;466    
;;;467                        POINT_COLOR = BLUE;
000832  201f              MOVS     r0,#0x1f
000834  491d              LDR      r1,|L2.2220|
000836  8008              STRH     r0,[r1,#0]
;;;468                        LCD_Clear(WHITE);//清屏
000838  f64f70ff          MOV      r0,#0xffff
00083c  f7fffffe          BL       LCD_Clear
;;;469                        LCD_ShowString(35, 110, 16, "Touch Screen Adjust OK!", 1); //校正完成
000840  2001              MOVS     r0,#1
000842  a31b              ADR      r3,|L2.2224|
000844  2210              MOVS     r2,#0x10
000846  216e              MOVS     r1,#0x6e
000848  9000              STR      r0,[sp,#0]
00084a  2023              MOVS     r0,#0x23
00084c  f7fffffe          BL       LCD_ShowString
;;;470                        delay_ms(1000);
000850  f44f707a          MOV      r0,#0x3e8
000854  f7fffffe          BL       delay_ms
;;;471                        LCD_Clear(WHITE);//清屏
000858  f64f70ff          MOV      r0,#0xffff
00085c  f7fffffe          BL       LCD_Clear
;;;472    
;;;473                        if (tp_dev.touchtype) { //X,Y方向与屏幕相反
000860  480a              LDR      r0,|L2.2188|
000862  f8900024          LDRB     r0,[r0,#0x24]  ; tp_dev
000866  b130              CBZ      r0,|L2.2166|
;;;474                            CMD_RDX = 0X90;
000868  2090              MOVS     r0,#0x90
00086a  490e              LDR      r1,|L2.2212|
00086c  7008              STRB     r0,[r1,#0]
;;;475                            CMD_RDY = 0XD0;
00086e  20d0              MOVS     r0,#0xd0
000870  490d              LDR      r1,|L2.2216|
000872  7008              STRB     r0,[r1,#0]
000874  e02e              B        |L2.2260|
                  |L2.2166|
000876  e027              B        |L2.2248|
                  |L2.2168|
                          DCD      0x3ff0cccc
                  |L2.2172|
                          DCD      lcddev
                  |L2.2176|
                          DCD      0x42c80000
                  |L2.2180|
                          DCD      0x3fee6666
                  |L2.2184|
                          DCD      0xcccccccd
                  |L2.2188|
                          DCD      tp_dev
                  |L2.2192|
000890  5450204e          DCB      "TP Need readjust!",0
000894  65656420
000898  72656164
00089c  6a757374
0008a0  2100    
0008a2  00                DCB      0
0008a3  00                DCB      0
                  |L2.2212|
                          DCD      CMD_RDX
                  |L2.2216|
                          DCD      CMD_RDY
                  |L2.2220|
                          DCD      POINT_COLOR
                  |L2.2224|
0008b0  546f7563          DCB      "Touch Screen Adjust OK!",0
0008b4  68205363
0008b8  7265656e
0008bc  2041646a
0008c0  75737420
0008c4  4f4b2100
                  |L2.2248|
;;;476                        } else {                //X,Y方向与屏幕相同
;;;477                            CMD_RDX = 0XD0;
0008c8  20d0              MOVS     r0,#0xd0
0008ca  4909              LDR      r1,|L2.2288|
0008cc  7008              STRB     r0,[r1,#0]
;;;478                            CMD_RDY = 0X90;
0008ce  2090              MOVS     r0,#0x90
0008d0  4908              LDR      r1,|L2.2292|
0008d2  7008              STRB     r0,[r1,#0]
                  |L2.2260|
;;;479                        }
;;;480    
;;;481                        return;//校正完成
;;;482                }
;;;483            }
;;;484    
;;;485            delay_ms(10);
;;;486            outtime++;
;;;487    
;;;488            //        if (outtime > 1000) {
;;;489            //            TP_Get_Adjdata();
;;;490            //            break;
;;;491            //        }
;;;492        }
;;;493    }
0008d4  b015              ADD      sp,sp,#0x54
0008d6  bd00              POP      {pc}
                  |L2.2264|
0008d8  bf00              NOP                            ;355
                  |L2.2266|
0008da  200a              MOVS     r0,#0xa               ;485
0008dc  f7fffffe          BL       delay_ms
0008e0  980a              LDR      r0,[sp,#0x28]         ;486
0008e2  1c40              ADDS     r0,r0,#1              ;486
0008e4  b280              UXTH     r0,r0                 ;486
0008e6  900a              STR      r0,[sp,#0x28]         ;486
0008e8  bf00              NOP                            ;390
                  |L2.2282|
0008ea  f7ffbbd6          B        |L2.154|
;;;494    
                          ENDP

0008ee  0000              DCW      0x0000
                  |L2.2288|
                          DCD      CMD_RDX
                  |L2.2292|
                          DCD      CMD_RDY

                          AREA ||i.TP_Draw_Big_Point||, CODE, READONLY, ALIGN=2

                  TP_Draw_Big_Point PROC
;;;221    ******************************************************************************/
;;;222    void TP_Draw_Big_Point(u16 x, u16 y, u16 color)
000000  b570              PUSH     {r4-r6,lr}
;;;223    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;224        POINT_COLOR = color;
000008  480b              LDR      r0,|L3.56|
00000a  8006              STRH     r6,[r0,#0]
;;;225        LCD_DrawPoint(x, y); //中心点
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       LCD_DrawPoint
;;;226        LCD_DrawPoint(x + 1, y);
000014  1c61              ADDS     r1,r4,#1
000016  b288              UXTH     r0,r1
000018  4629              MOV      r1,r5
00001a  f7fffffe          BL       LCD_DrawPoint
;;;227        LCD_DrawPoint(x, y + 1);
00001e  1c68              ADDS     r0,r5,#1
000020  b281              UXTH     r1,r0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       LCD_DrawPoint
;;;228        LCD_DrawPoint(x + 1, y + 1);
000028  1c6a              ADDS     r2,r5,#1
00002a  b291              UXTH     r1,r2
00002c  1c62              ADDS     r2,r4,#1
00002e  b290              UXTH     r0,r2
000030  f7fffffe          BL       LCD_DrawPoint
;;;229    }
000034  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      POINT_COLOR

                          AREA ||i.TP_Drow_Touch_Point||, CODE, READONLY, ALIGN=2

                  TP_Drow_Touch_Point PROC
;;;200    ******************************************************************************/
;;;201    void TP_Drow_Touch_Point(u16 x, u16 y, u16 color)
000000  b5f8              PUSH     {r3-r7,lr}
;;;202    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;203        POINT_COLOR = color;
000008  481a              LDR      r0,|L4.116|
00000a  8006              STRH     r6,[r0,#0]
;;;204        LCD_DrawLine(x - 12, y, x + 13, y); //横线
00000c  f104010d          ADD      r1,r4,#0xd
000010  b28a              UXTH     r2,r1
000012  3919              SUBS     r1,r1,#0x19
000014  b288              UXTH     r0,r1
000016  462b              MOV      r3,r5
000018  4629              MOV      r1,r5
00001a  f7fffffe          BL       LCD_DrawLine
;;;205        LCD_DrawLine(x, y - 12, x, y + 13); //竖线
00001e  f105000d          ADD      r0,r5,#0xd
000022  b283              UXTH     r3,r0
000024  3819              SUBS     r0,r0,#0x19
000026  b281              UXTH     r1,r0
000028  4622              MOV      r2,r4
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       LCD_DrawLine
;;;206        LCD_DrawPoint(x + 1, y + 1);
000030  1c6a              ADDS     r2,r5,#1
000032  b291              UXTH     r1,r2
000034  1c62              ADDS     r2,r4,#1
000036  b290              UXTH     r0,r2
000038  f7fffffe          BL       LCD_DrawPoint
;;;207        LCD_DrawPoint(x - 1, y + 1);
00003c  1c6a              ADDS     r2,r5,#1
00003e  b291              UXTH     r1,r2
000040  1e62              SUBS     r2,r4,#1
000042  b290              UXTH     r0,r2
000044  f7fffffe          BL       LCD_DrawPoint
;;;208        LCD_DrawPoint(x + 1, y - 1);
000048  1e6a              SUBS     r2,r5,#1
00004a  b291              UXTH     r1,r2
00004c  1c62              ADDS     r2,r4,#1
00004e  b290              UXTH     r0,r2
000050  f7fffffe          BL       LCD_DrawPoint
;;;209        LCD_DrawPoint(x - 1, y - 1);
000054  1e6a              SUBS     r2,r5,#1
000056  b291              UXTH     r1,r2
000058  1e62              SUBS     r2,r4,#1
00005a  b290              UXTH     r0,r2
00005c  f7fffffe          BL       LCD_DrawPoint
;;;210        LCD_DrawCircle(x, y, POINT_COLOR, 6, 0); //画中心圈
000060  2000              MOVS     r0,#0
000062  2306              MOVS     r3,#6
000064  9000              STR      r0,[sp,#0]
000066  4803              LDR      r0,|L4.116|
000068  8802              LDRH     r2,[r0,#0]  ; POINT_COLOR
00006a  4629              MOV      r1,r5
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       LCD_DrawCircle
;;;211    }
000072  bdf8              POP      {r3-r7,pc}
;;;212    
                          ENDP

                  |L4.116|
                          DCD      POINT_COLOR

                          AREA ||i.TP_Init||, CODE, READONLY, ALIGN=2

                  TP_Init PROC
;;;501    ******************************************************************************/
;;;502    void TP_Init(void)
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504        ll_gpio_dir(TP_PORT, TP_PIN_CLK, LL_GPIO_PIN_OUTPUT);
000002  2201              MOVS     r2,#1
000004  4611              MOV      r1,r2
000006  4816              LDR      r0,|L5.96|
000008  f7fffffe          BL       ll_gpio_dir
;;;505        ll_gpio_dir(TP_PORT, TP_PIN_CS, LL_GPIO_PIN_OUTPUT);
00000c  2201              MOVS     r2,#1
00000e  2102              MOVS     r1,#2
000010  4813              LDR      r0,|L5.96|
000012  f7fffffe          BL       ll_gpio_dir
;;;506        ll_gpio_dir(TP_PORT, TP_PIN_DIN, LL_GPIO_PIN_OUTPUT);
000016  2201              MOVS     r2,#1
000018  2104              MOVS     r1,#4
00001a  4811              LDR      r0,|L5.96|
00001c  f7fffffe          BL       ll_gpio_dir
;;;507    
;;;508        ll_gpio_dir(TP_PORT, TP_PIN_DO, LL_GPIO_PIN_INPUT);
000020  2200              MOVS     r2,#0
000022  2108              MOVS     r1,#8
000024  480e              LDR      r0,|L5.96|
000026  f7fffffe          BL       ll_gpio_dir
;;;509        ll_gpio_pull(TP_PORT, TP_PIN_DO, LL_GPIO_PULL_UP);
00002a  2202              MOVS     r2,#2
00002c  2108              MOVS     r1,#8
00002e  480c              LDR      r0,|L5.96|
000030  f7fffffe          BL       ll_gpio_pull
;;;510    
;;;511        ll_gpio_dir(TP_PEN_PORT, TP_PIN_PEN, LL_GPIO_PIN_INPUT);
000034  2200              MOVS     r2,#0
000036  f44f4100          MOV      r1,#0x8000
00003a  480a              LDR      r0,|L5.100|
00003c  f7fffffe          BL       ll_gpio_dir
;;;512        ll_gpio_pull(TP_PEN_PORT, TP_PIN_PEN, LL_GPIO_PULL_UP);
000040  2202              MOVS     r2,#2
000042  0391              LSLS     r1,r2,#14
000044  4807              LDR      r0,|L5.100|
000046  f7fffffe          BL       ll_gpio_pull
;;;513    
;;;514        TP_Read_XY(&tp_dev.x, &tp_dev.y); //第一次读取初始化
00004a  4907              LDR      r1,|L5.104|
00004c  1e88              SUBS     r0,r1,#2
00004e  f7fffffe          BL       TP_Read_XY
;;;515    
;;;516        LCD_Clear(WHITE);//清屏
000052  f64f70ff          MOV      r0,#0xffff
000056  f7fffffe          BL       LCD_Clear
;;;517        TP_Adjust();  //屏幕校准
00005a  f7fffffe          BL       TP_Adjust
;;;518    }
00005e  bd10              POP      {r4,pc}
;;;519    
                          ENDP

                  |L5.96|
                          DCD      0x40027000
                  |L5.100|
                          DCD      0x40022000
                  |L5.104|
                          DCD      tp_dev+0x12

                          AREA ||i.TP_Read_AD||, CODE, READONLY, ALIGN=2

                  TP_Read_AD PROC
;;;62     ******************************************************************************/
;;;63     u16 TP_Read_AD(u8 CMD)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4606              MOV      r6,r0
;;;65         u8 count = 0;
000004  2500              MOVS     r5,#0
;;;66         u16 Num = 0;
000006  2400              MOVS     r4,#0
;;;67         TP_CLK_L;   //先拉低时钟
000008  2101              MOVS     r1,#1
00000a  4820              LDR      r0,|L6.140|
00000c  f7fffffe          BL       ll_gpio_bit_reset
;;;68         TP_DIN_L;   //拉低数据线
000010  2104              MOVS     r1,#4
000012  481e              LDR      r0,|L6.140|
000014  f7fffffe          BL       ll_gpio_bit_reset
;;;69         TP_CS_L;    //选中触摸屏IC
000018  2102              MOVS     r1,#2
00001a  481c              LDR      r0,|L6.140|
00001c  f7fffffe          BL       ll_gpio_bit_reset
;;;70         TP_Write_Byte(CMD);//发送命令字
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       TP_Write_Byte
;;;71         delay_us(6);//ADS7846的转换时间最长为6us
000026  2006              MOVS     r0,#6
000028  f7fffffe          BL       delay_us
;;;72         TP_CLK_L;
00002c  2101              MOVS     r1,#1
00002e  4817              LDR      r0,|L6.140|
000030  f7fffffe          BL       ll_gpio_bit_reset
;;;73         delay_us(1);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       delay_us
;;;74         TP_CLK_H;   //给1个时钟，清除BUSY
00003a  2101              MOVS     r1,#1
00003c  4813              LDR      r0,|L6.140|
00003e  f7fffffe          BL       ll_gpio_bit_set
;;;75         TP_CLK_L;
000042  2101              MOVS     r1,#1
000044  4811              LDR      r0,|L6.140|
000046  f7fffffe          BL       ll_gpio_bit_reset
;;;76     
;;;77         for (count = 0; count < 16; count++) { //读出16位数据,只有高12位有效
00004a  bf00              NOP      
00004c  e014              B        |L6.120|
                  |L6.78|
;;;78             Num <<= 1;
00004e  f64f70ff          MOV      r0,#0xffff
000052  ea000444          AND      r4,r0,r4,LSL #1
;;;79             TP_CLK_L; //下降沿有效
000056  2101              MOVS     r1,#1
000058  480c              LDR      r0,|L6.140|
00005a  f7fffffe          BL       ll_gpio_bit_reset
;;;80             TP_CLK_H;
00005e  2101              MOVS     r1,#1
000060  480a              LDR      r0,|L6.140|
000062  f7fffffe          BL       ll_gpio_bit_set
;;;81     
;;;82             if (TP_DO_READ) {
000066  2108              MOVS     r1,#8
000068  4808              LDR      r0,|L6.140|
00006a  f7fffffe          BL       ll_gpio_read_data_bit
00006e  b108              CBZ      r0,|L6.116|
;;;83                 Num++;
000070  1c60              ADDS     r0,r4,#1
000072  b284              UXTH     r4,r0
                  |L6.116|
000074  1c68              ADDS     r0,r5,#1              ;77
000076  b2c5              UXTB     r5,r0                 ;77
                  |L6.120|
000078  2d10              CMP      r5,#0x10              ;77
00007a  dbe8              BLT      |L6.78|
;;;84             }
;;;85         }
;;;86     
;;;87         Num >>= 4;  //只有高12位有效.
00007c  1124              ASRS     r4,r4,#4
;;;88         TP_CS_H;    //释放片选
00007e  2102              MOVS     r1,#2
000080  4802              LDR      r0,|L6.140|
000082  f7fffffe          BL       ll_gpio_bit_set
;;;89         return (Num);
000086  4620              MOV      r0,r4
;;;90     }
000088  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

00008a  0000              DCW      0x0000
                  |L6.140|
                          DCD      0x40027000

                          AREA ||i.TP_Read_XOY||, CODE, READONLY, ALIGN=1

                  TP_Read_XOY PROC
;;;102    ******************************************************************************/
;;;103    u16 TP_Read_XOY(u8 xy)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;104    {
000004  4680              MOV      r8,r0
;;;105        u16 i, j;
;;;106        u16 buf[READ_TIMES];
;;;107        u16 sum = 0;
000006  2700              MOVS     r7,#0
;;;108        u16 temp;
;;;109    
;;;110        for (i = 0; i < READ_TIMES; i++) {
000008  2400              MOVS     r4,#0
00000a  e006              B        |L7.26|
                  |L7.12|
;;;111            buf[i] = TP_Read_AD(xy);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       TP_Read_AD
000012  f82d0014          STRH     r0,[sp,r4,LSL #1]
000016  1c60              ADDS     r0,r4,#1              ;110
000018  b284              UXTH     r4,r0                 ;110
                  |L7.26|
00001a  2c05              CMP      r4,#5                 ;110
00001c  dbf6              BLT      |L7.12|
;;;112        }
;;;113    
;;;114        for (i = 0; i < READ_TIMES - 1; i++) { //排序
00001e  2400              MOVS     r4,#0
000020  e016              B        |L7.80|
                  |L7.34|
;;;115            for (j = i + 1; j < READ_TIMES; j++) {
000022  1c60              ADDS     r0,r4,#1
000024  b285              UXTH     r5,r0
000026  e00f              B        |L7.72|
                  |L7.40|
;;;116                if (buf[i] > buf[j]) { //升序排列
000028  f83d0014          LDRH     r0,[sp,r4,LSL #1]
00002c  f83d1015          LDRH     r1,[sp,r5,LSL #1]
000030  4288              CMP      r0,r1
000032  dd07              BLE      |L7.68|
;;;117                    temp = buf[i];
000034  f83d6014          LDRH     r6,[sp,r4,LSL #1]
;;;118                    buf[i] = buf[j];
000038  f83d0015          LDRH     r0,[sp,r5,LSL #1]
00003c  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;119                    buf[j] = temp;
000040  f82d6015          STRH     r6,[sp,r5,LSL #1]
                  |L7.68|
000044  1c68              ADDS     r0,r5,#1              ;115
000046  b285              UXTH     r5,r0                 ;115
                  |L7.72|
000048  2d05              CMP      r5,#5                 ;115
00004a  dbed              BLT      |L7.40|
00004c  1c60              ADDS     r0,r4,#1              ;114
00004e  b284              UXTH     r4,r0                 ;114
                  |L7.80|
000050  2c04              CMP      r4,#4                 ;114
000052  dbe6              BLT      |L7.34|
;;;120                }
;;;121            }
;;;122        }
;;;123    
;;;124        sum = 0;
000054  2700              MOVS     r7,#0
;;;125    
;;;126        for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) {
000056  2401              MOVS     r4,#1
000058  e005              B        |L7.102|
                  |L7.90|
;;;127            sum += buf[i];
00005a  f83d0014          LDRH     r0,[sp,r4,LSL #1]
00005e  4438              ADD      r0,r0,r7
000060  b287              UXTH     r7,r0
000062  1c60              ADDS     r0,r4,#1              ;126
000064  b284              UXTH     r4,r0                 ;126
                  |L7.102|
000066  2c04              CMP      r4,#4                 ;126
000068  dbf7              BLT      |L7.90|
;;;128        }
;;;129    
;;;130        temp = sum / (READ_TIMES - 2 * LOST_VAL);
00006a  2003              MOVS     r0,#3
00006c  fb97f0f0          SDIV     r0,r7,r0
000070  b286              UXTH     r6,r0
;;;131        return temp;
000072  4630              MOV      r0,r6
;;;132    }
000074  e8bd83fe          POP      {r1-r9,pc}
;;;133    
                          ENDP


                          AREA ||i.TP_Read_XY||, CODE, READONLY, ALIGN=2

                  TP_Read_XY PROC
;;;142    ******************************************************************************/
;;;143    u8 TP_Read_XY(u16 *x, u16 *y)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;144    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;145        u16 xtemp, ytemp;
;;;146        xtemp = TP_Read_XOY(CMD_RDX);
000008  4807              LDR      r0,|L8.40|
00000a  7800              LDRB     r0,[r0,#0]  ; CMD_RDX
00000c  f7fffffe          BL       TP_Read_XOY
000010  4606              MOV      r6,r0
;;;147        ytemp = TP_Read_XOY(CMD_RDY);
000012  4806              LDR      r0,|L8.44|
000014  7800              LDRB     r0,[r0,#0]  ; CMD_RDY
000016  f7fffffe          BL       TP_Read_XOY
00001a  4607              MOV      r7,r0
;;;148        *x = xtemp;
00001c  8026              STRH     r6,[r4,#0]
;;;149        *y = ytemp;
00001e  802f              STRH     r7,[r5,#0]
;;;150        return 1;//读数成功
000020  2001              MOVS     r0,#1
;;;151    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;152    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      CMD_RDX
                  |L8.44|
                          DCD      CMD_RDY

                          AREA ||i.TP_Read_XY2||, CODE, READONLY, ALIGN=1

                  TP_Read_XY2 PROC
;;;164    ******************************************************************************/
;;;165    u8 TP_Read_XY2(u16 *x, u16 *y)
000000  b57f              PUSH     {r0-r6,lr}
;;;166    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;167        u16 x1, y1;
;;;168        u16 x2, y2;
;;;169        u8 flag;
;;;170        flag = TP_Read_XY(&x1, &y1);
000006  a902              ADD      r1,sp,#8
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       TP_Read_XY
00000e  4606              MOV      r6,r0
;;;171    
;;;172        if (flag == 0) {
000010  b916              CBNZ     r6,|L9.24|
;;;173            return (0);
000012  2000              MOVS     r0,#0
                  |L9.20|
;;;174        }
;;;175    
;;;176        flag = TP_Read_XY(&x2, &y2);
;;;177    
;;;178        if (flag == 0) {
;;;179            return (0);
;;;180        }
;;;181    
;;;182        if (((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE)) //前后两次采样在+-50内
;;;183            && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE))) {
;;;184            *x = (x1 + x2) / 2;
;;;185            *y = (y1 + y2) / 2;
;;;186            return 1;
;;;187        } else {
;;;188            return 0;
;;;189        }
;;;190    }
000014  b004              ADD      sp,sp,#0x10
000016  bd70              POP      {r4-r6,pc}
                  |L9.24|
000018  4669              MOV      r1,sp                 ;176
00001a  a801              ADD      r0,sp,#4              ;176
00001c  f7fffffe          BL       TP_Read_XY
000020  4606              MOV      r6,r0                 ;176
000022  b90e              CBNZ     r6,|L9.40|
000024  2000              MOVS     r0,#0                 ;179
000026  e7f5              B        |L9.20|
                  |L9.40|
000028  f8bd0004          LDRH     r0,[sp,#4]            ;182
00002c  f8bd100c          LDRH     r1,[sp,#0xc]          ;182
000030  4288              CMP      r0,r1                 ;182
000032  dc06              BGT      |L9.66|
000034  f8bd100c          LDRH     r1,[sp,#0xc]          ;182
000038  f8bd0004          LDRH     r0,[sp,#4]            ;182
00003c  3032              ADDS     r0,r0,#0x32           ;182
00003e  4281              CMP      r1,r0                 ;182
000040  db0c              BLT      |L9.92|
                  |L9.66|
000042  f8bd000c          LDRH     r0,[sp,#0xc]          ;182
000046  f8bd1004          LDRH     r1,[sp,#4]            ;182
00004a  4288              CMP      r0,r1                 ;182
00004c  dc36              BGT      |L9.188|
00004e  f8bd1004          LDRH     r1,[sp,#4]            ;182
000052  f8bd000c          LDRH     r0,[sp,#0xc]          ;182
000056  3032              ADDS     r0,r0,#0x32           ;182
000058  4281              CMP      r1,r0                 ;182
00005a  da2f              BGE      |L9.188|
                  |L9.92|
00005c  f8bd0000          LDRH     r0,[sp,#0]            ;183
000060  f8bd1008          LDRH     r1,[sp,#8]            ;183
000064  4288              CMP      r0,r1                 ;183
000066  dc06              BGT      |L9.118|
000068  f8bd1008          LDRH     r1,[sp,#8]            ;183
00006c  f8bd0000          LDRH     r0,[sp,#0]            ;183
000070  3032              ADDS     r0,r0,#0x32           ;183
000072  4281              CMP      r1,r0                 ;183
000074  db0c              BLT      |L9.144|
                  |L9.118|
000076  f8bd0008          LDRH     r0,[sp,#8]            ;183
00007a  f8bd1000          LDRH     r1,[sp,#0]            ;183
00007e  4288              CMP      r0,r1                 ;183
000080  dc1c              BGT      |L9.188|
000082  f8bd1000          LDRH     r1,[sp,#0]            ;183
000086  f8bd0008          LDRH     r0,[sp,#8]            ;183
00008a  3032              ADDS     r0,r0,#0x32           ;183
00008c  4281              CMP      r1,r0                 ;183
00008e  da15              BGE      |L9.188|
                  |L9.144|
000090  f8bd100c          LDRH     r1,[sp,#0xc]          ;184
000094  f8bd2004          LDRH     r2,[sp,#4]            ;184
000098  1888              ADDS     r0,r1,r2              ;184
00009a  eb0071d0          ADD      r1,r0,r0,LSR #31      ;184
00009e  f3c1014f          UBFX     r1,r1,#1,#16          ;184
0000a2  8021              STRH     r1,[r4,#0]            ;184
0000a4  f8bd1008          LDRH     r1,[sp,#8]            ;185
0000a8  f8bd2000          LDRH     r2,[sp,#0]            ;185
0000ac  1888              ADDS     r0,r1,r2              ;185
0000ae  eb0071d0          ADD      r1,r0,r0,LSR #31      ;185
0000b2  f3c1014f          UBFX     r1,r1,#1,#16          ;185
0000b6  8029              STRH     r1,[r5,#0]            ;185
0000b8  2001              MOVS     r0,#1                 ;186
0000ba  e7ab              B        |L9.20|
                  |L9.188|
0000bc  2000              MOVS     r0,#0                 ;188
0000be  e7a9              B        |L9.20|
;;;191    
                          ENDP


                          AREA ||i.TP_Scan||, CODE, READONLY, ALIGN=2

                  TP_Scan PROC
;;;240    ******************************************************************************/
;;;241    u8 TP_Scan(u8 tp)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;242    {
000004  4604              MOV      r4,r0
;;;243        if (TP_PEN_READ == LL_GPIO_RESET) { //有按键按下
000006  f44f4100          MOV      r1,#0x8000
00000a  483c              LDR      r0,|L10.252|
00000c  f7fffffe          BL       ll_gpio_read_data_bit
000010  2800              CMP      r0,#0
000012  d153              BNE      |L10.188|
;;;244            if (tp) {
000014  b124              CBZ      r4,|L10.32|
;;;245                TP_Read_XY2(&tp_dev.x, &tp_dev.y);    //读取物理坐标
000016  493a              LDR      r1,|L10.256|
000018  1e88              SUBS     r0,r1,#2
00001a  f7fffffe          BL       TP_Read_XY2
00001e  e03c              B        |L10.154|
                  |L10.32|
;;;246            } else if (TP_Read_XY2(&tp_dev.x, &tp_dev.y)) { //读取屏幕坐标
000020  4937              LDR      r1,|L10.256|
000022  1e88              SUBS     r0,r1,#2
000024  f7fffffe          BL       TP_Read_XY2
000028  b3b8              CBZ      r0,|L10.154|
;;;247                tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff; //将结果转换为屏幕坐标
00002a  4935              LDR      r1,|L10.256|
00002c  3912              SUBS     r1,r1,#0x12
00002e  f9b10020          LDRSH    r0,[r1,#0x20]  ; tp_dev
000032  f7fffffe          BL       __aeabi_i2f
000036  4607              MOV      r7,r0
000038  4931              LDR      r1,|L10.256|
00003a  3912              SUBS     r1,r1,#0x12
00003c  8a08              LDRH     r0,[r1,#0x10]  ; tp_dev
00003e  f7fffffe          BL       __aeabi_ui2f
000042  4680              MOV      r8,r0
000044  482e              LDR      r0,|L10.256|
000046  3812              SUBS     r0,r0,#0x12
000048  6981              LDR      r1,[r0,#0x18]  ; tp_dev
00004a  4640              MOV      r0,r8
00004c  f7fffffe          BL       __aeabi_fmul
000050  4606              MOV      r6,r0
000052  4639              MOV      r1,r7
000054  f7fffffe          BL       __aeabi_fadd
000058  4605              MOV      r5,r0
00005a  f7fffffe          BL       __aeabi_f2uiz
00005e  4928              LDR      r1,|L10.256|
000060  3912              SUBS     r1,r1,#0x12
000062  8208              STRH     r0,[r1,#0x10]
;;;248                tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
000064  f9b10022          LDRSH    r0,[r1,#0x22]  ; tp_dev
000068  f7fffffe          BL       __aeabi_i2f
00006c  4607              MOV      r7,r0
00006e  4924              LDR      r1,|L10.256|
000070  3912              SUBS     r1,r1,#0x12
000072  8a48              LDRH     r0,[r1,#0x12]  ; tp_dev
000074  f7fffffe          BL       __aeabi_ui2f
000078  4680              MOV      r8,r0
00007a  4821              LDR      r0,|L10.256|
00007c  3812              SUBS     r0,r0,#0x12
00007e  69c1              LDR      r1,[r0,#0x1c]  ; tp_dev
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       __aeabi_fmul
000086  4606              MOV      r6,r0
000088  4639              MOV      r1,r7
00008a  f7fffffe          BL       __aeabi_fadd
00008e  4605              MOV      r5,r0
000090  f7fffffe          BL       __aeabi_f2uiz
000094  491a              LDR      r1,|L10.256|
000096  3912              SUBS     r1,r1,#0x12
000098  8248              STRH     r0,[r1,#0x12]
                  |L10.154|
;;;249            }
;;;250    
;;;251            if ((tp_dev.sta & TP_PRES_DOWN) == 0) { //之前没有被按下
00009a  4819              LDR      r0,|L10.256|
00009c  3812              SUBS     r0,r0,#0x12
00009e  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000a0  f0000080          AND      r0,r0,#0x80
0000a4  bb10              CBNZ     r0,|L10.236|
;;;252                tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES; //按键按下
0000a6  20c0              MOVS     r0,#0xc0
0000a8  4915              LDR      r1,|L10.256|
0000aa  3912              SUBS     r1,r1,#0x12
0000ac  7508              STRB     r0,[r1,#0x14]
;;;253                tp_dev.x0 = tp_dev.x; //记录第一次按下时的坐标
0000ae  4608              MOV      r0,r1
0000b0  8a00              LDRH     r0,[r0,#0x10]  ; tp_dev
0000b2  8188              STRH     r0,[r1,#0xc]
;;;254                tp_dev.y0 = tp_dev.y;
0000b4  4608              MOV      r0,r1
0000b6  8a40              LDRH     r0,[r0,#0x12]  ; tp_dev
0000b8  81c8              STRH     r0,[r1,#0xe]
0000ba  e017              B        |L10.236|
                  |L10.188|
;;;255            }
;;;256        } else {
;;;257            if (tp_dev.sta & TP_PRES_DOWN) { //之前是被按下的
0000bc  4810              LDR      r0,|L10.256|
0000be  3812              SUBS     r0,r0,#0x12
0000c0  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000c2  f0000080          AND      r0,r0,#0x80
0000c6  b140              CBZ      r0,|L10.218|
;;;258                tp_dev.sta &= ~(1 << 7); //标记按键松开
0000c8  480d              LDR      r0,|L10.256|
0000ca  3812              SUBS     r0,r0,#0x12
0000cc  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000ce  f0200080          BIC      r0,r0,#0x80
0000d2  490b              LDR      r1,|L10.256|
0000d4  3912              SUBS     r1,r1,#0x12
0000d6  7508              STRB     r0,[r1,#0x14]
0000d8  e008              B        |L10.236|
                  |L10.218|
;;;259            } else { //之前就没有被按下
;;;260                tp_dev.x0 = 0;
0000da  2000              MOVS     r0,#0
0000dc  4908              LDR      r1,|L10.256|
0000de  3912              SUBS     r1,r1,#0x12
0000e0  8188              STRH     r0,[r1,#0xc]
;;;261                tp_dev.y0 = 0;
0000e2  81c8              STRH     r0,[r1,#0xe]
;;;262                tp_dev.x = 0xffff;
0000e4  f64f70ff          MOV      r0,#0xffff
0000e8  8208              STRH     r0,[r1,#0x10]
;;;263                tp_dev.y = 0xffff;
0000ea  8248              STRH     r0,[r1,#0x12]
                  |L10.236|
;;;264            }
;;;265        }
;;;266    
;;;267        return tp_dev.sta & TP_PRES_DOWN; //返回当前的触屏状态
0000ec  4804              LDR      r0,|L10.256|
0000ee  3812              SUBS     r0,r0,#0x12
0000f0  7d00              LDRB     r0,[r0,#0x14]  ; tp_dev
0000f2  f0000080          AND      r0,r0,#0x80
;;;268    }
0000f6  e8bd81f0          POP      {r4-r8,pc}
;;;269    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L10.252|
                          DCD      0x40022000
                  |L10.256|
                          DCD      tp_dev+0x12

                          AREA ||i.TP_Write_Byte||, CODE, READONLY, ALIGN=2

                  TP_Write_Byte PROC
;;;38     ******************************************************************************/
;;;39     void TP_Write_Byte(u8 num)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
;;;41         u8 count = 0;
000004  2500              MOVS     r5,#0
;;;42     
;;;43         for (count = 0; count < 8; count++) {
000006  bf00              NOP      
000008  e017              B        |L11.58|
                  |L11.10|
;;;44             if (num & 0x80) {
00000a  f0040080          AND      r0,r4,#0x80
00000e  b120              CBZ      r0,|L11.26|
;;;45                 TP_DIN_H;
000010  2104              MOVS     r1,#4
000012  480b              LDR      r0,|L11.64|
000014  f7fffffe          BL       ll_gpio_bit_set
000018  e003              B        |L11.34|
                  |L11.26|
;;;46             } else {
;;;47                 TP_DIN_L;
00001a  2104              MOVS     r1,#4
00001c  4808              LDR      r0,|L11.64|
00001e  f7fffffe          BL       ll_gpio_bit_reset
                  |L11.34|
;;;48             }
;;;49     
;;;50             num <<= 1;
000022  0660              LSLS     r0,r4,#25
000024  0e04              LSRS     r4,r0,#24
;;;51             TP_CLK_L;
000026  2101              MOVS     r1,#1
000028  4805              LDR      r0,|L11.64|
00002a  f7fffffe          BL       ll_gpio_bit_reset
;;;52             TP_CLK_H;   //上升沿有效
00002e  2101              MOVS     r1,#1
000030  4803              LDR      r0,|L11.64|
000032  f7fffffe          BL       ll_gpio_bit_set
000036  1c68              ADDS     r0,r5,#1              ;43
000038  b2c5              UXTB     r5,r0                 ;43
                  |L11.58|
00003a  2d08              CMP      r5,#8                 ;43
00003c  dbe5              BLT      |L11.10|
;;;53         }
;;;54     }
00003e  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  |L11.64|
                          DCD      0x40027000

                          AREA ||i.ll_gpio_bit_reset||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_reset PROC
;;;311      */
;;;312    __STATIC_INLINE void ll_gpio_bit_reset(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  b28a              UXTH     r2,r1
;;;313        p_gpio->BSRS = ((u32)pin_bits) & 0xFFFF;
000002  6382              STR      r2,[r0,#0x38]
;;;314    }
000004  4770              BX       lr
;;;315    
                          ENDP


                          AREA ||i.ll_gpio_bit_set||, CODE, READONLY, ALIGN=1

                  ll_gpio_bit_set PROC
;;;300      */
;;;301    __STATIC_INLINE void ll_gpio_bit_set(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  040a              LSLS     r2,r1,#16
;;;302        p_gpio->BSRS = ((u32)pin_bits) << 16;
000002  6382              STR      r2,[r0,#0x38]
;;;303    }
000004  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i.ll_gpio_read_data_bit||, CODE, READONLY, ALIGN=1

                  ll_gpio_read_data_bit PROC
;;;322      */
;;;323    __STATIC_INLINE TYPE_ENUM_LL_GPIO_BIT_ACTION ll_gpio_read_data_bit(GPIO_TypeDef* p_gpio, u16 pin_bits) {
000000  4602              MOV      r2,r0
;;;324        TYPE_ENUM_LL_GPIO_BIT_ACTION bit_status = LL_GPIO_RESET;
000002  2000              MOVS     r0,#0
;;;325        
;;;326        if ((p_gpio->DR & pin_bits) != (u32)LL_GPIO_RESET) {
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L14.14|
;;;327            bit_status = LL_GPIO_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;328        } else {
;;;329            bit_status = LL_GPIO_RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;330        }
;;;331        
;;;332        return bit_status;
;;;333    }
000010  4770              BX       lr
;;;334    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  CMD_RDX
000000  d0                DCB      0xd0
                  CMD_RDY
000001  900000            DCB      0x90,0x00,0x00
                  tp_dev
                          DCD      TP_Init
                          DCD      TP_Scan
                          DCD      TP_Adjust
000010  00000000          DCW      0x0000,0x0000
000014  00000000          DCW      0x0000,0x0000
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCFS     0x00000000 ; 0
000020  00000000          DCFS     0x00000000 ; 0
000024  00000000          DCW      0x0000,0x0000
000028  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\User\\Hardware\\hw_touch.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_hw_touch_c_CMD_RDX____REV16|
#line 459 "..\\..\\..\\..\\Libraries\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___10_hw_touch_c_CMD_RDX____REV16| PROC
#line 460

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_hw_touch_c_CMD_RDX____REVSH|
#line 474
|__asm___10_hw_touch_c_CMD_RDX____REVSH| PROC
#line 475

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_hw_touch_c_CMD_RDX____RRX|
#line 661
|__asm___10_hw_touch_c_CMD_RDX____RRX| PROC
#line 662

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
