/**
  ******************************************************************************
  * @file    Libraries/Device/Phoenix/txf6200_assert.h
  * @author  HUGE-IC Application Team
  * @version V1.0.0
  * @date    01-08-2018
  * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
  *          This file contains the system clock configuration for TXF6200 devices,
  *          and is generated by the clock configuration tool.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2018 HUGE-IC</center></h2>
  *
  *
  *
  ******************************************************************************
  */ 
/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __TXF6200_ASSERT_H
#define __TXF6200_ASSERT_H

#ifdef __cplusplus
 extern "C" {
#endif
    
/** @addtogroup TXF6200_SYSTEM TXF6200 System
  * @{
  */
     
/** @addtogroup assert_interface_gr Assert 
  * @ingroup  TXF6200_SYSTEM
  * @{
  */ 

/** @defgroup ASSERT_Exported_Constants ASSERT Exported Constants
  * @ingroup  assert_interface_gr
  * @brief    ASSERT external constant definition
  *
@verbatim   
  ===============================================================================
                                Exported Constants
  ===============================================================================  
  
    Exported Constants mainly restricts the partial configuration of the low 
    layer by using the form of enumeration to facilitate the use and understanding of 
    the module configuration. For the specific enumeration meaning, please refer to 
    the annotation of each module.

@endverbatim
  *
  * @{
  */
    
/* Exported types ------------------------------------------------------------*/
/* Exported constants --------------------------------------------------------*/
/* Includes ------------------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
/* Exported functions ------------------------------------------------------- */
    
    
/*! SRAM start address macro definition
 */
#define SRAM_START_ADDR                     ((u32)0x20000000)
/*! SRAM EFLASH start address macro definition
 */
#define SRAM_EFLASH_ADDR                    ((u32)0x08000000)


/*! SRAM size, 4KB space, maximum access unit 64bit.
 */
#define SRAM_LEN_4KB_64b                    ((u32)0x8000)
/*! SRAM size, 1KB space, maximum access unit 64bit.
 */
#define SRAM_LEN_1KB_64b                    ((u32)0x2000)
/*! SRAM size, 256B space, maximum access unit 64bit.
 */
#define SRAM_LEN_256B_64b                   ((u32)0x800)
/*! SRAM size, 128B space, maximum access unit 256bit.
 */
#define SRAM_LEN_128B_128b                  ((u32)0x800)
/*! EFLASH size, 32kB space, maximum access unit 32bit.
 */
#define SRAM_LEN_EFLASH_32KB_32b            ((u32)0x20000)

                                                    
/*! Define the minimum unit value of the sram buffer: : 1 Byte 
 */
#define SRAM_BUF_UINT_1BYTE                 (1UL)
/*! Define the minimum unit value of the sram buffer: : 2 Byte 
 */
#define SRAM_BUF_UINT_2BYTE                 (2UL)
/*! Define the minimum unit value of the sram buffer: : 4 Byte 
 */
#define SRAM_BUF_UINT_4BYTE                 (4UL)
/*! Define the minimum unit value of the sram buffer: : 8 Byte 
 */
#define SRAM_BUF_UINT_8BYTE                 (8UL)


/*! Define the buffer address alignment mask in SRAM: 1 Byte. 
 */
#define SRAM_BUF_ALIGNMEMT_1BYTE_MASK       (0UL)
/*! Define the buffer address alignment mask in SRAM: 2 Byte. 
 */
#define SRAM_BUF_ALIGNMEMT_1BYTE_MASK       (0UL)
/*! Define the buffer address alignment mask in SRAM: 2 Byte. 
 */
#define SRAM_BUF_ALIGNMEMT_2BYTE_MASK       (1UL)
/*! Define the buffer address alignment mask in SRAM: 4 Byte. 
 */
#define SRAM_BUF_ALIGNMEMT_4BYTE_MASK       (3UL)
/*! Define the buffer address alignment mask in SRAM: 8 Byte. 
 */
#define SRAM_BUF_ALIGNMEMT_8BYTE_MASK       (7UL)

                                            
/*! The start and end addresses of the space of SRAM0.
 */
#define SRAM0_START_ADDR                    (SRAM_START_ADDR)
#define SRAM0_END_ADDR                      (SRAM0_START_ADDR + SRAM_LEN_4KB_64b - 1)

/*! The start and end addresses of the space of SRAM10.
 */
#define SRAM10_START_ADDR                   (SRAM0_END_ADDR + 1)
#define SRAM10_END_ADDR                     (SRAM10_START_ADDR + SRAM_LEN_4KB_64b - 1)

/*! The start and end addresses of the space of SRAM1.
 */
#define SRAM1_START_ADDR                    (SRAM10_END_ADDR + 1)
#define SRAM1_END_ADDR                      (SRAM1_START_ADDR + SRAM_LEN_1KB_64b - 1)

/*! The start and end addresses of the space of SRAM2.
 */
#define SRAM2_START_ADDR                    (SRAM1_END_ADDR + 1)
#define SRAM2_END_ADDR                      (SRAM2_START_ADDR + SRAM_LEN_1KB_64b - 1)

/*! The start and end addresses of the space of SRAM3.
 */
#define SRAM3_START_ADDR                    (SRAM2_END_ADDR + 1)
#define SRAM3_END_ADDR                      (SRAM3_START_ADDR + SRAM_LEN_1KB_64b - 1)

/*! The start and end addresses of the space of SRAM4.
 */
#define SRAM4_START_ADDR                    (SRAM3_END_ADDR + 1)
#define SRAM4_END_ADDR                      (SRAM4_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM5.
 */
#define SRAM5_START_ADDR                    (SRAM4_END_ADDR + 1)
#define SRAM5_END_ADDR                      (SRAM5_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM6.
 */
#define SRAM6_START_ADDR                    (SRAM5_END_ADDR + 1)
#define SRAM6_END_ADDR                      (SRAM6_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM7.
 */
#define SRAM7_START_ADDR                    (SRAM6_END_ADDR + 1)
#define SRAM7_END_ADDR                      (SRAM7_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM8.
 */
#define SRAM8_START_ADDR                    (SRAM7_END_ADDR + 1)
#define SRAM8_END_ADDR                      (SRAM8_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM9.
 */
#define SRAM9_START_ADDR                    (SRAM8_END_ADDR + 1)
#define SRAM9_END_ADDR                      (SRAM9_START_ADDR + SRAM_LEN_256B_64b - 1)

/*! The start and end addresses of the space of SRAM11.
 */
#define SRAM11_START_ADDR                   (SRAM9_END_ADDR + 1)
#define SRAM11_END_ADDR                     (SRAM11_START_ADDR + SRAM_LEN_128B_128b - 1)

/*! The start and end addresses of the space of SRAM12.
 */
#define SRAM12_START_ADDR                   (SRAM11_END_ADDR + 1)
#define SRAM12_END_ADDR                     (SRAM12_START_ADDR + SRAM_LEN_128B_128b- 1)

/*! The start and end addresses of the space of SRAM13.
 */
#define SRAM13_START_ADDR                   (SRAM12_END_ADDR + 1)
#define SRAM13_END_ADDR                     (SRAM13_START_ADDR + SRAM_LEN_128B_128b - 1)

/*! The start and end addresses of the space of SRAM14.
 */
#define SRAM14_START_ADDR                   (SRAM13_END_ADDR + 1)
#define SRAM14_END_ADDR                     (SRAM14_START_ADDR + SRAM_LEN_128B_128b - 1)

/*! The start and end addresses of the space of SRAM15.
 */
#define SRAM15_START_ADDR                   (SRAM14_END_ADDR + 1)
#define SRAM15_END_ADDR                     (SRAM15_START_ADDR + SRAM_LEN_128B_128b - 1)

/*! The start and end addresses of the space of SRAM16.
 */
#define SRAM16_START_ADDR                   (SRAM15_END_ADDR + 1)
#define SRAM16_END_ADDR                     (SRAM16_START_ADDR + SRAM_LEN_128B_128b - 1)

/*! The start and end addresses of the space of SRAM16.
 */
#define SRAMEND_START_ADDR                  (SRAM16_END_ADDR + 1)
#define SRAMEND_END_ADDR                    (SRAMEND_START_ADDR)

/*! The start and end addresses of the space of eFLASH.
 */
#define SRAM_EFLASH_START_ADDR              (SRAM_EFLASH_ADDR)
#define SRAM_EFLASH_END_ADDR                (SRAM_EFLASH_START_ADDR + SRAM_LEN_EFLASH_32KB_32b - 1)

/**
  * @brief Enumerate the SRAM as a representation of the bit.
  */
typedef enum {                 
    /*! SRAM0  is enumerated as BIT(0).
     */
    ASSERT_SRAM0  = BIT(0),
    /*! SRAM10 is enumerated as BIT(1).
     */
    ASSERT_SRAM10 = BIT(1),
    /*! SRAM1  is enumerated as BIT(2).
     */
    ASSERT_SRAM1  = BIT(2),
    /*! SRAM2  is enumerated as BIT(3).
     */
    ASSERT_SRAM2  = BIT(3),
    /*! SRAM3  is enumerated as BIT(4).
     */
    ASSERT_SRAM3  = BIT(4),
    /*! SRAM4  is enumerated as BIT(5).
     */
    ASSERT_SRAM4  = BIT(5),
    /*! SRAM5  is enumerated as BIT(6).
     */
    ASSERT_SRAM5  = BIT(6),
    /*! SRAM6  is enumerated as BIT(7).
     */
    ASSERT_SRAM6  = BIT(7),
    /*! SRAM7  is enumerated as BIT(8).
     */
    ASSERT_SRAM7  = BIT(8),
    /*! SRAM8  is enumerated as BIT(9).
     */
    ASSERT_SRAM8  = BIT(9),
    /*! SRAM9  is enumerated as BIT(10).
     */
    ASSERT_SRAM9  = BIT(10),
    /*! SRAM11 is enumerated as BIT(11).
     */
    ASSERT_SRAM11 = BIT(11),
    /*! SRAM12 is enumerated as BIT(12).
     */
    ASSERT_SRAM12 = BIT(12),
    /*! SRAM13 is enumerated as BIT(13).
     */
    ASSERT_SRAM13 = BIT(13),
    /*! SRAM14 is enumerated as BIT(14).
    */
    ASSERT_SRAM14 = BIT(14),
    /*! SRAM15 is enumerated as BIT(15).
     */
    ASSERT_SRAM15 = BIT(15),
    /*! SRAM16 is enumerated as BIT(16).
     */
    ASSERT_SRAM16 = BIT(16),
    /*! EFLASH is enumerated as BIT(17).
     */
    ASSERT_EFLASH = BIT(17),
    /*! SRAM END is enumerated as BIT(18).
     */
    ASSERT_SRAMEND = BIT(18),
} TYPE_ENUM_ASSERT_SRAM;

/*! GPDMA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_GPDMA_MASK                    (ASSERT_SRAM0 | ASSERT_SRAM10 | ASSERT_SRAM1 | \
                                            ASSERT_SRAM2 | ASSERT_SRAM3  | ASSERT_EFLASH)

/*! CRC DMA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_CRC_DMA_MASK                   (ASSERT_SRAM0 | ASSERT_SRAM10)

/*! GMAC TXFIFO addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_GMAC_TXFIFO_MASK               (ASSERT_SRAM2)
/*! GMAC RXFIFO addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_GMAC_RXFIFO_MASK               (ASSERT_SRAM3)
/*! GMAC DMA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_GMAC_DMA_MASK                  (ASSERT_SRAM0 | ASSERT_SRAM10 | ASSERT_SRAM1)

/*! SINCOS0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_SINCOS0_MASK                   (ASSERT_SRAM0 | ASSERT_SRAM1 | ASSERT_SRAM2 | \
                                             ASSERT_SRAM3)
/*! SINCOS1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_SINCOS1_MASK                   (ASSERT_SRAM0 | ASSERT_SRAM1 | ASSERT_SRAM2 | \
                                             ASSERT_SRAM3)

/*! RMS0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_RMS0_MASK                      (ASSERT_SRAM0 | ASSERT_SRAM1 | ASSERT_SRAM2 | \
                                             ASSERT_SRAM3)
/*! RMS1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_RMS1_MASK                      (ASSERT_SRAM0 | ASSERT_SRAM1 | ASSERT_SRAM2 | \
                                             ASSERT_SRAM3)
/*! RMS02 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_RMS2_MASK                      (ASSERT_SRAM0 | ASSERT_SRAM1 | ASSERT_SRAM2 | \
                                             ASSERT_SRAM3)

/*! MATRIX X addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_MATRIX_X_MASK                  (ASSERT_SRAM1)
/*! MATRIX_Y addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_MATRIX_Y_MASK                  (ASSERT_SRAM2)
/*! MATRIX_Z addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_MATRIX_Z_MASK                  (ASSERT_SRAM3)

/*! HCC FFT addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_HC_FFT_MASK                    (ASSERT_SRAM0 | ASSERT_SRAM4 | ASSERT_SRAM5 | \
                                             ASSERT_SRAM6 | ASSERT_SRAM7 | ASSERT_SRAM8 | \
                                             ASSERT_SRAM9)
/*! HCC PHASE addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_HC_PHS_MASK                    (ASSERT_SRAM0 | ASSERT_SRAM10)
/*! HHC Rang addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_HC_RANG_MASK                   (ASSERT_SRAM0 | ASSERT_SRAM10)

/*! FFT0 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT0_REAL_MASK                 (ASSERT_SRAM1)
/*! FFT0 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT0_IMAG_MASK                 (ASSERT_SRAM2)
/*! FFT0 WINDOW addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT0_WINDOW_MASK               (ASSERT_SRAM0)
/*! FFT0 REALIMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT0_REALIMAG_MASK             (ASSERT_SRAM4 | ASSERT_SRAM5)
/*! FFT0 RAM addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT0_RAM_MASK                  (ASSERT_SRAM4 | ASSERT_SRAM5)
/*! FFT1 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT1_REAL_MASK                 (ASSERT_SRAM2)
/*! FFT1 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT1_IMAG_MASK                 (ASSERT_SRAM3)
/*! FFT1 WINDOW addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT1_WINDOW_MASK               (ASSERT_SRAM0)
/*! FFT1 REALIMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT1_REALIMAG_MASK             (ASSERT_SRAM6 | ASSERT_SRAM7)
/*! FFT1 RAM addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT1_RAM_MASK                  (ASSERT_SRAM6 | ASSERT_SRAM7)
/*! FFT2 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT2_REAL_MASK                 (ASSERT_SRAM3)
/*! FFT2 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT2_IMAG_MASK                 (ASSERT_SRAM1)
/*! FFT2 WINDOW addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT2_WINDOW_MASK               (ASSERT_SRAM0)
/*! FFT2 REALIMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT2_REALIMAG_MASK             (ASSERT_SRAM8 | ASSERT_SRAM9)
/*! FFT2 RAM addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FFT2_RAM_MASK                  (ASSERT_SRAM8 | ASSERT_SRAM9)

/*! ARC TRIANGLE 0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_ARC_TRIANGLE_0_MASK            (ASSERT_SRAM1 | ASSERT_SRAM2 | ASSERT_SRAM3 | \
                                             ASSERT_SRAM4 | ASSERT_SRAM5)
/*! ARC TRIANGLE 1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_ARC_TRIANGLE_1_MASK            (ASSERT_SRAM1 | ASSERT_SRAM2 | ASSERT_SRAM3 | \
                                             ASSERT_SRAM6 | ASSERT_SRAM7)
/*! ARC TRIANGLE 2 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_ARC_TRIANGLE_2_MASK            (ASSERT_SRAM1 | ASSERT_SRAM2 | ASSERT_SRAM3 | \
                                             ASSERT_SRAM8 | ASSERT_SRAM9)

/*! DFT0 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT0_REAL_MASK                 (ASSERT_SRAM1)
/*! DFT0 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT0_IMAG_MASK                 (ASSERT_SRAM2)
/*! DFT1 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT1_REAL_MASK                 (ASSERT_SRAM2)
/*! DFT1 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT1_IMAG_MASK                 (ASSERT_SRAM3)
/*! DFT2 REAL addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT2_REAL_MASK                 (ASSERT_SRAM3)
/*! DFT2 IMAG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DFT2_IMAG_MASK                 (ASSERT_SRAM1)

/*! DATADMA source addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_DATADMA_SRC_MASK               (ASSERT_SRAM0 | ASSERT_SRAM10 | ASSERT_SRAM1 | \
                                             ASSERT_SRAM2 | ASSERT_SRAM3  | ASSERT_SRAM4 | \
                                             ASSERT_SRAM5 | ASSERT_SRAM6  | ASSERT_SRAM7 | \
                                             ASSERT_SRAM8 | ASSERT_SRAM9)
/*! DATADMA Destination addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM. 
 */
#define SRAM_DATADMA_DST_MASK               (ASSERT_SRAM0 | ASSERT_SRAM10 | ASSERT_SRAM1 | \
                                             ASSERT_SRAM2 | ASSERT_SRAM3  | ASSERT_SRAM4 | \
                                             ASSERT_SRAM5 | ASSERT_SRAM6  | ASSERT_SRAM7 | \
                                             ASSERT_SRAM8 | ASSERT_SRAM9)
                                             
/*! SARADC DMA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_SARADC_DMA_MASK                (ASSERT_SRAM0 | ASSERT_SRAM10 | ASSERT_SRAM1 | \
                                             ASSERT_SRAM2 | ASSERT_SRAM3)

/*! IIR CONFIG0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_CONFIG0_MASK               (ASSERT_SRAM11)
/*! IIR CONFIG1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_CONFIG1_MASK               (ASSERT_SRAM12)
/*! IIR CONFIG2 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_CONFIG2_MASK               (ASSERT_SRAM13)
/*! IIR COEF0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_COEF0_MASK                 (ASSERT_SRAM14)
/*! IIR COEF1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_COEF1_MASK                 (ASSERT_SRAM15)
/*! IIR COEF2 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM. 
 */
#define SRAM_IIR_COEF2_MASK                 (ASSERT_SRAM16)
/*! IIR DATA0 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_DATA0_MASK                 (ASSERT_SRAM1)
/*! IIR DATA1 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_DATA1_MASK                 (ASSERT_SRAM2)
/*! IIR DATA2 addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_IIR_DATA2_MASK                 (ASSERT_SRAM3)

/*! FIR CONFIG addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FIR_CONFIG_MASK                (ASSERT_SRAM0)
/*! FIR0 DATA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FIR0_DATA_MASK                 (ASSERT_SRAM1)
/*! FIR1 DATA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FIR1_DATA_MASK                 (ASSERT_SRAM2)
/*! FIR2 DATA addr supports access to the SRAM and defines its macro as TYPE_ENUM_ASSERT_SRAM.
 */
#define SRAM_FIR2_DATA_MASK                 (ASSERT_SRAM3)


/*! Define GPDMA module buffer address alignment mask.
 */
#define SRAM_GPDMA_ALIGN_MASK               SRAM_BUF_ALIGNMEMT_1BYTE_MASK

/*! Define CRC DMA module buffer address alignment mask.
 */
#define SRAM_CRC_DMA_ALIGN_MASK             SRAM_BUF_ALIGNMEMT_4BYTE_MASK

/*! Define GMAC TXFIFO module buffer address alignment mask.
 */
#define SRAM_GMAC_TXFIFO_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define GMAC RXFIFO module buffer address alignment mask.
 */
#define SRAM_GMAC_RXFIFO_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define GMAC DMA module buffer address alignment mask.
 */
#define SRAM_GMAC_DMA_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define SINCOS0 module buffer address alignment mask.
 */
#define SRAM_SINCOS0_ALIGN_MASK             SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define SINCOS1 module buffer address alignment mask.
 */
#define SRAM_SINCOS1_ALIGN_MASK             SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define RMS0 module buffer address alignment mask.
 */
#define SRAM_RMS0_ALIGN_MASK                SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define RMS1 module buffer address alignment mask.
 */
#define SRAM_RMS1_ALIGN_MASK                SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define RMS2 module buffer address alignment mask.
 */
#define SRAM_RMS2_ALIGN_MASK                SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define MATRIX X module buffer address alignment mask.
 */
#define SRAM_MATRIX_X_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define MATRIX_Y module buffer address alignment mask.
 */
#define SRAM_MATRIX_Y_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define MATRIX_Z module buffer address alignment mask.
 */
#define SRAM_MATRIX_Z_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_2BYTE_MASK

/*! Define HCC FFT module buffer address alignment mask.
 */
#define SRAM_HC_FFT_ALIGN_MASK              SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define HCC PHASE module buffer address alignment mask.
 */
#define SRAM_HC_PHS_ALIGN_MASK              SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define HHC Rang module buffer address alignment mask.
 */
#define SRAM_HC_RANG_ALIGN_MASK             SRAM_BUF_ALIGNMEMT_4BYTE_MASK

/*! Define FFT0 REAL module buffer address alignment mask. 
 */
#define SRAM_FFT0_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT0 IMAG module buffer address alignment mask.
 */
#define SRAM_FFT0_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT0 WINDOW module buffer address alignment mask.
 */
#define SRAM_FFT0_WINDOW_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT0 REALIMAG module buffer address alignment mask.
 */
#define SRAM_FFT0_REALIMAG_ALIGN_MASK       SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define FFT0 RAM module buffer address alignment mask.
 */
#define SRAM_FFT0_RAM_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define FFT1 REAL module buffer address alignment mask.
 */
#define SRAM_FFT1_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT1 IMAG module buffer address alignment mask.
 */
#define SRAM_FFT1_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT1 WINDOW module buffer address alignment mask.
 */
#define SRAM_FFT1_WINDOW_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT1 REALIMAG module buffer address alignment mask.
 */
#define SRAM_FFT1_REALIMAG_ALIGN_MASK       SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define FFT1 RAM module buffer address alignment mask.
 */
#define SRAM_FFT1_RAM_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_4BYTE_MASK
/*! Define FFT2 REAL module buffer address alignment mask.
 */
#define SRAM_FFT2_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT2 IMAG module buffer address alignment mask.
 */
#define SRAM_FFT2_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT2 WINDOW module buffer address alignment mask.
 */
#define SRAM_FFT2_WINDOW_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FFT2 REALIMAG module buffer address alignment mask.
 */
#define SRAM_FFT2_REALIMAG_ALIGN_MASK       SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define FFT2 RAM module buffer address alignment mask.
 */
#define SRAM_FFT2_RAM_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_4BYTE_MASK

/*! Define ARC TRIANGLE 0 module buffer address alignment mask.
 */
#define SRAM_ARC_TRIANGLE_0_ALIGN_MASK      SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define ARC TRIANGLE 1 module buffer address alignment mask.
 */
#define SRAM_ARC_TRIANGLE_1_ALIGN_MASK      SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define ARC TRIANGLE 2 module buffer address alignment mask.
 */
#define SRAM_ARC_TRIANGLE_2_ALIGN_MASK      SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define DFT0 REAL module buffer address alignment mask.
 */
#define SRAM_DFT0_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT0 IMAG module buffer address alignment mask.
 */
#define SRAM_DFT0_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT0 output module buffer address alignment mask.
 */
#define SRAM_DFT0_OUT_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define DFT1 REAL module buffer address alignment mask.
 */
#define SRAM_DFT1_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT1 IMAG module buffer address alignment mask.
 */
#define SRAM_DFT1_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT1 output module buffer address alignment mask.
 */
#define SRAM_DFT1_OUT_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define DFT2 REAL module buffer address alignment mask.
 */
#define SRAM_DFT2_REAL_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT2 IMAG module buffer address alignment mask.
 */
#define SRAM_DFT2_IMAG_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define DFT2 output module buffer address alignment mask.
 */
#define SRAM_DFT2_OUT_ALIGN_MASK            SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define DATADMA source module buffer address alignment mask.
 */
#define SRAM_DATADMA_SRC_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_1BYTE_MASK
/*! Define DATADMA Destination module buffer address alignment mask.
 */
#define SRAM_DATADMA_DST_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_1BYTE_MASK

/*! Define SARADC DMA module buffer address alignment mask.
 */
#define SRAM_SARADC_DMA_ALIGN_MASK          SRAM_BUF_ALIGNMEMT_8BYTE_MASK

/*! Define IIR CONFIG0 module buffer address alignment mask.
 */
#define SRAM_IIR_CONFIG0_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR CONFIG1 module buffer address alignment mask.
 */
#define SRAM_IIR_CONFIG1_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR CONFIG2 module buffer address alignment mask.
 */
#define SRAM_IIR_CONFIG2_ALIGN_MASK         SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR COEF0 module buffer address alignment mask.
 */
#define SRAM_IIR_COEF0_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR COEF1 module buffer address alignment mask.
 */
#define SRAM_IIR_COEF1_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR COEF2 module buffer address alignment mask.
 */
#define SRAM_IIR_COEF2_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define IIR DATA0 module buffer address alignment mask.
 */
#define SRAM_IIR_DATA0_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define IIR DATA1 module buffer address alignment mask.
 */
#define SRAM_IIR_DATA1_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define IIR DATA2 module buffer address alignment mask.
 */
#define SRAM_IIR_DATA2_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK

/*! Define FIR CONFIG module buffer address alignment mask.
 */
#define SRAM_FIR_CONFIG_ALIGN_MASK          SRAM_BUF_ALIGNMEMT_8BYTE_MASK
/*! Define FIR0 DATA module buffer address alignment mask.
 */
#define SRAM_FIR0_DATA_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FIR1 DATA module buffer address alignment mask.
 */
#define SRAM_FIR1_DATA_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK
/*! Define FIR2 DATA module buffer address alignment mask.
 */
#define SRAM_FIR2_DATA_ALIGN_MASK           SRAM_BUF_ALIGNMEMT_2BYTE_MASK

/**
  * @}
  */
  
/** @defgroup ASSERT_Data_Handle ASSERT Data Handle functions
  * @ingroup  assert_interface_gr
  * @brief    ASSERT Data Handle functions 
  *
@verbatim   
  ===============================================================================
                            Data Handle functions
  ===============================================================================  

    This subsection provides a set of functions allowing to manage the ASSERT data 
    Handle.
  
@endverbatim
  *
  * @{
  */


#ifdef __cplusplus
}
#endif

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

#endif /* __TXF6200_ASSERT_H */


/************************ (C) COPYRIGHT TXMicroelectronics *****END OF FILE****/
